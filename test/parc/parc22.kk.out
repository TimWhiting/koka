module parc/parc22
import std/core/types = std/core/types = "";
import std/core = std/core = "";
pub rec type parc/parc22/hello {
 pub con parc/parc22/World(i: int){0,1,8} : (i : int) -> parc/parc22/hello;
};
// Automatically generated. Retrieves the `i` constructor field of the `:hello` type.
pub fun i : (^ hello : parc/parc22/hello) -> int
 = fn(hello: parc/parc22/hello){
 match (hello) {
 (.skip parc/parc22/World((.x: int)) : parc/parc22/hello )
 -> std/core/types/.dup(.x);
 };
 };
pub fun .copy : (.this : parc/parc22/hello, i : optional<int>) -> parc/parc22/hello
 = fn(.this: parc/parc22/hello, i0: optional<int>){
 parc/parc22/World((match (i0) {
 (std/core/types/Optional(((.skip std/core/types/.Box((.i: int)) : .Box ) as .box: .Box)) : optional<int> )
 -> val _ : int
 = std/core/types/.dup(.i);
 val _ : ()
 = std/core/types/.drop(i0);
 val _ : ()
 = std/core/types/.drop(.this, (std/core/int32(1)));
 .i;
 (.skip std/core/types/None() : (optional<int>) )
 -> val _ : ()
 = std/core/types/.drop(i0);
 (match (.this) {
 (.skip parc/parc22/World((.x: int)) : parc/parc22/hello )
 -> val _ : ()
 = (match ((std/core/types/.is-unique(.this))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = std/core/types/();
 std/core/types/.free(.this);
 _
 -> val _ : ()
 = val _ : int
 = std/core/types/.dup(.x);
 std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(.this);
 std/core/types/();
 });
 .x;
 });
 }));
 };
// Automatically generated. Shows a string representation of the `hello` type.
pub fun show : forall<e> (^ .this : parc/parc22/hello) -> e string
 = fn<e>(.this: parc/parc22/hello){
 match (.this) {
 (.skip parc/parc22/World((i0: int)) : parc/parc22/hello )
 -> std/core/(++.1)("World(", (std/core/(++.1)((std/core/(++.1)("i: ", (std/core/show((std/core/types/.dup(i0)))))), ")")));
 };
 };
// Automatically generated. Equality comparison of the `hello` type (ignores function fields).
pub fun (==) : forall<e> (^ .this : parc/parc22/hello, .other : parc/parc22/hello) -> e bool
 = fn<e>(.this: parc/parc22/hello, .other: parc/parc22/hello){
 match (.this, .other) {
 (.skip parc/parc22/World((other-i: int)) : parc/parc22/hello ), (.skip parc/parc22/World((this-i: int)) : parc/parc22/hello )
 -> val _ : ()
 = (match ((std/core/types/.is-unique(.other))) {
 (std/core/types/True() : bool )
 -> val _ : ()
 = std/core/types/();
 std/core/types/.free(.other);
 _
 -> val _ : ()
 = val _ : int
 = std/core/types/.dup(other-i);
 std/core/types/();
 val _ : ()
 = std/core/types/.dec-ref(.other);
 std/core/types/();
 });
 val .brw : bool
 = std/core/(==.1)(this-i, other-i);
 val _ : ()
 = std/core/types/.drop(other-i);
 .brw;
 };
 };
pub fun f : (h : parc/parc22/hello) -> parc/parc22/hello
 = fn(h: parc/parc22/hello){
 val .ru : reuse
 = std/core/types/no-reuse();
 val _ : ()
 = std/core/types/.assign-reuse(.ru, (std/core/types/.drop-reuse(h, (std/core/int32(1)))));
 std/core/types/.alloc-at(.ru, (parc/parc22/World(2)));
 };