pub module std/sys/dom/traversal/documentTraversal

// Interface DocumentTraversal (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeDocumentTraversal  : forall<a> (a) -> maybe<documentTraversal>
{ inline "(#1.toString()==='[object DocumentTraversal]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toDocumentTraversal : forall<a> (a) -> exn documentTraversal
{ inline "(#1.toString()==='[object DocumentTraversal]'?#1:std_core.error('toDocumentTraversal: cast failed'))" }


// DocumentTraversal implements DocumentTraversal (supplemental)
inline extern createNodeIterator : (this: documentTraversal, root: node, whatToShow: uint32, filter: nodeFilter, entityReferenceExpansion: bool) -> dom nodeIterator
{ inline "#1.createNodeIterator(#2, #3, #4, #5)" }

inline extern createTreeWalker : (this: documentTraversal, root: node, whatToShow: uint32, filter: nodeFilter, entityReferenceExpansion: bool) -> dom treeWalker
{ inline "#1.createTreeWalker(#2, #3, #4, #5)" }

