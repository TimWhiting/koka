pub module std/sys/dom/documentFragment

// Interface DocumentFragment (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeDocumentFragment  : forall<a> (a) -> maybe<documentFragment>
{ inline "(#1.toString()==='[object DocumentFragment]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toDocumentFragment : forall<a> (a) -> exn documentFragment
{ inline "(#1.toString()==='[object DocumentFragment]'?#1:std_core.error('toDocumentFragment: cast failed'))" }


// DocumentFragment implements DocumentFragment (supplemental)
// DocumentFragment implements NodeSelector (supplemental)
inline extern querySelector : (this: documentFragment, selectors: string) -> dom element
{ inline "#1.querySelector(#2)" }

inline extern querySelectorAll : (this: documentFragment, selectors: string) -> dom nodeList
{ inline "#1.querySelectorAll(#2)" }

// DocumentFragment extends Node
inline extern node : (documentFragment) -> node // upcasting to extended type
{ inline "#1" }
// DocumentFragment implements in extension Node (overloading)
inline extern nodeType : (this: documentFragment) -> dom nodeType
{ inline "#1.nodeType" }
inline extern nodeName : (this: documentFragment) -> dom string
{ inline "#1.nodeName" }
inline extern baseUri : (this: documentFragment) -> dom string
{ inline "#1.baseURI" }
inline extern ownerDocument : (this: documentFragment) -> dom document
{ inline "#1.ownerDocument" }
inline extern parentNode : (this: documentFragment) -> dom node
{ inline "#1.parentNode" }
inline extern parentElement : (this: documentFragment) -> dom element
{ inline "#1.parentElement" }
inline extern hasChildNodes : (this: documentFragment) -> dom bool
{ inline "#1.hasChildNodes()" }

inline extern childNodes : (this: documentFragment) -> dom nodeList
{ inline "#1.childNodes" }
inline extern firstChild : (this: documentFragment) -> dom node
{ inline "#1.firstChild" }
inline extern lastChild : (this: documentFragment) -> dom node
{ inline "#1.lastChild" }
inline extern previousSibling : (this: documentFragment) -> dom node
{ inline "#1.previousSibling" }
inline extern nextSibling : (this: documentFragment) -> dom node
{ inline "#1.nextSibling" }
inline extern compareDocumentPosition : (this: documentFragment, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

inline extern nodeValue : (this: documentFragment) -> dom string
{ inline "#1.nodeValue" }
inline extern nodeValue : (this: documentFragment, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
inline extern textContent : (this: documentFragment) -> dom string
{ inline "#1.textContent" }
inline extern textContent : (this: documentFragment, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
inline extern insertBefore : (this: documentFragment, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

inline extern replaceChild : (this: documentFragment, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

inline extern removeChild : (this: documentFragment, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

inline extern appendChild : (this: documentFragment, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

inline extern cloneNode : (this: documentFragment, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

inline extern isSameNode : (this: documentFragment, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

inline extern isEqualNode : (this: documentFragment, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

inline extern lookupPrefix : (this: documentFragment, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

inline extern lookupNamespaceUri : (this: documentFragment, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

inline extern isDefaultNamespace : (this: documentFragment, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// DocumentFragment extends EventTarget
inline extern eventTarget : (documentFragment) -> eventTarget // upcasting to extended type
{ inline "#1" }
// DocumentFragment implements in extension EventTarget (overloading)
inline extern addEventListener : (this: documentFragment, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: documentFragment, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: documentFragment, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: documentFragment, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: documentFragment, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

