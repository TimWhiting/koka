pub module std/sys/dom/typedarray/dataView

// Interface DataView (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeDataView  : forall<a> (a) -> maybe<dataView>
{ inline "(#1.toString()==='[object DataView]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toDataView : forall<a> (a) -> exn dataView
{ inline "(#1.toString()==='[object DataView]'?#1:std_core.error('toDataView: cast failed'))" }


// DataView implements DataView (supplemental)
inline extern getInt8 : (this: dataView, byteOffset: uint32) -> dom byte
{ inline "#1.getInt8(#2)" }

inline extern getUint8 : (this: dataView, byteOffset: uint32) -> dom octet
{ inline "#1.getUint8(#2)" }

inline extern getInt16 : (this: dataView, byteOffset: uint32) -> dom int16
{ inline "#1.getInt16(#2)" }

inline extern getInt16 : (this: dataView, byteOffset: uint32, littleEndian: bool) -> dom int16
{ inline "#1.getInt16(#2, #3)" }

inline extern getUint16 : (this: dataView, byteOffset: uint32) -> dom uint16
{ inline "#1.getUint16(#2)" }

inline extern getUint16 : (this: dataView, byteOffset: uint32, littleEndian: bool) -> dom uint16
{ inline "#1.getUint16(#2, #3)" }

inline extern getInt32 : (this: dataView, byteOffset: uint32) -> dom int32
{ inline "#1.getInt32(#2)" }

inline extern getInt32 : (this: dataView, byteOffset: uint32, littleEndian: bool) -> dom int32
{ inline "#1.getInt32(#2, #3)" }

inline extern getUint32 : (this: dataView, byteOffset: uint32) -> dom uint32
{ inline "#1.getUint32(#2)" }

inline extern getUint32 : (this: dataView, byteOffset: uint32, littleEndian: bool) -> dom uint32
{ inline "#1.getUint32(#2, #3)" }

inline extern getFloat32 : (this: dataView, byteOffset: uint32) -> dom float32
{ inline "#1.getFloat32(#2)" }

inline extern getFloat32 : (this: dataView, byteOffset: uint32, littleEndian: bool) -> dom float32
{ inline "#1.getFloat32(#2, #3)" }

inline extern getFloat64 : (this: dataView, byteOffset: uint32) -> dom float64
{ inline "#1.getFloat64(#2)" }

inline extern getFloat64 : (this: dataView, byteOffset: uint32, littleEndian: bool) -> dom float64
{ inline "#1.getFloat64(#2, #3)" }

inline extern setInt8 : (this: dataView, byteOffset: uint32, value: byte) -> dom ()
{ inline "#1.setInt8(#2, #3)" }

inline extern setUint8 : (this: dataView, byteOffset: uint32, value: octet) -> dom ()
{ inline "#1.setUint8(#2, #3)" }

inline extern setInt16 : (this: dataView, byteOffset: uint32, value: int16) -> dom ()
{ inline "#1.setInt16(#2, #3)" }

inline extern setInt16 : (this: dataView, byteOffset: uint32, value: int16, littleEndian: bool) -> dom ()
{ inline "#1.setInt16(#2, #3, #4)" }

inline extern setUint16 : (this: dataView, byteOffset: uint32, value: uint16) -> dom ()
{ inline "#1.setUint16(#2, #3)" }

inline extern setUint16 : (this: dataView, byteOffset: uint32, value: uint16, littleEndian: bool) -> dom ()
{ inline "#1.setUint16(#2, #3, #4)" }

inline extern setInt32 : (this: dataView, byteOffset: uint32, value: int32) -> dom ()
{ inline "#1.setInt32(#2, #3)" }

inline extern setInt32 : (this: dataView, byteOffset: uint32, value: int32, littleEndian: bool) -> dom ()
{ inline "#1.setInt32(#2, #3, #4)" }

inline extern setUint32 : (this: dataView, byteOffset: uint32, value: uint32) -> dom ()
{ inline "#1.setUint32(#2, #3)" }

inline extern setUint32 : (this: dataView, byteOffset: uint32, value: uint32, littleEndian: bool) -> dom ()
{ inline "#1.setUint32(#2, #3, #4)" }

inline extern setFloat32 : (this: dataView, byteOffset: uint32, value: float32) -> dom ()
{ inline "#1.setFloat32(#2, #3)" }

inline extern setFloat32 : (this: dataView, byteOffset: uint32, value: float32, littleEndian: bool) -> dom ()
{ inline "#1.setFloat32(#2, #3, #4)" }

inline extern setFloat64 : (this: dataView, byteOffset: uint32, value: float64) -> dom ()
{ inline "#1.setFloat64(#2, #3)" }

inline extern setFloat64 : (this: dataView, byteOffset: uint32, value: float64, littleEndian: bool) -> dom ()
{ inline "#1.setFloat64(#2, #3, #4)" }

// DataView extends ArrayBufferView
inline extern arrayBufferView : (dataView) -> arrayBufferView // upcasting to extended type
{ inline "#1" }
// DataView implements in extension ArrayBufferView (overloading)
inline extern buffer : (this: dataView) -> dom arrayBuffer
{ inline "#1.buffer" }
inline extern byteOffset : (this: dataView) -> dom uint32
{ inline "#1.byteOffset" }
inline extern byteLength : (this: dataView) -> dom uint32
{ inline "#1.byteLength" }
