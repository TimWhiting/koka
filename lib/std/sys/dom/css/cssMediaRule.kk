pub module std/sys/dom/css/cssMediaRule

// Interface CSSMediaRule (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeCssMediaRule  : forall<a> (a) -> maybe<cssMediaRule>
{ inline "(#1.toString()==='[object CSSMediaRule]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toCssMediaRule : forall<a> (a) -> exn cssMediaRule
{ inline "(#1.toString()==='[object CSSMediaRule]'?#1:std_core.error('toCssMediaRule: cast failed'))" }


// CSSMediaRule implements CSSMediaRule (supplemental)
inline extern media : (this: cssMediaRule) -> dom mediaList
{ inline "#1.media" }
inline extern media : (this: cssMediaRule, assigned: mediaList) -> dom ()
{ inline "(#1.media = #2)" }
inline extern cssRules : (this: cssMediaRule) -> dom cssRuleList
{ inline "#1.cssRules" }
inline extern insertRule : (this: cssMediaRule, rule: string, index: uint32) -> dom uint32
{ inline "#1.insertRule(#2, #3)" }

inline extern deleteRule : (this: cssMediaRule, index: uint32) -> dom ()
{ inline "#1.deleteRule(#2)" }

// CSSMediaRule extends CSSRule
inline extern cssRule : (cssMediaRule) -> cssRule // upcasting to extended type
{ inline "#1" }
// CSSMediaRule implements in extension CSSRule (overloading)
inline extern type_ : (this: cssMediaRule) -> dom cssRuleType
{ inline "#1.type" }
inline extern cssText : (this: cssMediaRule) -> dom string
{ inline "#1.cssText" }
inline extern cssText : (this: cssMediaRule, assigned: string) -> dom ()
{ inline "(#1.cssText = #2)" }
inline extern parentRule : (this: cssMediaRule) -> dom cssRule
{ inline "#1.parentRule" }
inline extern parentStyleSheet : (this: cssMediaRule) -> dom cssStyleSheet
{ inline "#1.parentStyleSheet" }
