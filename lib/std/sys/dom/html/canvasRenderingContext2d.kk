pub module std/sys/dom/html/canvasRenderingContext2d

// Interface CanvasRenderingContext2D (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeCanvasRenderingContext2d  : forall<a> (a) -> maybe<canvasRenderingContext2d>
{ inline "(#1.toString()==='[object CanvasRenderingContext2D]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toCanvasRenderingContext2d : forall<a> (a) -> exn canvasRenderingContext2d
{ inline "(#1.toString()==='[object CanvasRenderingContext2D]'?#1:std_core.error('toCanvasRenderingContext2d: cast failed'))" }


// CanvasRenderingContext2D implements CanvasRenderingContext2D (supplemental)
inline extern canvas : (this: canvasRenderingContext2d) -> dom htmlCanvasElement
{ inline "#1.canvas" }
inline extern save : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.save()" }

inline extern restore : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.restore()" }

inline extern scale : (this: canvasRenderingContext2d, x: float64, y: float64) -> dom ()
{ inline "#1.scale(#2, #3)" }

inline extern rotate : (this: canvasRenderingContext2d, angle: float64) -> dom ()
{ inline "#1.rotate(#2)" }

inline extern translate : (this: canvasRenderingContext2d, x: float64, y: float64) -> dom ()
{ inline "#1.translate(#2, #3)" }

inline extern transform : (this: canvasRenderingContext2d, a: float64, b: float64, c: float64, d: float64, e: float64, f: float64) -> dom ()
{ inline "#1.transform(#2, #3, #4, #5, #6, #7)" }

inline extern setTransform : (this: canvasRenderingContext2d, a: float64, b: float64, c: float64, d: float64, e: float64, f: float64) -> dom ()
{ inline "#1.setTransform(#2, #3, #4, #5, #6, #7)" }

inline extern globalAlpha : (this: canvasRenderingContext2d) -> dom float64
{ inline "#1.globalAlpha" }
inline extern globalAlpha : (this: canvasRenderingContext2d, assigned: float64) -> dom ()
{ inline "(#1.globalAlpha = #2)" }
inline extern globalCompositeOperation : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.globalCompositeOperation" }
inline extern globalCompositeOperation : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.globalCompositeOperation = #2)" }
inline extern strokeStyle : (this: canvasRenderingContext2d) -> dom any /* anyGetter */
{ inline "#1.strokeStyle" }
inline extern strokeStyle : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.strokeStyle = #2)" }
inline extern strokeStyle : (this: canvasRenderingContext2d, assigned: canvasGradient) -> dom ()
{ inline "(#1.strokeStyle = #2)" }
inline extern strokeStyle : (this: canvasRenderingContext2d, assigned: canvasPattern) -> dom ()
{ inline "(#1.strokeStyle = #2)" }

inline extern fillStyle : (this: canvasRenderingContext2d) -> dom any /* anyGetter */
{ inline "#1.fillStyle" }
inline extern fillStyle : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.fillStyle = #2)" }
inline extern fillStyle : (this: canvasRenderingContext2d, assigned: canvasGradient) -> dom ()
{ inline "(#1.fillStyle = #2)" }
inline extern fillStyle : (this: canvasRenderingContext2d, assigned: canvasPattern) -> dom ()
{ inline "(#1.fillStyle = #2)" }

inline extern createLinearGradient : (this: canvasRenderingContext2d, x0: float64, y0: float64, x1: float64, y1: float64) -> dom canvasGradient
{ inline "#1.createLinearGradient(#2, #3, #4, #5)" }

inline extern createRadialGradient : (this: canvasRenderingContext2d, x0: float64, y0: float64, r0: float64, x1: float64, y1: float64, r1: float64) -> dom canvasGradient
{ inline "#1.createRadialGradient(#2, #3, #4, #5, #6, #7)" }

inline extern createPattern : (this: canvasRenderingContext2d, image: htmlImageElement, repetition: string) -> dom canvasPattern
{ inline "#1.createPattern(#2, #3)" }

inline extern createPattern : (this: canvasRenderingContext2d, image: htmlCanvasElement, repetition: string) -> dom canvasPattern
{ inline "#1.createPattern(#2, #3)" }

inline extern createPattern : (this: canvasRenderingContext2d, image: htmlVideoElement, repetition: string) -> dom canvasPattern
{ inline "#1.createPattern(#2, #3)" }

inline extern lineWidth : (this: canvasRenderingContext2d) -> dom float64
{ inline "#1.lineWidth" }
inline extern lineWidth : (this: canvasRenderingContext2d, assigned: float64) -> dom ()
{ inline "(#1.lineWidth = #2)" }
inline extern lineCap : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.lineCap" }
inline extern lineCap : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.lineCap = #2)" }
inline extern lineJoin : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.lineJoin" }
inline extern lineJoin : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.lineJoin = #2)" }
inline extern miterLimit : (this: canvasRenderingContext2d) -> dom float64
{ inline "#1.miterLimit" }
inline extern miterLimit : (this: canvasRenderingContext2d, assigned: float64) -> dom ()
{ inline "(#1.miterLimit = #2)" }
inline extern shadowOffsetX : (this: canvasRenderingContext2d) -> dom float64
{ inline "#1.shadowOffsetX" }
inline extern shadowOffsetX : (this: canvasRenderingContext2d, assigned: float64) -> dom ()
{ inline "(#1.shadowOffsetX = #2)" }
inline extern shadowOffsetY : (this: canvasRenderingContext2d) -> dom float64
{ inline "#1.shadowOffsetY" }
inline extern shadowOffsetY : (this: canvasRenderingContext2d, assigned: float64) -> dom ()
{ inline "(#1.shadowOffsetY = #2)" }
inline extern shadowBlur : (this: canvasRenderingContext2d) -> dom float64
{ inline "#1.shadowBlur" }
inline extern shadowBlur : (this: canvasRenderingContext2d, assigned: float64) -> dom ()
{ inline "(#1.shadowBlur = #2)" }
inline extern shadowColor : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.shadowColor" }
inline extern shadowColor : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.shadowColor = #2)" }
inline extern clearRect : (this: canvasRenderingContext2d, x: float64, y: float64, w: float64, h: float64) -> dom ()
{ inline "#1.clearRect(#2, #3, #4, #5)" }

inline extern fillRect : (this: canvasRenderingContext2d, x: float64, y: float64, w: float64, h: float64) -> dom ()
{ inline "#1.fillRect(#2, #3, #4, #5)" }

inline extern strokeRect : (this: canvasRenderingContext2d, x: float64, y: float64, w: float64, h: float64) -> dom ()
{ inline "#1.strokeRect(#2, #3, #4, #5)" }

inline extern beginPath : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.beginPath()" }

inline extern closePath : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.closePath()" }

inline extern moveTo : (this: canvasRenderingContext2d, x: float64, y: float64) -> dom ()
{ inline "#1.moveTo(#2, #3)" }

inline extern lineTo : (this: canvasRenderingContext2d, x: float64, y: float64) -> dom ()
{ inline "#1.lineTo(#2, #3)" }

inline extern quadraticCurveTo : (this: canvasRenderingContext2d, cpx: float64, cpy: float64, x: float64, y: float64) -> dom ()
{ inline "#1.quadraticCurveTo(#2, #3, #4, #5)" }

inline extern bezierCurveTo : (this: canvasRenderingContext2d, cp1x: float64, cp1y: float64, cp2x: float64, cp2y: float64, x: float64, y: float64) -> dom ()
{ inline "#1.bezierCurveTo(#2, #3, #4, #5, #6, #7)" }

inline extern arcTo : (this: canvasRenderingContext2d, x1: float64, y1: float64, x2: float64, y2: float64, radius: float64) -> dom ()
{ inline "#1.arcTo(#2, #3, #4, #5, #6)" }

inline extern rect : (this: canvasRenderingContext2d, x: float64, y: float64, w: float64, h: float64) -> dom ()
{ inline "#1.rect(#2, #3, #4, #5)" }

inline extern arc : (this: canvasRenderingContext2d, x: float64, y: float64, radius: float64, startAngle: float64, endAngle: float64) -> dom ()
{ inline "#1.arc(#2, #3, #4, #5, #6)" }

inline extern arc : (this: canvasRenderingContext2d, x: float64, y: float64, radius: float64, startAngle: float64, endAngle: float64, anticlockwise: bool) -> dom ()
{ inline "#1.arc(#2, #3, #4, #5, #6, #7)" }

inline extern fill : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.fill()" }

inline extern stroke : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.stroke()" }

inline extern drawSystemFocusRing : (this: canvasRenderingContext2d, element: element) -> dom ()
{ inline "#1.drawSystemFocusRing(#2)" }

inline extern drawCustomFocusRing : (this: canvasRenderingContext2d, element: element) -> dom bool
{ inline "#1.drawCustomFocusRing(#2)" }

inline extern scrollPathIntoView : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.scrollPathIntoView()" }

inline extern clip : (this: canvasRenderingContext2d) -> dom ()
{ inline "#1.clip()" }

inline extern isPointInPath : (this: canvasRenderingContext2d, x: float64, y: float64) -> dom bool
{ inline "#1.isPointInPath(#2, #3)" }

inline extern font : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.font" }
inline extern font : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.font = #2)" }
inline extern textAlign : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.textAlign" }
inline extern textAlign : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.textAlign = #2)" }
inline extern textBaseline : (this: canvasRenderingContext2d) -> dom string
{ inline "#1.textBaseline" }
inline extern textBaseline : (this: canvasRenderingContext2d, assigned: string) -> dom ()
{ inline "(#1.textBaseline = #2)" }
inline extern fillText : (this: canvasRenderingContext2d, text: string, x: float64, y: float64) -> dom ()
{ inline "#1.fillText(#2, #3, #4)" }

inline extern fillText : (this: canvasRenderingContext2d, text: string, x: float64, y: float64, maxWidth: float64) -> dom ()
{ inline "#1.fillText(#2, #3, #4, #5)" }

inline extern strokeText : (this: canvasRenderingContext2d, text: string, x: float64, y: float64) -> dom ()
{ inline "#1.strokeText(#2, #3, #4)" }

inline extern strokeText : (this: canvasRenderingContext2d, text: string, x: float64, y: float64, maxWidth: float64) -> dom ()
{ inline "#1.strokeText(#2, #3, #4, #5)" }

inline extern measureText : (this: canvasRenderingContext2d, text: string) -> dom textMetrics
{ inline "#1.measureText(#2)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlImageElement, dx: float64, dy: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlImageElement, dx: float64, dy: float64, dw: float64, dh: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4, #5, #6)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlImageElement, sx: float64, sy: float64, sw: float64, sh: float64, dx: float64, dy: float64, dw: float64, dh: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4, #5, #6, #7, #8, #9, #10)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlCanvasElement, dx: float64, dy: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlCanvasElement, dx: float64, dy: float64, dw: float64, dh: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4, #5, #6)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlCanvasElement, sx: float64, sy: float64, sw: float64, sh: float64, dx: float64, dy: float64, dw: float64, dh: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4, #5, #6, #7, #8, #9, #10)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlVideoElement, dx: float64, dy: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlVideoElement, dx: float64, dy: float64, dw: float64, dh: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4, #5, #6)" }

inline extern drawImage : (this: canvasRenderingContext2d, image: htmlVideoElement, sx: float64, sy: float64, sw: float64, sh: float64, dx: float64, dy: float64, dw: float64, dh: float64) -> dom ()
{ inline "#1.drawImage(#2, #3, #4, #5, #6, #7, #8, #9, #10)" }

inline extern createImageData : (this: canvasRenderingContext2d, sw: float64, sh: float64) -> dom imageData
{ inline "#1.createImageData(#2, #3)" }

inline extern createImageData : (this: canvasRenderingContext2d, imagedata: imageData) -> dom imageData
{ inline "#1.createImageData(#2)" }

inline extern getImageData : (this: canvasRenderingContext2d, sx: float64, sy: float64, sw: float64, sh: float64) -> dom imageData
{ inline "#1.getImageData(#2, #3, #4, #5)" }

inline extern putImageData : (this: canvasRenderingContext2d, imagedata: imageData, dx: float64, dy: float64) -> dom ()
{ inline "#1.putImageData(#2, #3, #4)" }

inline extern putImageData : (this: canvasRenderingContext2d, imagedata: imageData, dx: float64, dy: float64, dirtyX: float64, dirtyY: float64, dirtyWidth: float64, dirtyHeight: float64) -> dom ()
{ inline "#1.putImageData(#2, #3, #4, #5, #6, #7, #8)" }

