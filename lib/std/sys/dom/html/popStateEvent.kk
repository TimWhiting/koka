pub module std/sys/dom/html/popStateEvent

// Interface PopStateEvent (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybePopStateEvent  : forall<a> (a) -> maybe<popStateEvent>
{ inline "(#1.toString()==='[object PopStateEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toPopStateEvent : forall<a> (a) -> exn popStateEvent
{ inline "(#1.toString()==='[object PopStateEvent]'?#1:std_core.error('toPopStateEvent: cast failed'))" }


// PopStateEvent implements PopStateEvent (supplemental)
inline extern state : (this: popStateEvent) -> dom any /* anyGetter */
{ inline "#1.state" }
inline extern initPopStateEvent : forall<a> (this: popStateEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, stateArg: a /* anyArg */) -> dom ()
{ inline "#1.initPopStateEvent(#2, #3, #4, #5)" }

// PopStateEvent extends Event
inline extern event : (popStateEvent) -> event // upcasting to extended type
{ inline "#1" }
// PopStateEvent implements in extension Event (overloading)
inline extern type_ : (this: popStateEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: popStateEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: popStateEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: popStateEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: popStateEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: popStateEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: popStateEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: popStateEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: popStateEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: popStateEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: popStateEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: popStateEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: popStateEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

