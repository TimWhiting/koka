pub module std/sys/dom/html/htmlTableRowElement

// Interface HTMLTableRowElement (generated by esidl 0.2.0).

import std/sys/dom/types

inline extern createHtmlTableRowElement : (document: document) -> dom htmlTableRowElement
{ inline "#1.createElement('tr')" }

/* safe and unsafe conversion from all types including `any */
inline extern maybeHtmlTableRowElement : forall<a> (a) -> maybe<htmlTableRowElement>
{ inline "(#1.tagName==='TR'?std_core.Just(#1):std_core.Nothing)" }
inline extern toHtmlTableRowElement : forall<a> (a) -> exn htmlTableRowElement
{ inline "(#1.tagName==='TR'?#1:std_core.error('toHtmlTableRowElement: cast failed'))" }


// HTMLTableRowElement implements HTMLTableRowElement (supplemental)
inline extern rowIndex : (this: htmlTableRowElement) -> dom int32
{ inline "#1.rowIndex" }
inline extern sectionRowIndex : (this: htmlTableRowElement) -> dom int32
{ inline "#1.sectionRowIndex" }
inline extern cells : (this: htmlTableRowElement) -> dom htmlCollection
{ inline "#1.cells" }
inline extern insertCell : (this: htmlTableRowElement) -> dom htmlElement
{ inline "#1.insertCell()" }

inline extern insertCell : (this: htmlTableRowElement, index: int32) -> dom htmlElement
{ inline "#1.insertCell(#2)" }

inline extern deleteCell : (this: htmlTableRowElement, index: int32) -> dom ()
{ inline "#1.deleteCell(#2)" }

// HTMLTableRowElement implements HTMLTableRowElement-32 (supplemental)
inline extern align : (this: htmlTableRowElement) -> dom string
{ inline "#1.align" }
inline extern align : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.align = #2)" }
inline extern bgColor : (this: htmlTableRowElement) -> dom string
{ inline "#1.bgColor" }
inline extern bgColor : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.bgColor = #2)" }
inline extern ch : (this: htmlTableRowElement) -> dom string
{ inline "#1.ch" }
inline extern ch : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.ch = #2)" }
inline extern chOff : (this: htmlTableRowElement) -> dom string
{ inline "#1.chOff" }
inline extern chOff : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.chOff = #2)" }
inline extern vAlign : (this: htmlTableRowElement) -> dom string
{ inline "#1.vAlign" }
inline extern vAlign : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.vAlign = #2)" }
// HTMLTableRowElement extends HTMLElement
inline extern htmlElement : (htmlTableRowElement) -> htmlElement // upcasting to extended type
{ inline "#1" }
// HTMLTableRowElement implements in extension HTMLElement (overloading)
inline extern getElementsByClassName : (this: htmlTableRowElement, classNames: string) -> dom nodeList
{ inline "#1.getElementsByClassName(#2)" }

inline extern innerHtml : (this: htmlTableRowElement) -> dom string
{ inline "#1.innerHTML" }
inline extern innerHtml : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.innerHTML = #2)" }
inline extern outerHtml : (this: htmlTableRowElement) -> dom string
{ inline "#1.outerHTML" }
inline extern outerHtml : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.outerHTML = #2)" }
inline extern insertAdjacentHtml : (this: htmlTableRowElement, position: string, text: string) -> dom ()
{ inline "#1.insertAdjacentHTML(#2, #3)" }

inline extern id : (this: htmlTableRowElement) -> dom string
{ inline "#1.id" }
inline extern id : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.id = #2)" }
inline extern title : (this: htmlTableRowElement) -> dom string
{ inline "#1.title" }
inline extern title : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.title = #2)" }
inline extern lang : (this: htmlTableRowElement) -> dom string
{ inline "#1.lang" }
inline extern lang : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.lang = #2)" }
inline extern dir : (this: htmlTableRowElement) -> dom string
{ inline "#1.dir" }
inline extern dir : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.dir = #2)" }
inline extern className : (this: htmlTableRowElement) -> dom string
{ inline "#1.className" }
inline extern className : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.className = #2)" }
inline extern classList : (this: htmlTableRowElement) -> dom domTokenList
{ inline "#1.classList" }
inline extern dataset : (this: htmlTableRowElement) -> dom domStringMap
{ inline "#1.dataset" }
inline extern itemScope : (this: htmlTableRowElement) -> dom bool
{ inline "#1.itemScope" }
inline extern itemScope : (this: htmlTableRowElement, assigned: bool) -> dom ()
{ inline "(#1.itemScope = #2)" }
inline extern itemType : (this: htmlTableRowElement) -> dom string
{ inline "#1.itemType" }
inline extern itemType : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.itemType = #2)" }
inline extern itemId : (this: htmlTableRowElement) -> dom string
{ inline "#1.itemId" }
inline extern itemId : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.itemId = #2)" }
inline extern itemRef : (this: htmlTableRowElement) -> dom domSettableTokenList
{ inline "#1.itemRef" }
inline extern itemRef : (this: htmlTableRowElement, assigned: domSettableTokenList) -> dom ()
{ inline "(#1.itemRef = #2)" }
inline extern itemProp : (this: htmlTableRowElement) -> dom domSettableTokenList
{ inline "#1.itemProp" }
inline extern itemProp : (this: htmlTableRowElement, assigned: domSettableTokenList) -> dom ()
{ inline "(#1.itemProp = #2)" }
inline extern properties : (this: htmlTableRowElement) -> dom htmlPropertiesCollection
{ inline "#1.properties" }


inline extern hidden : (this: htmlTableRowElement) -> dom bool
{ inline "#1.hidden" }
inline extern hidden : (this: htmlTableRowElement, assigned: bool) -> dom ()
{ inline "(#1.hidden = #2)" }
inline extern click : (this: htmlTableRowElement) -> dom ()
{ inline "#1.click()" }

inline extern tabIndex : (this: htmlTableRowElement) -> dom int32
{ inline "#1.tabIndex" }
inline extern tabIndex : (this: htmlTableRowElement, assigned: int32) -> dom ()
{ inline "(#1.tabIndex = #2)" }
inline extern focus : (this: htmlTableRowElement) -> dom ()
{ inline "#1.focus()" }

inline extern blur : (this: htmlTableRowElement) -> dom ()
{ inline "#1.blur()" }

inline extern accessKey : (this: htmlTableRowElement) -> dom string
{ inline "#1.accessKey" }
inline extern accessKey : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.accessKey = #2)" }
inline extern accessKeyLabel : (this: htmlTableRowElement) -> dom string
{ inline "#1.accessKeyLabel" }
inline extern draggable : (this: htmlTableRowElement) -> dom bool
{ inline "#1.draggable" }
inline extern draggable : (this: htmlTableRowElement, assigned: bool) -> dom ()
{ inline "(#1.draggable = #2)" }
inline extern dropzone : (this: htmlTableRowElement) -> dom domSettableTokenList
{ inline "#1.dropzone" }
inline extern dropzone : (this: htmlTableRowElement, assigned: domSettableTokenList) -> dom ()
{ inline "(#1.dropzone = #2)" }
inline extern contentEditable : (this: htmlTableRowElement) -> dom string
{ inline "#1.contentEditable" }
inline extern contentEditable : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.contentEditable = #2)" }
inline extern isContentEditable : (this: htmlTableRowElement) -> dom bool
{ inline "#1.isContentEditable" }
inline extern contextMenu : (this: htmlTableRowElement) -> dom htmlMenuElement
{ inline "#1.contextMenu" }
inline extern contextMenu : (this: htmlTableRowElement, assigned: htmlMenuElement) -> dom ()
{ inline "(#1.contextMenu = #2)" }
inline extern spellcheck : (this: htmlTableRowElement) -> dom bool
{ inline "#1.spellcheck" }
inline extern spellcheck : (this: htmlTableRowElement, assigned: bool) -> dom ()
{ inline "(#1.spellcheck = #2)" }
inline extern commandType : (this: htmlTableRowElement) -> dom string
{ inline "#1.commandType" }
inline extern label : (this: htmlTableRowElement) -> dom string
{ inline "#1.label" }
inline extern icon : (this: htmlTableRowElement) -> dom string
{ inline "#1.icon" }
inline extern disabled : (this: htmlTableRowElement) -> dom bool
{ inline "#1.disabled" }
inline extern checked : (this: htmlTableRowElement) -> dom bool
{ inline "#1.checked" }
inline extern style : (this: htmlTableRowElement) -> dom cssStyleDeclaration
{ inline "#1.style" }
inline extern onabort : (this: htmlTableRowElement) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
inline extern onabort : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
inline extern onabort : forall<e> (this: htmlTableRowElement, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
inline extern onblur : (this: htmlTableRowElement) -> dom (focusEvent -> dom ())
{ inline "#1.onblur" }
inline extern onblur : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onblur = #2)" }
inline extern onblur : forall<e> (this: htmlTableRowElement, assigned: (focusEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onblur = #2)" }
inline extern oncanplay : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.oncanplay" }
inline extern oncanplay : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplay = #2)" }
inline extern oncanplay : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplay = #2)" }
inline extern oncanplaythrough : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.oncanplaythrough" }
inline extern oncanplaythrough : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplaythrough = #2)" }
inline extern oncanplaythrough : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplaythrough = #2)" }
inline extern onchange : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onchange" }
inline extern onchange : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchange = #2)" }
inline extern onchange : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchange = #2)" }
inline extern onclick : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.onclick" }
inline extern onclick : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onclick = #2)" }
inline extern onclick : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onclick = #2)" }
inline extern oncontextmenu : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.oncontextmenu" }
inline extern oncontextmenu : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncontextmenu = #2)" }
inline extern oncontextmenu : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncontextmenu = #2)" }
inline extern oncuechange : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.oncuechange" }
inline extern oncuechange : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
inline extern oncuechange : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
inline extern ondblclick : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.ondblclick" }
inline extern ondblclick : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondblclick = #2)" }
inline extern ondblclick : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondblclick = #2)" }
inline extern ondrag : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondrag" }
inline extern ondrag : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrag = #2)" }
inline extern ondrag : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrag = #2)" }
inline extern ondragend : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondragend" }
inline extern ondragend : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragend = #2)" }
inline extern ondragend : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragend = #2)" }
inline extern ondragenter : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondragenter" }
inline extern ondragenter : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragenter = #2)" }
inline extern ondragenter : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragenter = #2)" }
inline extern ondragleave : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondragleave" }
inline extern ondragleave : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragleave = #2)" }
inline extern ondragleave : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragleave = #2)" }
inline extern ondragover : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondragover" }
inline extern ondragover : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragover = #2)" }
inline extern ondragover : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragover = #2)" }
inline extern ondragstart : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondragstart" }
inline extern ondragstart : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragstart = #2)" }
inline extern ondragstart : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragstart = #2)" }
inline extern ondrop : (this: htmlTableRowElement) -> dom (dragEvent -> dom ())
{ inline "#1.ondrop" }
inline extern ondrop : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrop = #2)" }
inline extern ondrop : forall<e> (this: htmlTableRowElement, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrop = #2)" }
inline extern ondurationchange : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.ondurationchange" }
inline extern ondurationchange : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondurationchange = #2)" }
inline extern ondurationchange : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondurationchange = #2)" }
inline extern onemptied : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onemptied" }
inline extern onemptied : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onemptied = #2)" }
inline extern onemptied : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onemptied = #2)" }
inline extern onended : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onended" }
inline extern onended : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
inline extern onended : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
inline extern onerror : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onerror" }
inline extern onerror : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onerror : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onfocus : (this: htmlTableRowElement) -> dom (focusEvent -> dom ())
{ inline "#1.onfocus" }
inline extern onfocus : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onfocus = #2)" }
inline extern onfocus : forall<e> (this: htmlTableRowElement, assigned: (focusEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onfocus = #2)" }
inline extern oninput : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.oninput" }
inline extern oninput : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninput = #2)" }
inline extern oninput : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninput = #2)" }
inline extern oninvalid : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.oninvalid" }
inline extern oninvalid : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninvalid = #2)" }
inline extern oninvalid : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninvalid = #2)" }
inline extern onkeydown : (this: htmlTableRowElement) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeydown" }
inline extern onkeydown : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeydown = #2)" }
inline extern onkeydown : forall<e> (this: htmlTableRowElement, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeydown = #2)" }
inline extern onkeypress : (this: htmlTableRowElement) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeypress" }
inline extern onkeypress : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeypress = #2)" }
inline extern onkeypress : forall<e> (this: htmlTableRowElement, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeypress = #2)" }
inline extern onkeyup : (this: htmlTableRowElement) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeyup" }
inline extern onkeyup : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeyup = #2)" }
inline extern onkeyup : forall<e> (this: htmlTableRowElement, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeyup = #2)" }
inline extern onload : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onload" }
inline extern onload : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
inline extern onload : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
inline extern onloadeddata : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onloadeddata" }
inline extern onloadeddata : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadeddata = #2)" }
inline extern onloadeddata : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadeddata = #2)" }
inline extern onloadedmetadata : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onloadedmetadata" }
inline extern onloadedmetadata : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadedmetadata = #2)" }
inline extern onloadedmetadata : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadedmetadata = #2)" }
inline extern onloadstart : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
inline extern onloadstart : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
inline extern onloadstart : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
inline extern onmousedown : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.onmousedown" }
inline extern onmousedown : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousedown = #2)" }
inline extern onmousedown : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousedown = #2)" }
inline extern onmousemove : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.onmousemove" }
inline extern onmousemove : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousemove = #2)" }
inline extern onmousemove : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousemove = #2)" }
inline extern onmouseout : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseout" }
inline extern onmouseout : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseout = #2)" }
inline extern onmouseout : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseout = #2)" }
inline extern onmouseover : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseover" }
inline extern onmouseover : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseover = #2)" }
inline extern onmouseover : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseover = #2)" }
inline extern onmouseup : (this: htmlTableRowElement) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseup" }
inline extern onmouseup : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseup = #2)" }
inline extern onmouseup : forall<e> (this: htmlTableRowElement, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseup = #2)" }
inline extern onmousewheel : (this: htmlTableRowElement) -> dom (wheelEvent -> dom ())
{ inline "#1.onmousewheel" }
inline extern onmousewheel : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousewheel = #2)" }
inline extern onmousewheel : forall<e> (this: htmlTableRowElement, assigned: (wheelEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousewheel = #2)" }
inline extern onpause : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onpause" }
inline extern onpause : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onpause = #2)" }
inline extern onpause : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onpause = #2)" }
inline extern onplay : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onplay" }
inline extern onplay : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplay = #2)" }
inline extern onplay : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplay = #2)" }
inline extern onplaying : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onplaying" }
inline extern onplaying : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplaying = #2)" }
inline extern onplaying : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplaying = #2)" }
inline extern onprogress : (this: htmlTableRowElement) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
inline extern onprogress : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onprogress : forall<e> (this: htmlTableRowElement, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onratechange : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onratechange" }
inline extern onratechange : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onratechange = #2)" }
inline extern onratechange : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onratechange = #2)" }
inline extern onreadystatechange : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onreadystatechange" }
inline extern onreadystatechange : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
inline extern onreadystatechange : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
inline extern onreset : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onreset" }
inline extern onreset : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreset = #2)" }
inline extern onreset : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreset = #2)" }
inline extern onscroll : (this: htmlTableRowElement) -> dom (uiEvent -> dom ())
{ inline "#1.onscroll" }
inline extern onscroll : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onscroll = #2)" }
inline extern onscroll : forall<e> (this: htmlTableRowElement, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onscroll = #2)" }
inline extern onseeked : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onseeked" }
inline extern onseeked : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeked = #2)" }
inline extern onseeked : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeked = #2)" }
inline extern onseeking : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onseeking" }
inline extern onseeking : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeking = #2)" }
inline extern onseeking : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeking = #2)" }
inline extern onselect : (this: htmlTableRowElement) -> dom (uiEvent -> dom ())
{ inline "#1.onselect" }
inline extern onselect : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onselect = #2)" }
inline extern onselect : forall<e> (this: htmlTableRowElement, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onselect = #2)" }
inline extern onshow : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onshow" }
inline extern onshow : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onshow = #2)" }
inline extern onshow : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onshow = #2)" }
inline extern onstalled : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onstalled" }
inline extern onstalled : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onstalled = #2)" }
inline extern onstalled : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onstalled = #2)" }
inline extern onsubmit : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onsubmit" }
inline extern onsubmit : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsubmit = #2)" }
inline extern onsubmit : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsubmit = #2)" }
inline extern onsuspend : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onsuspend" }
inline extern onsuspend : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsuspend = #2)" }
inline extern onsuspend : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsuspend = #2)" }
inline extern ontimeupdate : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.ontimeupdate" }
inline extern ontimeupdate : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeupdate = #2)" }
inline extern ontimeupdate : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeupdate = #2)" }
inline extern onvolumechange : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onvolumechange" }
inline extern onvolumechange : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onvolumechange = #2)" }
inline extern onvolumechange : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onvolumechange = #2)" }
inline extern onwaiting : (this: htmlTableRowElement) -> dom (event -> dom ())
{ inline "#1.onwaiting" }
inline extern onwaiting : forall<e> (this: htmlTableRowElement, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onwaiting = #2)" }
inline extern onwaiting : forall<e> (this: htmlTableRowElement, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onwaiting = #2)" }
// HTMLTableRowElement implements in extension HTMLElement (overloading)
inline extern offsetParent : (this: htmlTableRowElement) -> dom element
{ inline "#1.offsetParent" }
inline extern offsetTop : (this: htmlTableRowElement) -> dom int32
{ inline "#1.offsetTop" }
inline extern offsetLeft : (this: htmlTableRowElement) -> dom int32
{ inline "#1.offsetLeft" }
inline extern offsetWidth : (this: htmlTableRowElement) -> dom int32
{ inline "#1.offsetWidth" }
inline extern offsetHeight : (this: htmlTableRowElement) -> dom int32
{ inline "#1.offsetHeight" }
// HTMLTableRowElement extends Element
inline extern element : (htmlTableRowElement) -> element // upcasting to extended type
{ inline "#1" }
// HTMLTableRowElement implements in extension Element (overloading)
inline extern namespaceUri : (this: htmlTableRowElement) -> dom string
{ inline "#1.namespaceURI" }
inline extern prefix_ : (this: htmlTableRowElement) -> dom string
{ inline "#1.prefix" }
inline extern localName : (this: htmlTableRowElement) -> dom string
{ inline "#1.localName" }
inline extern tagName : (this: htmlTableRowElement) -> dom string
{ inline "#1.tagName" }
inline extern attributes : (this: htmlTableRowElement) -> dom list<attr>
{ inline "std_core.alert('attributes: not implemented')" }

inline extern getAttribute : (this: htmlTableRowElement, qualifiedName: string) -> dom string
{ inline "#1.getAttribute(#2)" }

inline extern getAttributeNs : (this: htmlTableRowElement, namespace: string, localName: string) -> dom string
{ inline "#1.getAttributeNS(#2, #3)" }

inline extern setAttribute : (this: htmlTableRowElement, qualifiedName: string, value: string) -> dom ()
{ inline "#1.setAttribute(#2, #3)" }

inline extern setAttributeNs : (this: htmlTableRowElement, namespace: string, qualifiedName: string, value: string) -> dom ()
{ inline "#1.setAttributeNS(#2, #3, #4)" }

inline extern removeAttribute : (this: htmlTableRowElement, qualifiedName: string) -> dom ()
{ inline "#1.removeAttribute(#2)" }

inline extern removeAttributeNs : (this: htmlTableRowElement, namespace: string, localName: string) -> dom ()
{ inline "#1.removeAttributeNS(#2, #3)" }

inline extern hasAttribute : (this: htmlTableRowElement, qualifiedName: string) -> dom bool
{ inline "#1.hasAttribute(#2)" }

inline extern hasAttributeNs : (this: htmlTableRowElement, namespace: string, localName: string) -> dom bool
{ inline "#1.hasAttributeNS(#2, #3)" }

inline extern getElementsByTagName : (this: htmlTableRowElement, qualifiedName: string) -> dom nodeList
{ inline "#1.getElementsByTagName(#2)" }

inline extern getElementsByTagNameNs : (this: htmlTableRowElement, namespace: string, localName: string) -> dom nodeList
{ inline "#1.getElementsByTagNameNS(#2, #3)" }

inline extern getElementsByClassName : (this: htmlTableRowElement, classNames: string) -> dom nodeList
{ inline "#1.getElementsByClassName(#2)" }

inline extern children : (this: htmlTableRowElement) -> dom htmlCollection
{ inline "#1.children" }
inline extern firstElementChild : (this: htmlTableRowElement) -> dom element
{ inline "#1.firstElementChild" }
inline extern lastElementChild : (this: htmlTableRowElement) -> dom element
{ inline "#1.lastElementChild" }
inline extern previousElementSibling : (this: htmlTableRowElement) -> dom element
{ inline "#1.previousElementSibling" }
inline extern nextElementSibling : (this: htmlTableRowElement) -> dom element
{ inline "#1.nextElementSibling" }
inline extern childElementCount : (this: htmlTableRowElement) -> dom uint32
{ inline "#1.childElementCount" }
// HTMLTableRowElement implements in extension Element (overloading)
inline extern getClientRects : (this: htmlTableRowElement) -> dom clientRectList
{ inline "#1.getClientRects()" }

inline extern getBoundingClientRect : (this: htmlTableRowElement) -> dom clientRect
{ inline "#1.getBoundingClientRect()" }

inline extern scrollIntoView : (this: htmlTableRowElement) -> dom ()
{ inline "#1.scrollIntoView()" }

inline extern scrollIntoView : (this: htmlTableRowElement, top: bool) -> dom ()
{ inline "#1.scrollIntoView(#2)" }

inline extern scrollTop : (this: htmlTableRowElement) -> dom int32
{ inline "#1.scrollTop" }
inline extern scrollTop : (this: htmlTableRowElement, assigned: int32) -> dom ()
{ inline "(#1.scrollTop = #2)" }
inline extern scrollLeft : (this: htmlTableRowElement) -> dom int32
{ inline "#1.scrollLeft" }
inline extern scrollLeft : (this: htmlTableRowElement, assigned: int32) -> dom ()
{ inline "(#1.scrollLeft = #2)" }
inline extern scrollWidth : (this: htmlTableRowElement) -> dom int32
{ inline "#1.scrollWidth" }
inline extern scrollHeight : (this: htmlTableRowElement) -> dom int32
{ inline "#1.scrollHeight" }
inline extern clientTop : (this: htmlTableRowElement) -> dom int32
{ inline "#1.clientTop" }
inline extern clientLeft : (this: htmlTableRowElement) -> dom int32
{ inline "#1.clientLeft" }
inline extern clientWidth : (this: htmlTableRowElement) -> dom int32
{ inline "#1.clientWidth" }
inline extern clientHeight : (this: htmlTableRowElement) -> dom int32
{ inline "#1.clientHeight" }
// HTMLTableRowElement implements in extension NodeSelector (overloading)
inline extern querySelector : (this: htmlTableRowElement, selectors: string) -> dom element
{ inline "#1.querySelector(#2)" }

inline extern querySelectorAll : (this: htmlTableRowElement, selectors: string) -> dom nodeList
{ inline "#1.querySelectorAll(#2)" }

// HTMLTableRowElement extends Node
inline extern node : (htmlTableRowElement) -> node // upcasting to extended type
{ inline "#1" }
// HTMLTableRowElement implements in extension Node (overloading)
inline extern nodeType : (this: htmlTableRowElement) -> dom nodeType
{ inline "#1.nodeType" }
inline extern nodeName : (this: htmlTableRowElement) -> dom string
{ inline "#1.nodeName" }
inline extern baseUri : (this: htmlTableRowElement) -> dom string
{ inline "#1.baseURI" }
inline extern ownerDocument : (this: htmlTableRowElement) -> dom document
{ inline "#1.ownerDocument" }
inline extern parentNode : (this: htmlTableRowElement) -> dom node
{ inline "#1.parentNode" }
inline extern parentElement : (this: htmlTableRowElement) -> dom element
{ inline "#1.parentElement" }
inline extern hasChildNodes : (this: htmlTableRowElement) -> dom bool
{ inline "#1.hasChildNodes()" }

inline extern childNodes : (this: htmlTableRowElement) -> dom nodeList
{ inline "#1.childNodes" }
inline extern firstChild : (this: htmlTableRowElement) -> dom node
{ inline "#1.firstChild" }
inline extern lastChild : (this: htmlTableRowElement) -> dom node
{ inline "#1.lastChild" }
inline extern previousSibling : (this: htmlTableRowElement) -> dom node
{ inline "#1.previousSibling" }
inline extern nextSibling : (this: htmlTableRowElement) -> dom node
{ inline "#1.nextSibling" }
inline extern compareDocumentPosition : (this: htmlTableRowElement, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

inline extern nodeValue : (this: htmlTableRowElement) -> dom string
{ inline "#1.nodeValue" }
inline extern nodeValue : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
inline extern textContent : (this: htmlTableRowElement) -> dom string
{ inline "#1.textContent" }
inline extern textContent : (this: htmlTableRowElement, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
inline extern insertBefore : (this: htmlTableRowElement, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

inline extern replaceChild : (this: htmlTableRowElement, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

inline extern removeChild : (this: htmlTableRowElement, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

inline extern appendChild : (this: htmlTableRowElement, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

inline extern cloneNode : (this: htmlTableRowElement, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

inline extern isSameNode : (this: htmlTableRowElement, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

inline extern isEqualNode : (this: htmlTableRowElement, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

inline extern lookupPrefix : (this: htmlTableRowElement, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

inline extern lookupNamespaceUri : (this: htmlTableRowElement, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

inline extern isDefaultNamespace : (this: htmlTableRowElement, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// HTMLTableRowElement extends EventTarget
inline extern eventTarget : (htmlTableRowElement) -> eventTarget // upcasting to extended type
{ inline "#1" }
// HTMLTableRowElement implements in extension EventTarget (overloading)
inline extern addEventListener : (this: htmlTableRowElement, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: htmlTableRowElement, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: htmlTableRowElement, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: htmlTableRowElement, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: htmlTableRowElement, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

