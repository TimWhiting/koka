pub module std/sys/dom/html/messageEvent

// Interface MessageEvent (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeMessageEvent  : forall<a> (a) -> maybe<messageEvent>
{ inline "(#1.toString()==='[object MessageEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toMessageEvent : forall<a> (a) -> exn messageEvent
{ inline "(#1.toString()==='[object MessageEvent]'?#1:std_core.error('toMessageEvent: cast failed'))" }


// MessageEvent implements MessageEvent (supplemental)
inline extern data : (this: messageEvent) -> dom any /* anyGetter */
{ inline "#1.data" }
inline extern origin : (this: messageEvent) -> dom string
{ inline "#1.origin" }
inline extern lastEventId : (this: messageEvent) -> dom string
{ inline "#1.lastEventId" }
inline extern source : (this: messageEvent) -> dom windowProxy
{ inline "#1.source" }
inline extern ports : (this: messageEvent) -> dom array
{ inline "#1.ports" }
inline extern initMessageEvent : forall<a> (this: messageEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, dataArg: a /* anyArg */, originArg: string, lastEventIdArg: string, sourceArg: windowProxy, portsArg: seqence) -> dom ()
{ inline "#1.initMessageEvent(#2, #3, #4, #5, #6, #7, #8, #9)" }

// MessageEvent extends Event
inline extern event : (messageEvent) -> event // upcasting to extended type
{ inline "#1" }
// MessageEvent implements in extension Event (overloading)
inline extern type_ : (this: messageEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: messageEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: messageEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: messageEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: messageEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: messageEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: messageEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: messageEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: messageEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: messageEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: messageEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: messageEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: messageEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

