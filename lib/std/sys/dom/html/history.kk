pub module std/sys/dom/html/history

// Interface History (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeHistory  : forall<a> (a) -> maybe<history>
{ inline "(#1.toString()==='[object History]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toHistory : forall<a> (a) -> exn history
{ inline "(#1.toString()==='[object History]'?#1:std_core.error('toHistory: cast failed'))" }


// History implements History (supplemental)
inline extern length : (this: history) -> dom int32
{ inline "#1.length" }
inline extern state : (this: history) -> dom any /* anyGetter */
{ inline "#1.state" }
inline extern go : (this: history) -> dom ()
{ inline "#1.go()" }

inline extern go : (this: history, delta: int32) -> dom ()
{ inline "#1.go(#2)" }

inline extern back : (this: history) -> dom ()
{ inline "#1.back()" }

inline extern forward : (this: history) -> dom ()
{ inline "#1.forward()" }

inline extern pushState : forall<a> (this: history, data: a /* anyArg */, title: string) -> dom ()
{ inline "#1.pushState(#2, #3)" }

inline extern pushState : forall<a> (this: history, data: a /* anyArg */, title: string, url: string) -> dom ()
{ inline "#1.pushState(#2, #3, #4)" }

inline extern replaceState : forall<a> (this: history, data: a /* anyArg */, title: string) -> dom ()
{ inline "#1.replaceState(#2, #3)" }

inline extern replaceState : forall<a> (this: history, data: a /* anyArg */, title: string, url: string) -> dom ()
{ inline "#1.replaceState(#2, #3, #4)" }

