pub module std/sys/dom/eventsource/eventSource

// Interface EventSource (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeEventSource  : forall<a> (a) -> maybe<eventSource>
{ inline "(#1.toString()==='[object EventSource]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toEventSource : forall<a> (a) -> exn eventSource
{ inline "(#1.toString()==='[object EventSource]'?#1:std_core.error('toEventSource: cast failed'))" }


// EventSource implements EventSource (supplemental)
inline extern url : (this: eventSource) -> dom string
{ inline "#1.url" }
inline extern readyState : (this: eventSource) -> dom eventSourceReadyState
{ inline "#1.readyState" }
inline extern onopen : (this: eventSource) -> dom (event -> dom ())
{ inline "#1.onopen" }
inline extern onopen : forall<e> (this: eventSource, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onopen = #2)" }
inline extern onopen : forall<e> (this: eventSource, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onopen = #2)" }
inline extern onmessage : (this: eventSource) -> dom (event -> dom ())
{ inline "#1.onmessage" }
inline extern onmessage : forall<e> (this: eventSource, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmessage = #2)" }
inline extern onmessage : forall<e> (this: eventSource, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmessage = #2)" }
inline extern onerror : (this: eventSource) -> dom (event -> dom ())
{ inline "#1.onerror" }
inline extern onerror : forall<e> (this: eventSource, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onerror : forall<e> (this: eventSource, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern close : (this: eventSource) -> dom ()
{ inline "#1.close()" }

// EventSource extends EventTarget
inline extern eventTarget : (eventSource) -> eventTarget // upcasting to extended type
{ inline "#1" }
// EventSource implements in extension EventTarget (overloading)
inline extern addEventListener : (this: eventSource, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: eventSource, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: eventSource, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: eventSource, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: eventSource, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

