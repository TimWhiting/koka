pub module std/sys/dom/events/progressEvent

// Interface ProgressEvent (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeProgressEvent  : forall<a> (a) -> maybe<progressEvent>
{ inline "(#1.toString()==='[object ProgressEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toProgressEvent : forall<a> (a) -> exn progressEvent
{ inline "(#1.toString()==='[object ProgressEvent]'?#1:std_core.error('toProgressEvent: cast failed'))" }


// ProgressEvent implements ProgressEvent (supplemental)
inline extern lengthComputable : (this: progressEvent) -> dom bool
{ inline "#1.lengthComputable" }
inline extern loaded : (this: progressEvent) -> dom uint32
{ inline "#1.loaded" }
inline extern total : (this: progressEvent) -> dom uint32
{ inline "#1.total" }
inline extern initProgressEvent : (this: progressEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, lengthComputableArg: bool, loadedArg: uint32, totalArg: uint32) -> dom ()
{ inline "#1.initProgressEvent(#2, #3, #4, #5, #6, #7)" }

inline extern initProgressEventNs : (this: progressEvent, namespaceUri: string, typeArg: string, canBubbleArg: bool, cancelableArg: bool, lengthComputableArg: bool, loadedArg: uint32, totalArg: uint32) -> dom ()
{ inline "#1.initProgressEventNS(#2, #3, #4, #5, #6, #7, #8)" }

// ProgressEvent extends Event
inline extern event : (progressEvent) -> event // upcasting to extended type
{ inline "#1" }
// ProgressEvent implements in extension Event (overloading)
inline extern type_ : (this: progressEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: progressEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: progressEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: progressEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: progressEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: progressEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: progressEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: progressEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: progressEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: progressEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: progressEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: progressEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: progressEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

