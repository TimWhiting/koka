pub module std/sys/dom/events/keyboardEvent

// Interface KeyboardEvent (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeKeyboardEvent  : forall<a> (a) -> maybe<keyboardEvent>
{ inline "(#1.toString()==='[object KeyboardEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toKeyboardEvent : forall<a> (a) -> exn keyboardEvent
{ inline "(#1.toString()==='[object KeyboardEvent]'?#1:std_core.error('toKeyboardEvent: cast failed'))" }


// KeyboardEvent implements KeyboardEvent (supplemental)
inline extern char : (this: keyboardEvent) -> dom char
{ inline "String.fromCharCode(#1.keyCode)" }

inline extern string : (this: keyboardEvent) -> dom string
{ inline "String.fromCharCode(#1.keyCode)" }

inline extern location : (this: keyboardEvent) -> dom uint32
{ inline "#1.location" }
inline extern ctrlKey : (this: keyboardEvent) -> dom bool
{ inline "#1.ctrlKey" }
inline extern shiftKey : (this: keyboardEvent) -> dom bool
{ inline "#1.shiftKey" }
inline extern altKey : (this: keyboardEvent) -> dom bool
{ inline "#1.altKey" }
inline extern metaKey : (this: keyboardEvent) -> dom bool
{ inline "#1.metaKey" }
inline extern repeat : (this: keyboardEvent) -> dom bool
{ inline "#1.repeat" }
inline extern locale : (this: keyboardEvent) -> dom string
{ inline "#1.locale" }
inline extern getModifierState : (this: keyboardEvent, keyArg: string) -> dom bool
{ inline "#1.getModifierState(#2)" }

inline extern initKeyboardEvent : (this: keyboardEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, charArg: string, keyArg: string, locationArg: uint32, modifiersListArg: string, repeat: bool, localeArg: string) -> dom ()
{ inline "#1.initKeyboardEvent(#2, #3, #4, #5, #6, #7, #8, #9, #10, #11)" }

// KeyboardEvent implements KeyboardEvent-35 (supplemental)
inline extern charCode : (this: keyboardEvent) -> dom uint32
{ inline "#1.charCode" }
inline extern keyCode : (this: keyboardEvent) -> dom uint32
{ inline "#1.keyCode" }
inline extern which : (this: keyboardEvent) -> dom uint32
{ inline "#1.which" }
// KeyboardEvent extends UIEvent
inline extern uiEvent : (keyboardEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// KeyboardEvent implements in extension UIEvent (overloading)
inline extern view : (this: keyboardEvent) -> dom abstractView
{ inline "#1.view" }
inline extern detail : (this: keyboardEvent) -> dom int32
{ inline "#1.detail" }
inline extern initUiEvent : (this: keyboardEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// KeyboardEvent extends Event
inline extern event : (keyboardEvent) -> event // upcasting to extended type
{ inline "#1" }
// KeyboardEvent implements in extension Event (overloading)
inline extern type_ : (this: keyboardEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: keyboardEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: keyboardEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: keyboardEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: keyboardEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: keyboardEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: keyboardEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: keyboardEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: keyboardEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: keyboardEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: keyboardEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: keyboardEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: keyboardEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

