pub module std/sys/dom/events/textEvent

// Interface TextEvent (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeTextEvent  : forall<a> (a) -> maybe<textEvent>
{ inline "(#1.toString()==='[object TextEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toTextEvent : forall<a> (a) -> exn textEvent
{ inline "(#1.toString()==='[object TextEvent]'?#1:std_core.error('toTextEvent: cast failed'))" }


// TextEvent implements TextEvent (supplemental)
inline extern data : (this: textEvent) -> dom string
{ inline "#1.data" }
inline extern inputMethod : (this: textEvent) -> dom uint32
{ inline "#1.inputMethod" }
inline extern locale : (this: textEvent) -> dom string
{ inline "#1.locale" }
inline extern initTextEvent : (this: textEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, dataArg: string, inputMethod: uint32, localeArg: string) -> dom ()
{ inline "#1.initTextEvent(#2, #3, #4, #5, #6, #7, #8)" }

// TextEvent extends UIEvent
inline extern uiEvent : (textEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// TextEvent implements in extension UIEvent (overloading)
inline extern view : (this: textEvent) -> dom abstractView
{ inline "#1.view" }
inline extern detail : (this: textEvent) -> dom int32
{ inline "#1.detail" }
inline extern initUiEvent : (this: textEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// TextEvent extends Event
inline extern event : (textEvent) -> event // upcasting to extended type
{ inline "#1" }
// TextEvent implements in extension Event (overloading)
inline extern type_ : (this: textEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: textEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: textEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: textEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: textEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: textEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: textEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: textEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: textEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: textEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: textEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: textEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: textEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

