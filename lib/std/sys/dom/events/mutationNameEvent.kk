pub module std/sys/dom/events/mutationNameEvent

// Interface MutationNameEvent (generated by esidl 0.2.0).

import std/sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeMutationNameEvent  : forall<a> (a) -> maybe<mutationNameEvent>
{ inline "(#1.toString()==='[object MutationNameEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toMutationNameEvent : forall<a> (a) -> exn mutationNameEvent
{ inline "(#1.toString()==='[object MutationNameEvent]'?#1:std_core.error('toMutationNameEvent: cast failed'))" }


// MutationNameEvent implements MutationNameEvent (supplemental)
inline extern prevNamespaceUri : (this: mutationNameEvent) -> dom string
{ inline "#1.prevNamespaceURI" }
inline extern prevNodeName : (this: mutationNameEvent) -> dom string
{ inline "#1.prevNodeName" }
inline extern initMutationNameEvent : (this: mutationNameEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, relatedNodeArg: node, prevNamespaceUriArg: string, prevNodeNameArg: string) -> dom ()
{ inline "#1.initMutationNameEvent(#2, #3, #4, #5, #6, #7)" }

// MutationNameEvent extends MutationEvent
inline extern mutationEvent : (mutationNameEvent) -> mutationEvent // upcasting to extended type
{ inline "#1" }
// MutationNameEvent implements in extension MutationEvent (overloading)
inline extern relatedNode : (this: mutationNameEvent) -> dom domObject
{ inline "#1.relatedNode" }
inline extern prevValue : (this: mutationNameEvent) -> dom string
{ inline "#1.prevValue" }
inline extern newValue : (this: mutationNameEvent) -> dom string
{ inline "#1.newValue" }
inline extern attrName : (this: mutationNameEvent) -> dom string
{ inline "#1.attrName" }
inline extern attrChange : (this: mutationNameEvent) -> dom mutationEventAttrChange
{ inline "#1.attrChange" }
inline extern initMutationEvent : (this: mutationNameEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, relatedNodeArg: domObject, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: uint16) -> dom ()
{ inline "#1.initMutationEvent(#2, #3, #4, #5, #6, #7, #8, #9)" }

// MutationNameEvent extends Event
inline extern event : (mutationNameEvent) -> event // upcasting to extended type
{ inline "#1" }
// MutationNameEvent implements in extension Event (overloading)
inline extern type_ : (this: mutationNameEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: mutationNameEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: mutationNameEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: mutationNameEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: mutationNameEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: mutationNameEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: mutationNameEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: mutationNameEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: mutationNameEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: mutationNameEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: mutationNameEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: mutationNameEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: mutationNameEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

