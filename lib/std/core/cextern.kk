module std/core/cextern

import std/num/int32
import std/core/types

extern import
  c file "inline/cextern.h"

pub alias owned-c<t> = extern-owned<t>
pub alias borrowed-c<s::S,t> = extern-borrowed<t>
pub type c-array<t>
pub alias c-null<t> = intptr_t

pub inline extern cnull(): c-null<t>
  c inline "(kk_addr_t)NULL"

pub fun array/malloc<t>(n: int32, ?size-of: (c-null<t>) -> int32): owned-c<c-array<t>>
  int/malloc(n, size-of(cnull())).c-own

pub fun single/malloc<t>(?size-of: (c-null<t>) -> int32): owned-c<t>
  int/malloc(1.int32, size-of(cnull())).c-own

pub fun array/malloc-c<t>(n: int32, ?size-of: (c-null<t>) -> int32): owned-c<c-array<t>>
  int/malloc-c(n, size-of(cnull())).c-own-free-calloc

pub fun single/malloc-c<t>(?size-of: (c-null<t>) -> int32): owned-c<t>
  int/malloc-c(1.int32, size-of(cnull())).c-own-free-calloc

extern int/malloc<t>(n: int32, size-of: int32): intptr_t
  c inline "(kk_addr_t)kk_malloc(#1*#2, kk_context())"

extern int/malloc-c<t>(n: int32, size-of: int32): intptr_t
  c inline "(kk_addr_t)malloc(#1*#2)"

// Transform a c ptr into a managed koka value, which will be freed when koka's reference count reaches 0
pub extern c-own<t>(c: intptr_t): owned-c<t>
  c inline "kk_cptr_raw_box(&kk_free_fun, (void *)#1, kk_context())"

// Transform a c ptr into a managed koka value, which will be freed when koka's reference count reaches 0
pub extern c-own-free-calloc<t>(c: intptr_t): owned-c<t>
  c inline "kk_cptr_raw_box(&kk_free_calloc, (void *)#1, kk_context())"

// Transform a c ptr into a koka value that holds the c reference without freeing it
// The pointer should be valid
pub extern c-borrow<t>(c: intptr_t, f: forall<s> borrowed-c<s,t> -> e a): e a
  c "kk_borrow_ptr"

// Transform a koka owned c value into a c ptr (keeping the koka reference alive during the scope of the function)
pub extern owned/with-ptr(^t: owned-c<t>, f: intptr_t -> e a): e a
  c "kk_owned_with_ptr"

// Transform a koka owned value into a c ptr (keeping the koka reference alive during the scope of the function)
pub extern borrowed/with-ptr(^t: borrowed-c<s,t>, f: intptr_t -> e a): e a
  c "kk_borrowed_with_ptr"

pub fun c-array/with-ptr(^t: owned-c<c-array<t>>, idx: ssize_t, f: forall<s> borrowed-c<s,t> -> e a, ?size-of: (c-null<t>) -> int32): e a
  offset/with-ptr(t, idx, fn(p) c-borrow(p, f), size-of(cnull()))

extern offset/with-ptr(^t: owned-c<c-array<t>>, idx: ssize_t, f: intptr_t -> e a, size-of: int32): e a
  c "kk_owned_with_ptr_idx"