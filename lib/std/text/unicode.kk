/*---------------------------------------------------------------------------
  Copyright 2012-2021, Microsoft Research, Daan Leijen.

  This is free software; you can redistribute it and/or modify it under the
  terms of the Apache License, Version 2.0. A copy of the License can be
  found in the LICENSE file at the root of this distribution.
---------------------------------------------------------------------------*/

/* Basic unicode support.

*/
module std/text/unicode

import std/core/undiv

// Grapheme's are an alias for `:string`.
// Each grapheme is a self-contained symbol consisting of
// a unicode character followed by combining characters and/or
//  combining marks.
pub alias grapheme = string

extern import {
  cs file "unicode-inline.cs"
  js file "unicode-inline.js"
}

//--------------------------------------------------------------
// Calculation of graphemes
//--------------------------------------------------------------

// Is this a combining character?
pub fun is-combining( c : char ) : bool {
  val i = c.int
  ((i >= 0x0300 && i <= 0x036F) ||
   (i >= 0x1AB0 && i <= 0x1AFF) ||
   (i >= 0x1DC0 && i <= 0x1DFF) ||
   (i >= 0x20D0 && i <= 0x20FF) ||
   (i >= 0xFE20 && i <= 0xFE2F) ||
   (i >= 0xFE00 && i <= 0xFE0F)) // Added variation selectors
   // Should we instead add `zero-widths.force.contains(i)`?
}

// Join combining characters with their base into a grapheme.
fun join-combining( cs : list<char>, comb : list<char> = [], acc : list<grapheme> = []) : list<grapheme> {
  match(cs) {
    Cons(zwj, cc) | zwj.int == 0x200D -> // Handle zero-width-joiner
      match cc
        Cons(c, cc') -> cc'.join-combining(Cons(c, Cons(zwj,comb)), acc)
        Nil -> cc.join-combining(Cons(zwj, comb), acc)
    Cons(c,cc) -> if (c.is-combining)
                   then cc.join-combining( Cons(c,comb), acc )
                   else cc.join-combining( [c], consrev(comb,acc) )
    Nil        -> consrev(comb,acc).reverse
  }
}
fun consrev(xs,xss) {
  if (xs.is-nil) then xss else Cons(xs.reverse.string,xss)
}

// Convert a string to a list of graphemes.
// Each grapheme will be in `NFC` normalized form.
pub fun graphemes( s  : string ) : list<grapheme> {
  //s.vgraphemes.list
  s.normalize(NFC).list.join-combining
}

//--------------------------------------------------------------
// Normalization
//--------------------------------------------------------------

// Type of unicode [normalization](https://www.unicode.org/reports/tr15)
pub type normalization {
  // Canonical composition (default). Use composed characters when possible.
  con NFC
  // Canonical decomposition.
  con NFD
  // Compatibility composition.
  con NFKC
  // Compatibility decomposition.
  con NFKD
}


extern normalizex( s  : string, norm : string ) : string {
  c  inline "#1"                         // TODO: use utf8proc library?
  cs inline "Unicode.Normalize(#1,#2)"
  js inline "_normalize(#1,#2)"
}

// Normalize a unicode string. If no normalization form is given, `NFC` is used.
pub fun normalize( s  : string, norm : normalization = NFC ) : string {
  val norms = match(norm) {
    NFC -> "NFC"
    NFD -> "NFD"
    NFKC -> "NFKC"
    NFKD -> "NFKD"
  }
  s.normalizex(norms)
}


//--------------------------------------------------------------
// Column widths
//--------------------------------------------------------------

// Return the column-width of a unicode character.
// Equivalent to ``wcwidth``
pub fun char/width( c : char ) : int {
  if (zero-widths.force.contains(c.int)) then 0
  elif (asian-wide.force.contains(c.int)) then 2
  else 1
}

// Return the total column-width of a string.
pub fun string/width( s : string ) : int {
  var total := 0
  s.foreach( fn(c : char) {
    total := total + c.width
  })
  total
}

pub fun is-upper(c : char): bool
  upper.force.contains(c.int)

pub fun is-lower(c : char): bool
  lower.force.contains(c.int)

//--------------------------------------------------------------
// Families: asian-wide, zero-widths
//--------------------------------------------------------------

// These characters are considered wide, i.e. 2 columns wide.
// https://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt
// See ranges with postfix ;W
// 
// Update with `stack exec koka -- util/update-unicode.kk -e -- -a`
// TODO: Handle 'unassigned' ranges: (Following is an excerpt from https://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt)
// Doc from unicode data file
// East_Asian_Width property, consisting of one of the following values:
//        "A", "F", "H", "N", "Na", "W"
// - All code points, assigned or unassigned, that are not listed
//     explicitly are given the value "N".
// - The unassigned code points in the following blocks default to "W":
//        CJK Unified Ideographs Extension A: U+3400..U+4DBF
//        CJK Unified Ideographs:             U+4E00..U+9FFF
//        CJK Compatibility Ideographs:       U+F900..U+FAFF
// - All undesignated code points in Planes 2 and 3, whether inside or
//     outside of allocated blocks, default to "W":
//        Plane 2:                            U+20000..U+2FFFD
//        Plane 3: 
val asian-wide : delayed<total,rtree> = delay{
  build-rtree([
    single(0x1100,0x115F),single(0x231A,0x231B),point(0x2329),point(0x232A),single(0x23E9,0x23EC),point(0x23F0),point(0x23F3),single(0x25FD,0x25FE),
    single(0x2614,0x2615),single(0x2630,0x2637),single(0x2648,0x2653),point(0x267F),single(0x268A,0x268F),point(0x2693),point(0x26A1),single(0x26AA,0x26AB),
    single(0x26BD,0x26BE),single(0x26C4,0x26C5),point(0x26CE),point(0x26D4),point(0x26EA),single(0x26F2,0x26F3),point(0x26F5),point(0x26FA),
    point(0x26FD),point(0x2705),single(0x270A,0x270B),point(0x2728),point(0x274C),point(0x274E),single(0x2753,0x2755),point(0x2757),
    single(0x2795,0x2797),point(0x27B0),point(0x27BF),single(0x2B1B,0x2B1C),point(0x2B50),point(0x2B55),single(0x2E80,0x2E99),single(0x2E9B,0x2EF3),
    single(0x2F00,0x2FD5),single(0x2FF0,0x2FFF),single(0x3001,0x3003),point(0x3004),point(0x3005),point(0x3006),point(0x3007),point(0x3008),
    point(0x3009),point(0x300A),point(0x300B),point(0x300C),point(0x300D),point(0x300E),point(0x300F),point(0x3010),
    point(0x3011),single(0x3012,0x3013),point(0x3014),point(0x3015),point(0x3016),point(0x3017),point(0x3018),point(0x3019),
    point(0x301A),point(0x301B),point(0x301C),point(0x301D),single(0x301E,0x301F),point(0x3020),single(0x3021,0x3029),single(0x302A,0x302D),
    single(0x302E,0x302F),point(0x3030),single(0x3031,0x3035),single(0x3036,0x3037),single(0x3038,0x303A),point(0x303B),point(0x303C),point(0x303D),
    point(0x303E),single(0x3041,0x3096),single(0x3099,0x309A),single(0x309B,0x309C),single(0x309D,0x309E),point(0x309F),point(0x30A0),single(0x30A1,0x30FA),
    point(0x30FB),single(0x30FC,0x30FE),point(0x30FF),single(0x3105,0x312F),single(0x3131,0x318E),single(0x3190,0x3191),single(0x3192,0x3195),single(0x3196,0x319F),
    single(0x31A0,0x31BF),single(0x31C0,0x31E5),point(0x31EF),single(0x31F0,0x31FF),single(0x3200,0x321E),single(0x3220,0x3229),single(0x322A,0x3247),point(0x3250),
    single(0x3251,0x325F),single(0x3260,0x327F),single(0x3280,0x3289),single(0x328A,0x32B0),single(0x32B1,0x32BF),single(0x32C0,0x32FF),single(0x3300,0x33FF),single(0x3400,0x4DBF),
    single(0x4DC0,0x4DFF),single(0x4E00,0x9FFF),single(0xA000,0xA014),point(0xA015),single(0xA016,0xA48C),single(0xA490,0xA4C6),single(0xA960,0xA97C),single(0xAC00,0xD7A3),
    single(0xF900,0xFA6D),single(0xFA6E,0xFA6F),single(0xFA70,0xFAD9),single(0xFADA,0xFAFF),single(0xFE10,0xFE16),point(0xFE17),point(0xFE18),point(0xFE19),
    point(0xFE30),single(0xFE31,0xFE32),single(0xFE33,0xFE34),point(0xFE35),point(0xFE36),point(0xFE37),point(0xFE38),point(0xFE39),
    point(0xFE3A),point(0xFE3B),point(0xFE3C),point(0xFE3D),point(0xFE3E),point(0xFE3F),point(0xFE40),point(0xFE41),
    point(0xFE42),point(0xFE43),point(0xFE44),single(0xFE45,0xFE46),point(0xFE47),point(0xFE48),single(0xFE49,0xFE4C),single(0xFE4D,0xFE4F),
    single(0xFE50,0xFE52),single(0xFE54,0xFE57),point(0xFE58),point(0xFE59),point(0xFE5A),point(0xFE5B),point(0xFE5C),point(0xFE5D),
    point(0xFE5E),single(0xFE5F,0xFE61),point(0xFE62),point(0xFE63),single(0xFE64,0xFE66),point(0xFE68),point(0xFE69),single(0xFE6A,0xFE6B),
    single(0x16FE0,0x16FE1),point(0x16FE2),point(0x16FE3),point(0x16FE4),single(0x16FF0,0x16FF1),single(0x17000,0x187F7),single(0x18800,0x18AFF),single(0x18B00,0x18CD5),
    point(0x18CFF),single(0x18D00,0x18D08),single(0x1AFF0,0x1AFF3),single(0x1AFF5,0x1AFFB),single(0x1AFFD,0x1AFFE),single(0x1B000,0x1B0FF),single(0x1B100,0x1B122),point(0x1B132),
    single(0x1B150,0x1B152),point(0x1B155),single(0x1B164,0x1B167),single(0x1B170,0x1B2FB),single(0x1D300,0x1D356),single(0x1D360,0x1D376),point(0x1F004),point(0x1F0CF),
    point(0x1F18E),single(0x1F191,0x1F19A),single(0x1F200,0x1F202),single(0x1F210,0x1F23B),single(0x1F240,0x1F248),single(0x1F250,0x1F251),single(0x1F260,0x1F265),single(0x1F300,0x1F320),
    single(0x1F32D,0x1F335),single(0x1F337,0x1F37C),single(0x1F37E,0x1F393),single(0x1F3A0,0x1F3CA),single(0x1F3CF,0x1F3D3),single(0x1F3E0,0x1F3F0),point(0x1F3F4),single(0x1F3F8,0x1F3FA),
    single(0x1F3FB,0x1F3FF),single(0x1F400,0x1F43E),point(0x1F440),single(0x1F442,0x1F4FC),single(0x1F4FF,0x1F53D),single(0x1F54B,0x1F54E),single(0x1F550,0x1F567),point(0x1F57A),
    single(0x1F595,0x1F596),point(0x1F5A4),single(0x1F5FB,0x1F5FF),single(0x1F600,0x1F64F),single(0x1F680,0x1F6C5),point(0x1F6CC),single(0x1F6D0,0x1F6D2),single(0x1F6D5,0x1F6D7),
    single(0x1F6DC,0x1F6DF),single(0x1F6EB,0x1F6EC),single(0x1F6F4,0x1F6FC),single(0x1F7E0,0x1F7EB),point(0x1F7F0),single(0x1F90C,0x1F93A),single(0x1F93C,0x1F945),single(0x1F947,0x1F9FF),
    single(0x1FA70,0x1FA7C),single(0x1FA80,0x1FA89),single(0x1FA8F,0x1FAC6),single(0x1FACE,0x1FADC),single(0x1FADF,0x1FAE9),single(0x1FAF0,0x1FAF8),single(0x20000,0x2A6DF),single(0x2A6E0,0x2A6FF),
    single(0x2A700,0x2B739),single(0x2B73A,0x2B73F),single(0x2B740,0x2B81D),single(0x2B81E,0x2B81F),single(0x2B820,0x2CEA1),single(0x2CEA2,0x2CEAF),single(0x2CEB0,0x2EBE0),single(0x2EBE1,0x2EBEF),
    single(0x2EBF0,0x2EE5D),single(0x2EE5E,0x2F7FF),single(0x2F800,0x2FA1D),single(0x2FA1E,0x2FA1F),single(0x2FA20,0x2FFFD),single(0x30000,0x3134A),single(0x3134B,0x3134F),single(0x31350,0x323AF),
    single(0x323B0,0x3FFFD),
  ])
}

// These characters have zero width
val zero-widths : delayed<total,rtree> = delay{
  build-rtree([
    single(0x0000, 0x001F), single(0x007F, 0x00A0),
    single(0x0300, 0x036F), single(0x0483, 0x0486), single(0x0488, 0x0489),
    single(0x0591, 0x05BD), single(0x05BF, 0x05BF), single(0x05C1, 0x05C2),
    single(0x05C4, 0x05C5), single(0x05C7, 0x05C7), single(0x0600, 0x0603),
    single(0x0610, 0x0615), single(0x064B, 0x065E), single(0x0670, 0x0670),
    single(0x06D6, 0x06E4), single(0x06E7, 0x06E8), single(0x06EA, 0x06ED),
    single(0x070F, 0x070F), single(0x0711, 0x0711), single(0x0730, 0x074A),
    single(0x07A6, 0x07B0), single(0x07EB, 0x07F3), single(0x0901, 0x0902),
    single(0x093C, 0x093C), single(0x0941, 0x0948), single(0x094D, 0x094D),
    single(0x0951, 0x0954), single(0x0962, 0x0963), single(0x0981, 0x0981),
    single(0x09BC, 0x09BC), single(0x09C1, 0x09C4), single(0x09CD, 0x09CD),
    single(0x09E2, 0x09E3), single(0x0A01, 0x0A02), single(0x0A3C, 0x0A3C),
    single(0x0A41, 0x0A42), single(0x0A47, 0x0A48), single(0x0A4B, 0x0A4D),
    single(0x0A70, 0x0A71), single(0x0A81, 0x0A82), single(0x0ABC, 0x0ABC),
    single(0x0AC1, 0x0AC5), single(0x0AC7, 0x0AC8), single(0x0ACD, 0x0ACD),
    single(0x0AE2, 0x0AE3), single(0x0B01, 0x0B01), single(0x0B3C, 0x0B3C),
    single(0x0B3F, 0x0B3F), single(0x0B41, 0x0B43), single(0x0B4D, 0x0B4D),
    single(0x0B56, 0x0B56), single(0x0B82, 0x0B82), single(0x0BC0, 0x0BC0),
    single(0x0BCD, 0x0BCD), single(0x0C3E, 0x0C40), single(0x0C46, 0x0C48),
    single(0x0C4A, 0x0C4D), single(0x0C55, 0x0C56), single(0x0CBC, 0x0CBC),
    single(0x0CBF, 0x0CBF), single(0x0CC6, 0x0CC6), single(0x0CCC, 0x0CCD),
    single(0x0CE2, 0x0CE3), single(0x0D41, 0x0D43), single(0x0D4D, 0x0D4D),
    single(0x0DCA, 0x0DCA), single(0x0DD2, 0x0DD4), single(0x0DD6, 0x0DD6),
    single(0x0E31, 0x0E31), single(0x0E34, 0x0E3A), single(0x0E47, 0x0E4E),
    single(0x0EB1, 0x0EB1), single(0x0EB4, 0x0EB9), single(0x0EBB, 0x0EBC),
    single(0x0EC8, 0x0ECD), single(0x0F18, 0x0F19), single(0x0F35, 0x0F35),
    single(0x0F37, 0x0F37), single(0x0F39, 0x0F39), single(0x0F71, 0x0F7E),
    single(0x0F80, 0x0F84), single(0x0F86, 0x0F87), single(0x0F90, 0x0F97),
    single(0x0F99, 0x0FBC), single(0x0FC6, 0x0FC6), single(0x102D, 0x1030),
    single(0x1032, 0x1032), single(0x1036, 0x1037), single(0x1039, 0x1039),
    single(0x1058, 0x1059), single(0x1160, 0x11FF), single(0x135F, 0x135F),
    single(0x1712, 0x1714), single(0x1732, 0x1734), single(0x1752, 0x1753),
    single(0x1772, 0x1773), single(0x17B4, 0x17B5), single(0x17B7, 0x17BD),
    single(0x17C6, 0x17C6), single(0x17C9, 0x17D3), single(0x17DD, 0x17DD),
    single(0x180B, 0x180D), single(0x18A9, 0x18A9), single(0x1920, 0x1922),
    single(0x1927, 0x1928), single(0x1932, 0x1932), single(0x1939, 0x193B),
    single(0x1A17, 0x1A18), single(0x1B00, 0x1B03), single(0x1B34, 0x1B34),
    single(0x1B36, 0x1B3A), single(0x1B3C, 0x1B3C), single(0x1B42, 0x1B42),
    single(0x1B6B, 0x1B73), single(0x1DC0, 0x1DCA), single(0x1DFE, 0x1DFF),
    single(0x200B, 0x200F), single(0x202A, 0x202E), single(0x2060, 0x2063),
    single(0x206A, 0x206F), single(0x20D0, 0x20EF), single(0x302A, 0x302F),
    single(0x3099, 0x309A), single(0xA806, 0xA806), single(0xA80B, 0xA80B),
    single(0xA825, 0xA826), single(0xFB1E, 0xFB1E), single(0xFE00, 0xFE0F),
    single(0xFE20, 0xFE23), single(0xFEFF, 0xFEFF), single(0xFFF9, 0xFFFB),
    single(0x10A01, 0x10A03), single(0x10A05, 0x10A06), single(0x10A0C, 0x10A0F),
    single(0x10A38, 0x10A3A), single(0x10A3F, 0x10A3F), single(0x1D167, 0x1D169),
    single(0x1D173, 0x1D182), single(0x1D185, 0x1D18B), single(0x1D1AA, 0x1D1AD),
    single(0x1D242, 0x1D244), single(0xE0001, 0xE0001), single(0xE0020, 0xE007F),
    single(0xE0100, 0xE01EF)
  ])
}

// Doc from unicode data file
// 
// Derived Property: Math
//  Generated from: Sm + Other_Math
val math : delayed<total,rtree> = delay{
  build-rtree([
    point(0x002B),single(0x003C,0x003E),point(0x005E),point(0x007C),point(0x007E),point(0x00AC),point(0x00B1),point(0x00D7),
    point(0x00F7),single(0x03D0,0x03D2),point(0x03D5),single(0x03F0,0x03F1),single(0x03F4,0x03F5),point(0x03F6),single(0x0606,0x0608),point(0x2016),
    single(0x2032,0x2034),point(0x2040),point(0x2044),point(0x2052),single(0x2061,0x2064),single(0x207A,0x207C),point(0x207D),point(0x207E),
    single(0x208A,0x208C),point(0x208D),point(0x208E),single(0x20D0,0x20DC),point(0x20E1),single(0x20E5,0x20E6),single(0x20EB,0x20EF),point(0x2102),
    point(0x2107),single(0x210A,0x2113),point(0x2115),point(0x2118),single(0x2119,0x211D),point(0x2124),point(0x2128),point(0x2129),
    single(0x212C,0x212D),single(0x212F,0x2131),single(0x2133,0x2134),single(0x2135,0x2138),single(0x213C,0x213F),single(0x2140,0x2144),single(0x2145,0x2149),point(0x214B),
    single(0x2190,0x2194),single(0x2195,0x2199),single(0x219A,0x219B),single(0x219C,0x219F),point(0x21A0),single(0x21A1,0x21A2),point(0x21A3),single(0x21A4,0x21A5),
    point(0x21A6),point(0x21A7),single(0x21A9,0x21AD),point(0x21AE),single(0x21B0,0x21B1),single(0x21B6,0x21B7),single(0x21BC,0x21CD),single(0x21CE,0x21CF),
    single(0x21D0,0x21D1),point(0x21D2),point(0x21D3),point(0x21D4),single(0x21D5,0x21DB),point(0x21DD),single(0x21E4,0x21E5),single(0x21F4,0x22FF),
    point(0x2308),point(0x2309),point(0x230A),point(0x230B),single(0x2320,0x2321),point(0x237C),single(0x239B,0x23B3),single(0x23B4,0x23B5),
    point(0x23B7),point(0x23D0),single(0x23DC,0x23E1),point(0x23E2),single(0x25A0,0x25A1),single(0x25AE,0x25B6),point(0x25B7),single(0x25BC,0x25C0),
    point(0x25C1),single(0x25C6,0x25C7),single(0x25CA,0x25CB),single(0x25CF,0x25D3),point(0x25E2),point(0x25E4),single(0x25E7,0x25EC),single(0x25F8,0x25FF),
    single(0x2605,0x2606),point(0x2640),point(0x2642),single(0x2660,0x2663),single(0x266D,0x266E),point(0x266F),single(0x27C0,0x27C4),point(0x27C5),
    point(0x27C6),single(0x27C7,0x27E5),point(0x27E6),point(0x27E7),point(0x27E8),point(0x27E9),point(0x27EA),point(0x27EB),
    point(0x27EC),point(0x27ED),point(0x27EE),point(0x27EF),single(0x27F0,0x27FF),single(0x2900,0x2982),point(0x2983),point(0x2984),
    point(0x2985),point(0x2986),point(0x2987),point(0x2988),point(0x2989),point(0x298A),point(0x298B),point(0x298C),
    point(0x298D),point(0x298E),point(0x298F),point(0x2990),point(0x2991),point(0x2992),point(0x2993),point(0x2994),
    point(0x2995),point(0x2996),point(0x2997),point(0x2998),single(0x2999,0x29D7),point(0x29D8),point(0x29D9),point(0x29DA),
    point(0x29DB),single(0x29DC,0x29FB),point(0x29FC),point(0x29FD),single(0x29FE,0x2AFF),single(0x2B30,0x2B44),single(0x2B47,0x2B4C),point(0xFB29),
    point(0xFE61),point(0xFE62),point(0xFE63),single(0xFE64,0xFE66),point(0xFE68),point(0xFF0B),single(0xFF1C,0xFF1E),point(0xFF3C),
    point(0xFF3E),point(0xFF5C),point(0xFF5E),point(0xFFE2),single(0xFFE9,0xFFEC),single(0x10D8E,0x10D8F),single(0x1D400,0x1D454),single(0x1D456,0x1D49C),
    single(0x1D49E,0x1D49F),point(0x1D4A2),single(0x1D4A5,0x1D4A6),single(0x1D4A9,0x1D4AC),single(0x1D4AE,0x1D4B9),point(0x1D4BB),single(0x1D4BD,0x1D4C3),single(0x1D4C5,0x1D505),
    single(0x1D507,0x1D50A),single(0x1D50D,0x1D514),single(0x1D516,0x1D51C),single(0x1D51E,0x1D539),single(0x1D53B,0x1D53E),single(0x1D540,0x1D544),point(0x1D546),single(0x1D54A,0x1D550),
    single(0x1D552,0x1D6A5),single(0x1D6A8,0x1D6C0),point(0x1D6C1),single(0x1D6C2,0x1D6DA),point(0x1D6DB),single(0x1D6DC,0x1D6FA),point(0x1D6FB),single(0x1D6FC,0x1D714),
    point(0x1D715),single(0x1D716,0x1D734),point(0x1D735),single(0x1D736,0x1D74E),point(0x1D74F),single(0x1D750,0x1D76E),point(0x1D76F),single(0x1D770,0x1D788),
    point(0x1D789),single(0x1D78A,0x1D7A8),point(0x1D7A9),single(0x1D7AA,0x1D7C2),point(0x1D7C3),single(0x1D7C4,0x1D7CB),single(0x1D7CE,0x1D7FF),single(0x1EE00,0x1EE03),
    single(0x1EE05,0x1EE1F),single(0x1EE21,0x1EE22),point(0x1EE24),point(0x1EE27),single(0x1EE29,0x1EE32),single(0x1EE34,0x1EE37),point(0x1EE39),point(0x1EE3B),
    point(0x1EE42),point(0x1EE47),point(0x1EE49),point(0x1EE4B),single(0x1EE4D,0x1EE4F),single(0x1EE51,0x1EE52),point(0x1EE54),point(0x1EE57),
    point(0x1EE59),point(0x1EE5B),point(0x1EE5D),point(0x1EE5F),single(0x1EE61,0x1EE62),point(0x1EE64),single(0x1EE67,0x1EE6A),single(0x1EE6C,0x1EE72),
    single(0x1EE74,0x1EE77),single(0x1EE79,0x1EE7C),point(0x1EE7E),single(0x1EE80,0x1EE89),single(0x1EE8B,0x1EE9B),single(0x1EEA1,0x1EEA3),single(0x1EEA5,0x1EEA9),single(0x1EEAB,0x1EEBB),
    single(0x1EEF0,0x1EEF1),
  ])
}
// Doc from unicode data file
// Derived Property: Lowercase
//  Generated from: Ll + Other_Lowercase
val lower : delayed<total,rtree> = delay{
  build-rtree([
    single(0x0061,0x007A),point(0x00AA),point(0x00B5),point(0x00BA),single(0x00DF,0x00F6),single(0x00F8,0x00FF),point(0x0101),point(0x0103),
    point(0x0105),point(0x0107),point(0x0109),point(0x010B),point(0x010D),point(0x010F),point(0x0111),point(0x0113),
    point(0x0115),point(0x0117),point(0x0119),point(0x011B),point(0x011D),point(0x011F),point(0x0121),point(0x0123),
    point(0x0125),point(0x0127),point(0x0129),point(0x012B),point(0x012D),point(0x012F),point(0x0131),point(0x0133),
    point(0x0135),single(0x0137,0x0138),point(0x013A),point(0x013C),point(0x013E),point(0x0140),point(0x0142),point(0x0144),
    point(0x0146),single(0x0148,0x0149),point(0x014B),point(0x014D),point(0x014F),point(0x0151),point(0x0153),point(0x0155),
    point(0x0157),point(0x0159),point(0x015B),point(0x015D),point(0x015F),point(0x0161),point(0x0163),point(0x0165),
    point(0x0167),point(0x0169),point(0x016B),point(0x016D),point(0x016F),point(0x0171),point(0x0173),point(0x0175),
    point(0x0177),point(0x017A),point(0x017C),single(0x017E,0x0180),point(0x0183),point(0x0185),point(0x0188),single(0x018C,0x018D),
    point(0x0192),point(0x0195),single(0x0199,0x019B),point(0x019E),point(0x01A1),point(0x01A3),point(0x01A5),point(0x01A8),
    single(0x01AA,0x01AB),point(0x01AD),point(0x01B0),point(0x01B4),point(0x01B6),single(0x01B9,0x01BA),single(0x01BD,0x01BF),point(0x01C6),
    point(0x01C9),point(0x01CC),point(0x01CE),point(0x01D0),point(0x01D2),point(0x01D4),point(0x01D6),point(0x01D8),
    point(0x01DA),single(0x01DC,0x01DD),point(0x01DF),point(0x01E1),point(0x01E3),point(0x01E5),point(0x01E7),point(0x01E9),
    point(0x01EB),point(0x01ED),single(0x01EF,0x01F0),point(0x01F3),point(0x01F5),point(0x01F9),point(0x01FB),point(0x01FD),
    point(0x01FF),point(0x0201),point(0x0203),point(0x0205),point(0x0207),point(0x0209),point(0x020B),point(0x020D),
    point(0x020F),point(0x0211),point(0x0213),point(0x0215),point(0x0217),point(0x0219),point(0x021B),point(0x021D),
    point(0x021F),point(0x0221),point(0x0223),point(0x0225),point(0x0227),point(0x0229),point(0x022B),point(0x022D),
    point(0x022F),point(0x0231),single(0x0233,0x0239),point(0x023C),single(0x023F,0x0240),point(0x0242),point(0x0247),point(0x0249),
    point(0x024B),point(0x024D),single(0x024F,0x0293),single(0x0295,0x02AF),single(0x02B0,0x02B8),single(0x02C0,0x02C1),single(0x02E0,0x02E4),point(0x0345),
    point(0x0371),point(0x0373),point(0x0377),point(0x037A),single(0x037B,0x037D),point(0x0390),single(0x03AC,0x03CE),single(0x03D0,0x03D1),
    single(0x03D5,0x03D7),point(0x03D9),point(0x03DB),point(0x03DD),point(0x03DF),point(0x03E1),point(0x03E3),point(0x03E5),
    point(0x03E7),point(0x03E9),point(0x03EB),point(0x03ED),single(0x03EF,0x03F3),point(0x03F5),point(0x03F8),single(0x03FB,0x03FC),
    single(0x0430,0x045F),point(0x0461),point(0x0463),point(0x0465),point(0x0467),point(0x0469),point(0x046B),point(0x046D),
    point(0x046F),point(0x0471),point(0x0473),point(0x0475),point(0x0477),point(0x0479),point(0x047B),point(0x047D),
    point(0x047F),point(0x0481),point(0x048B),point(0x048D),point(0x048F),point(0x0491),point(0x0493),point(0x0495),
    point(0x0497),point(0x0499),point(0x049B),point(0x049D),point(0x049F),point(0x04A1),point(0x04A3),point(0x04A5),
    point(0x04A7),point(0x04A9),point(0x04AB),point(0x04AD),point(0x04AF),point(0x04B1),point(0x04B3),point(0x04B5),
    point(0x04B7),point(0x04B9),point(0x04BB),point(0x04BD),point(0x04BF),point(0x04C2),point(0x04C4),point(0x04C6),
    point(0x04C8),point(0x04CA),point(0x04CC),single(0x04CE,0x04CF),point(0x04D1),point(0x04D3),point(0x04D5),point(0x04D7),
    point(0x04D9),point(0x04DB),point(0x04DD),point(0x04DF),point(0x04E1),point(0x04E3),point(0x04E5),point(0x04E7),
    point(0x04E9),point(0x04EB),point(0x04ED),point(0x04EF),point(0x04F1),point(0x04F3),point(0x04F5),point(0x04F7),
    point(0x04F9),point(0x04FB),point(0x04FD),point(0x04FF),point(0x0501),point(0x0503),point(0x0505),point(0x0507),
    point(0x0509),point(0x050B),point(0x050D),point(0x050F),point(0x0511),point(0x0513),point(0x0515),point(0x0517),
    point(0x0519),point(0x051B),point(0x051D),point(0x051F),point(0x0521),point(0x0523),point(0x0525),point(0x0527),
    point(0x0529),point(0x052B),point(0x052D),point(0x052F),single(0x0560,0x0588),single(0x10D0,0x10FA),point(0x10FC),single(0x10FD,0x10FF),
    single(0x13F8,0x13FD),single(0x1C80,0x1C88),point(0x1C8A),single(0x1D00,0x1D2B),single(0x1D2C,0x1D6A),single(0x1D6B,0x1D77),point(0x1D78),single(0x1D79,0x1D9A),
    single(0x1D9B,0x1DBF),point(0x1E01),point(0x1E03),point(0x1E05),point(0x1E07),point(0x1E09),point(0x1E0B),point(0x1E0D),
    point(0x1E0F),point(0x1E11),point(0x1E13),point(0x1E15),point(0x1E17),point(0x1E19),point(0x1E1B),point(0x1E1D),
    point(0x1E1F),point(0x1E21),point(0x1E23),point(0x1E25),point(0x1E27),point(0x1E29),point(0x1E2B),point(0x1E2D),
    point(0x1E2F),point(0x1E31),point(0x1E33),point(0x1E35),point(0x1E37),point(0x1E39),point(0x1E3B),point(0x1E3D),
    point(0x1E3F),point(0x1E41),point(0x1E43),point(0x1E45),point(0x1E47),point(0x1E49),point(0x1E4B),point(0x1E4D),
    point(0x1E4F),point(0x1E51),point(0x1E53),point(0x1E55),point(0x1E57),point(0x1E59),point(0x1E5B),point(0x1E5D),
    point(0x1E5F),point(0x1E61),point(0x1E63),point(0x1E65),point(0x1E67),point(0x1E69),point(0x1E6B),point(0x1E6D),
    point(0x1E6F),point(0x1E71),point(0x1E73),point(0x1E75),point(0x1E77),point(0x1E79),point(0x1E7B),point(0x1E7D),
    point(0x1E7F),point(0x1E81),point(0x1E83),point(0x1E85),point(0x1E87),point(0x1E89),point(0x1E8B),point(0x1E8D),
    point(0x1E8F),point(0x1E91),point(0x1E93),single(0x1E95,0x1E9D),point(0x1E9F),point(0x1EA1),point(0x1EA3),point(0x1EA5),
    point(0x1EA7),point(0x1EA9),point(0x1EAB),point(0x1EAD),point(0x1EAF),point(0x1EB1),point(0x1EB3),point(0x1EB5),
    point(0x1EB7),point(0x1EB9),point(0x1EBB),point(0x1EBD),point(0x1EBF),point(0x1EC1),point(0x1EC3),point(0x1EC5),
    point(0x1EC7),point(0x1EC9),point(0x1ECB),point(0x1ECD),point(0x1ECF),point(0x1ED1),point(0x1ED3),point(0x1ED5),
    point(0x1ED7),point(0x1ED9),point(0x1EDB),point(0x1EDD),point(0x1EDF),point(0x1EE1),point(0x1EE3),point(0x1EE5),
    point(0x1EE7),point(0x1EE9),point(0x1EEB),point(0x1EED),point(0x1EEF),point(0x1EF1),point(0x1EF3),point(0x1EF5),
    point(0x1EF7),point(0x1EF9),point(0x1EFB),point(0x1EFD),single(0x1EFF,0x1F07),single(0x1F10,0x1F15),single(0x1F20,0x1F27),single(0x1F30,0x1F37),
    single(0x1F40,0x1F45),single(0x1F50,0x1F57),single(0x1F60,0x1F67),single(0x1F70,0x1F7D),single(0x1F80,0x1F87),single(0x1F90,0x1F97),single(0x1FA0,0x1FA7),single(0x1FB0,0x1FB4),
    single(0x1FB6,0x1FB7),point(0x1FBE),single(0x1FC2,0x1FC4),single(0x1FC6,0x1FC7),single(0x1FD0,0x1FD3),single(0x1FD6,0x1FD7),single(0x1FE0,0x1FE7),single(0x1FF2,0x1FF4),
    single(0x1FF6,0x1FF7),point(0x2071),point(0x207F),single(0x2090,0x209C),point(0x210A),single(0x210E,0x210F),point(0x2113),point(0x212F),
    point(0x2134),point(0x2139),single(0x213C,0x213D),single(0x2146,0x2149),point(0x214E),single(0x2170,0x217F),point(0x2184),single(0x24D0,0x24E9),
    single(0x2C30,0x2C5F),point(0x2C61),single(0x2C65,0x2C66),point(0x2C68),point(0x2C6A),point(0x2C6C),point(0x2C71),single(0x2C73,0x2C74),
    single(0x2C76,0x2C7B),single(0x2C7C,0x2C7D),point(0x2C81),point(0x2C83),point(0x2C85),point(0x2C87),point(0x2C89),point(0x2C8B),
    point(0x2C8D),point(0x2C8F),point(0x2C91),point(0x2C93),point(0x2C95),point(0x2C97),point(0x2C99),point(0x2C9B),
    point(0x2C9D),point(0x2C9F),point(0x2CA1),point(0x2CA3),point(0x2CA5),point(0x2CA7),point(0x2CA9),point(0x2CAB),
    point(0x2CAD),point(0x2CAF),point(0x2CB1),point(0x2CB3),point(0x2CB5),point(0x2CB7),point(0x2CB9),point(0x2CBB),
    point(0x2CBD),point(0x2CBF),point(0x2CC1),point(0x2CC3),point(0x2CC5),point(0x2CC7),point(0x2CC9),point(0x2CCB),
    point(0x2CCD),point(0x2CCF),point(0x2CD1),point(0x2CD3),point(0x2CD5),point(0x2CD7),point(0x2CD9),point(0x2CDB),
    point(0x2CDD),point(0x2CDF),point(0x2CE1),single(0x2CE3,0x2CE4),point(0x2CEC),point(0x2CEE),point(0x2CF3),single(0x2D00,0x2D25),
    point(0x2D27),point(0x2D2D),point(0xA641),point(0xA643),point(0xA645),point(0xA647),point(0xA649),point(0xA64B),
    point(0xA64D),point(0xA64F),point(0xA651),point(0xA653),point(0xA655),point(0xA657),point(0xA659),point(0xA65B),
    point(0xA65D),point(0xA65F),point(0xA661),point(0xA663),point(0xA665),point(0xA667),point(0xA669),point(0xA66B),
    point(0xA66D),point(0xA681),point(0xA683),point(0xA685),point(0xA687),point(0xA689),point(0xA68B),point(0xA68D),
    point(0xA68F),point(0xA691),point(0xA693),point(0xA695),point(0xA697),point(0xA699),point(0xA69B),single(0xA69C,0xA69D),
    point(0xA723),point(0xA725),point(0xA727),point(0xA729),point(0xA72B),point(0xA72D),single(0xA72F,0xA731),point(0xA733),
    point(0xA735),point(0xA737),point(0xA739),point(0xA73B),point(0xA73D),point(0xA73F),point(0xA741),point(0xA743),
    point(0xA745),point(0xA747),point(0xA749),point(0xA74B),point(0xA74D),point(0xA74F),point(0xA751),point(0xA753),
    point(0xA755),point(0xA757),point(0xA759),point(0xA75B),point(0xA75D),point(0xA75F),point(0xA761),point(0xA763),
    point(0xA765),point(0xA767),point(0xA769),point(0xA76B),point(0xA76D),point(0xA76F),point(0xA770),single(0xA771,0xA778),
    point(0xA77A),point(0xA77C),point(0xA77F),point(0xA781),point(0xA783),point(0xA785),point(0xA787),point(0xA78C),
    point(0xA78E),point(0xA791),single(0xA793,0xA795),point(0xA797),point(0xA799),point(0xA79B),point(0xA79D),point(0xA79F),
    point(0xA7A1),point(0xA7A3),point(0xA7A5),point(0xA7A7),point(0xA7A9),point(0xA7AF),point(0xA7B5),point(0xA7B7),
    point(0xA7B9),point(0xA7BB),point(0xA7BD),point(0xA7BF),point(0xA7C1),point(0xA7C3),point(0xA7C8),point(0xA7CA),
    point(0xA7CD),point(0xA7D1),point(0xA7D3),point(0xA7D5),point(0xA7D7),point(0xA7D9),point(0xA7DB),single(0xA7F2,0xA7F4),
    point(0xA7F6),single(0xA7F8,0xA7F9),point(0xA7FA),single(0xAB30,0xAB5A),single(0xAB5C,0xAB5F),single(0xAB60,0xAB68),point(0xAB69),single(0xAB70,0xABBF),
    single(0xFB00,0xFB06),single(0xFB13,0xFB17),single(0xFF41,0xFF5A),single(0x10428,0x1044F),single(0x104D8,0x104FB),single(0x10597,0x105A1),single(0x105A3,0x105B1),single(0x105B3,0x105B9),
    single(0x105BB,0x105BC),point(0x10780),single(0x10783,0x10785),single(0x10787,0x107B0),single(0x107B2,0x107BA),single(0x10CC0,0x10CF2),single(0x10D70,0x10D85),single(0x118C0,0x118DF),
    single(0x16E60,0x16E7F),single(0x1D41A,0x1D433),single(0x1D44E,0x1D454),single(0x1D456,0x1D467),single(0x1D482,0x1D49B),single(0x1D4B6,0x1D4B9),point(0x1D4BB),single(0x1D4BD,0x1D4C3),
    single(0x1D4C5,0x1D4CF),single(0x1D4EA,0x1D503),single(0x1D51E,0x1D537),single(0x1D552,0x1D56B),single(0x1D586,0x1D59F),single(0x1D5BA,0x1D5D3),single(0x1D5EE,0x1D607),single(0x1D622,0x1D63B),
    single(0x1D656,0x1D66F),single(0x1D68A,0x1D6A5),single(0x1D6C2,0x1D6DA),single(0x1D6DC,0x1D6E1),single(0x1D6FC,0x1D714),single(0x1D716,0x1D71B),single(0x1D736,0x1D74E),single(0x1D750,0x1D755),
    single(0x1D770,0x1D788),single(0x1D78A,0x1D78F),single(0x1D7AA,0x1D7C2),single(0x1D7C4,0x1D7C9),point(0x1D7CB),single(0x1DF00,0x1DF09),single(0x1DF0B,0x1DF1E),single(0x1DF25,0x1DF2A),
    single(0x1E922,0x1E943),single(0x1E030,0x1E06D),
  ])
}
// Doc from unicode data file
// Derived Property: Uppercase
//  Generated from: Lu + Other_Uppercase
val upper : delayed<total,rtree> = delay{
  build-rtree([
    single(0x0041,0x005A),single(0x00C0,0x00D6),single(0x00D8,0x00DE),point(0x0100),point(0x0102),point(0x0104),point(0x0106),point(0x0108),
    point(0x010A),point(0x010C),point(0x010E),point(0x0110),point(0x0112),point(0x0114),point(0x0116),point(0x0118),
    point(0x011A),point(0x011C),point(0x011E),point(0x0120),point(0x0122),point(0x0124),point(0x0126),point(0x0128),
    point(0x012A),point(0x012C),point(0x012E),point(0x0130),point(0x0132),point(0x0134),point(0x0136),point(0x0139),
    point(0x013B),point(0x013D),point(0x013F),point(0x0141),point(0x0143),point(0x0145),point(0x0147),point(0x014A),
    point(0x014C),point(0x014E),point(0x0150),point(0x0152),point(0x0154),point(0x0156),point(0x0158),point(0x015A),
    point(0x015C),point(0x015E),point(0x0160),point(0x0162),point(0x0164),point(0x0166),point(0x0168),point(0x016A),
    point(0x016C),point(0x016E),point(0x0170),point(0x0172),point(0x0174),point(0x0176),single(0x0178,0x0179),point(0x017B),
    point(0x017D),single(0x0181,0x0182),point(0x0184),single(0x0186,0x0187),single(0x0189,0x018B),single(0x018E,0x0191),single(0x0193,0x0194),single(0x0196,0x0198),
    single(0x019C,0x019D),single(0x019F,0x01A0),point(0x01A2),point(0x01A4),single(0x01A6,0x01A7),point(0x01A9),point(0x01AC),single(0x01AE,0x01AF),
    single(0x01B1,0x01B3),point(0x01B5),single(0x01B7,0x01B8),point(0x01BC),point(0x01C4),point(0x01C7),point(0x01CA),point(0x01CD),
    point(0x01CF),point(0x01D1),point(0x01D3),point(0x01D5),point(0x01D7),point(0x01D9),point(0x01DB),point(0x01DE),
    point(0x01E0),point(0x01E2),point(0x01E4),point(0x01E6),point(0x01E8),point(0x01EA),point(0x01EC),point(0x01EE),
    point(0x01F1),point(0x01F4),single(0x01F6,0x01F8),point(0x01FA),point(0x01FC),point(0x01FE),point(0x0200),point(0x0202),
    point(0x0204),point(0x0206),point(0x0208),point(0x020A),point(0x020C),point(0x020E),point(0x0210),point(0x0212),
    point(0x0214),point(0x0216),point(0x0218),point(0x021A),point(0x021C),point(0x021E),point(0x0220),point(0x0222),
    point(0x0224),point(0x0226),point(0x0228),point(0x022A),point(0x022C),point(0x022E),point(0x0230),point(0x0232),
    single(0x023A,0x023B),single(0x023D,0x023E),point(0x0241),single(0x0243,0x0246),point(0x0248),point(0x024A),point(0x024C),point(0x024E),
    point(0x0370),point(0x0372),point(0x0376),point(0x037F),point(0x0386),single(0x0388,0x038A),point(0x038C),single(0x038E,0x038F),
    single(0x0391,0x03A1),single(0x03A3,0x03AB),point(0x03CF),single(0x03D2,0x03D4),point(0x03D8),point(0x03DA),point(0x03DC),point(0x03DE),
    point(0x03E0),point(0x03E2),point(0x03E4),point(0x03E6),point(0x03E8),point(0x03EA),point(0x03EC),point(0x03EE),
    point(0x03F4),point(0x03F7),single(0x03F9,0x03FA),single(0x03FD,0x042F),point(0x0460),point(0x0462),point(0x0464),point(0x0466),
    point(0x0468),point(0x046A),point(0x046C),point(0x046E),point(0x0470),point(0x0472),point(0x0474),point(0x0476),
    point(0x0478),point(0x047A),point(0x047C),point(0x047E),point(0x0480),point(0x048A),point(0x048C),point(0x048E),
    point(0x0490),point(0x0492),point(0x0494),point(0x0496),point(0x0498),point(0x049A),point(0x049C),point(0x049E),
    point(0x04A0),point(0x04A2),point(0x04A4),point(0x04A6),point(0x04A8),point(0x04AA),point(0x04AC),point(0x04AE),
    point(0x04B0),point(0x04B2),point(0x04B4),point(0x04B6),point(0x04B8),point(0x04BA),point(0x04BC),point(0x04BE),
    single(0x04C0,0x04C1),point(0x04C3),point(0x04C5),point(0x04C7),point(0x04C9),point(0x04CB),point(0x04CD),point(0x04D0),
    point(0x04D2),point(0x04D4),point(0x04D6),point(0x04D8),point(0x04DA),point(0x04DC),point(0x04DE),point(0x04E0),
    point(0x04E2),point(0x04E4),point(0x04E6),point(0x04E8),point(0x04EA),point(0x04EC),point(0x04EE),point(0x04F0),
    point(0x04F2),point(0x04F4),point(0x04F6),point(0x04F8),point(0x04FA),point(0x04FC),point(0x04FE),point(0x0500),
    point(0x0502),point(0x0504),point(0x0506),point(0x0508),point(0x050A),point(0x050C),point(0x050E),point(0x0510),
    point(0x0512),point(0x0514),point(0x0516),point(0x0518),point(0x051A),point(0x051C),point(0x051E),point(0x0520),
    point(0x0522),point(0x0524),point(0x0526),point(0x0528),point(0x052A),point(0x052C),point(0x052E),single(0x0531,0x0556),
    single(0x10A0,0x10C5),point(0x10C7),point(0x10CD),single(0x13A0,0x13F5),point(0x1C89),single(0x1C90,0x1CBA),single(0x1CBD,0x1CBF),point(0x1E00),
    point(0x1E02),point(0x1E04),point(0x1E06),point(0x1E08),point(0x1E0A),point(0x1E0C),point(0x1E0E),point(0x1E10),
    point(0x1E12),point(0x1E14),point(0x1E16),point(0x1E18),point(0x1E1A),point(0x1E1C),point(0x1E1E),point(0x1E20),
    point(0x1E22),point(0x1E24),point(0x1E26),point(0x1E28),point(0x1E2A),point(0x1E2C),point(0x1E2E),point(0x1E30),
    point(0x1E32),point(0x1E34),point(0x1E36),point(0x1E38),point(0x1E3A),point(0x1E3C),point(0x1E3E),point(0x1E40),
    point(0x1E42),point(0x1E44),point(0x1E46),point(0x1E48),point(0x1E4A),point(0x1E4C),point(0x1E4E),point(0x1E50),
    point(0x1E52),point(0x1E54),point(0x1E56),point(0x1E58),point(0x1E5A),point(0x1E5C),point(0x1E5E),point(0x1E60),
    point(0x1E62),point(0x1E64),point(0x1E66),point(0x1E68),point(0x1E6A),point(0x1E6C),point(0x1E6E),point(0x1E70),
    point(0x1E72),point(0x1E74),point(0x1E76),point(0x1E78),point(0x1E7A),point(0x1E7C),point(0x1E7E),point(0x1E80),
    point(0x1E82),point(0x1E84),point(0x1E86),point(0x1E88),point(0x1E8A),point(0x1E8C),point(0x1E8E),point(0x1E90),
    point(0x1E92),point(0x1E94),point(0x1E9E),point(0x1EA0),point(0x1EA2),point(0x1EA4),point(0x1EA6),point(0x1EA8),
    point(0x1EAA),point(0x1EAC),point(0x1EAE),point(0x1EB0),point(0x1EB2),point(0x1EB4),point(0x1EB6),point(0x1EB8),
    point(0x1EBA),point(0x1EBC),point(0x1EBE),point(0x1EC0),point(0x1EC2),point(0x1EC4),point(0x1EC6),point(0x1EC8),
    point(0x1ECA),point(0x1ECC),point(0x1ECE),point(0x1ED0),point(0x1ED2),point(0x1ED4),point(0x1ED6),point(0x1ED8),
    point(0x1EDA),point(0x1EDC),point(0x1EDE),point(0x1EE0),point(0x1EE2),point(0x1EE4),point(0x1EE6),point(0x1EE8),
    point(0x1EEA),point(0x1EEC),point(0x1EEE),point(0x1EF0),point(0x1EF2),point(0x1EF4),point(0x1EF6),point(0x1EF8),
    point(0x1EFA),point(0x1EFC),point(0x1EFE),single(0x1F08,0x1F0F),single(0x1F18,0x1F1D),single(0x1F28,0x1F2F),single(0x1F38,0x1F3F),single(0x1F48,0x1F4D),
    point(0x1F59),point(0x1F5B),point(0x1F5D),point(0x1F5F),single(0x1F68,0x1F6F),single(0x1FB8,0x1FBB),single(0x1FC8,0x1FCB),single(0x1FD8,0x1FDB),
    single(0x1FE8,0x1FEC),single(0x1FF8,0x1FFB),point(0x2102),point(0x2107),single(0x210B,0x210D),single(0x2110,0x2112),point(0x2115),single(0x2119,0x211D),
    point(0x2124),point(0x2126),point(0x2128),single(0x212A,0x212D),single(0x2130,0x2133),single(0x213E,0x213F),point(0x2145),single(0x2160,0x216F),
    point(0x2183),single(0x24B6,0x24CF),single(0x2C00,0x2C2F),point(0x2C60),single(0x2C62,0x2C64),point(0x2C67),point(0x2C69),point(0x2C6B),
    single(0x2C6D,0x2C70),point(0x2C72),point(0x2C75),single(0x2C7E,0x2C80),point(0x2C82),point(0x2C84),point(0x2C86),point(0x2C88),
    point(0x2C8A),point(0x2C8C),point(0x2C8E),point(0x2C90),point(0x2C92),point(0x2C94),point(0x2C96),point(0x2C98),
    point(0x2C9A),point(0x2C9C),point(0x2C9E),point(0x2CA0),point(0x2CA2),point(0x2CA4),point(0x2CA6),point(0x2CA8),
    point(0x2CAA),point(0x2CAC),point(0x2CAE),point(0x2CB0),point(0x2CB2),point(0x2CB4),point(0x2CB6),point(0x2CB8),
    point(0x2CBA),point(0x2CBC),point(0x2CBE),point(0x2CC0),point(0x2CC2),point(0x2CC4),point(0x2CC6),point(0x2CC8),
    point(0x2CCA),point(0x2CCC),point(0x2CCE),point(0x2CD0),point(0x2CD2),point(0x2CD4),point(0x2CD6),point(0x2CD8),
    point(0x2CDA),point(0x2CDC),point(0x2CDE),point(0x2CE0),point(0x2CE2),point(0x2CEB),point(0x2CED),point(0x2CF2),
    point(0xA640),point(0xA642),point(0xA644),point(0xA646),point(0xA648),point(0xA64A),point(0xA64C),point(0xA64E),
    point(0xA650),point(0xA652),point(0xA654),point(0xA656),point(0xA658),point(0xA65A),point(0xA65C),point(0xA65E),
    point(0xA660),point(0xA662),point(0xA664),point(0xA666),point(0xA668),point(0xA66A),point(0xA66C),point(0xA680),
    point(0xA682),point(0xA684),point(0xA686),point(0xA688),point(0xA68A),point(0xA68C),point(0xA68E),point(0xA690),
    point(0xA692),point(0xA694),point(0xA696),point(0xA698),point(0xA69A),point(0xA722),point(0xA724),point(0xA726),
    point(0xA728),point(0xA72A),point(0xA72C),point(0xA72E),point(0xA732),point(0xA734),point(0xA736),point(0xA738),
    point(0xA73A),point(0xA73C),point(0xA73E),point(0xA740),point(0xA742),point(0xA744),point(0xA746),point(0xA748),
    point(0xA74A),point(0xA74C),point(0xA74E),point(0xA750),point(0xA752),point(0xA754),point(0xA756),point(0xA758),
    point(0xA75A),point(0xA75C),point(0xA75E),point(0xA760),point(0xA762),point(0xA764),point(0xA766),point(0xA768),
    point(0xA76A),point(0xA76C),point(0xA76E),point(0xA779),point(0xA77B),single(0xA77D,0xA77E),point(0xA780),point(0xA782),
    point(0xA784),point(0xA786),point(0xA78B),point(0xA78D),point(0xA790),point(0xA792),point(0xA796),point(0xA798),
    point(0xA79A),point(0xA79C),point(0xA79E),point(0xA7A0),point(0xA7A2),point(0xA7A4),point(0xA7A6),point(0xA7A8),
    single(0xA7AA,0xA7AE),single(0xA7B0,0xA7B4),point(0xA7B6),point(0xA7B8),point(0xA7BA),point(0xA7BC),point(0xA7BE),point(0xA7C0),
    point(0xA7C2),single(0xA7C4,0xA7C7),point(0xA7C9),single(0xA7CB,0xA7CC),point(0xA7D0),point(0xA7D6),point(0xA7D8),point(0xA7DA),
    point(0xA7DC),point(0xA7F5),single(0xFF21,0xFF3A),single(0x10400,0x10427),single(0x104B0,0x104D3),single(0x10570,0x1057A),single(0x1057C,0x1058A),single(0x1058C,0x10592),
    single(0x10594,0x10595),single(0x10C80,0x10CB2),single(0x10D50,0x10D65),single(0x118A0,0x118BF),single(0x16E40,0x16E5F),single(0x1D400,0x1D419),single(0x1D434,0x1D44D),single(0x1D468,0x1D481),
    point(0x1D49C),single(0x1D49E,0x1D49F),point(0x1D4A2),single(0x1D4A5,0x1D4A6),single(0x1D4A9,0x1D4AC),single(0x1D4AE,0x1D4B5),single(0x1D4D0,0x1D4E9),single(0x1D504,0x1D505),
    single(0x1D507,0x1D50A),single(0x1D50D,0x1D514),single(0x1D516,0x1D51C),single(0x1D538,0x1D539),single(0x1D53B,0x1D53E),single(0x1D540,0x1D544),point(0x1D546),single(0x1D54A,0x1D550),
    single(0x1D56C,0x1D585),single(0x1D5A0,0x1D5B9),single(0x1D5D4,0x1D5ED),single(0x1D608,0x1D621),single(0x1D63C,0x1D655),single(0x1D670,0x1D689),single(0x1D6A8,0x1D6C0),single(0x1D6E2,0x1D6FA),
    single(0x1D71C,0x1D734),single(0x1D756,0x1D76E),single(0x1D790,0x1D7A8),point(0x1D7CA),single(0x1E900,0x1E921),single(0x1F130,0x1F149),single(0x1F150,0x1F169),single(0x1F170,0x1F189),
  ])
}


//--------------------------------------------------------------
// Range trees
//--------------------------------------------------------------

// Type of range trees
type rtree {
  Tip
  Bin( lo : int, hi : int, left : rtree, right : rtree )
}

// Is a value contained in a range tree?
fun contains( t : rtree, i : int ) : bool {
  match(t) {
    Tip -> True
    Bin(lo,hi,l,r) -> {
      if (i < lo || i > hi)
       then False
       else l.contains(i) || r.contains(i)
    }
  }
}

fun build-rtree( xs : list<rtree> ) : rtree {
  xs.combine
}

fun single(lo: int ,hi: int): rtree {
  Bin(lo,hi,Tip,Tip)
}

fun point(v: int): rtree  {
  Bin(v,v,Tip,Tip)
}

fun bin(x: rtree ,y: rtree ): rtree  {
  match((x,y)) {
    (Bin(xlo,xhi),Bin(ylo,yhi)) -> Bin(min(xlo,ylo),max(xhi,yhi),x,y)
    (Tip,_) -> y
    _ -> x
  }
}

fun combine( xs : list<rtree> ) : rtree {
  match (combine-pairs(xs)) {
    Nil         -> Tip
    Cons(x,Nil) -> x
    ys          -> combine(pretend-decreasing(ys))
  }
}

fun combine-pairs( xs : list<rtree> ) : list<rtree> {
  match(xs) {
    Cons(x,Cons(y,rest)) -> Cons( bin(x,y), combine-pairs(rest) )
    _ -> xs
  }
}
