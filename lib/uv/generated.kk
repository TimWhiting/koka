// Copyright (c) 2024, the Koka authors. All rights reserved. 
// Use of this source code is governed by a
// MIT-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
// 
// Generated by `ffigen`.

import std/core/cextern
import std/num/int32
import std/num/int64
import std/num/float64

extern import
  c { vcpkg="libuv" }

extern import
  c header-file "third-party/uv.h"

pub extern external/uv-version(): int32
  c inline "(unsigned int)uv_version()"

pub inline fun ffi/uv-version(): <> int
  external/uv-version().int

pub extern external/uv-version-string(): c-pointer<int>
  c inline "(intptr_t)uv_version_string()"

pub extern external/uv-library-shutdown(): ()
  c inline "(void)uv_library_shutdown()"

pub extern external/uv-replace-allocator(^malloc-func: c-pointer<intptr_t>, ^realloc-func: c-pointer<intptr_t>, ^calloc-func: c-pointer<intptr_t>, ^free-func: c-pointer<intptr_t>): int32
  c inline "(int)uv_replace_allocator((uv_malloc_func)#1, (uv_realloc_func)#2, (uv_calloc_func)#3, (uv_free_func)#4)"

pub inline fun ffi/uv-replace-allocator(^malloc-func: uv-malloc-func, ^realloc-func: uv-realloc-func, ^calloc-func: uv-calloc-func, ^free-func: uv-free-func): <> int
  external/uv-replace-allocator(malloc-func, realloc-func, calloc-func, free-func).int

pub extern external/uv-default-loop(): c-pointer<uv-loop-s-c>
  c inline "(intptr_t)uv_default_loop()"

pub extern external/uv-loop-init(^loop: c-pointer<uv-loop-s-c>): int32
  c inline "(int)uv_loop_init((uv_loop_t*)#1)"

pub inline fun ffi/uv-loop-init(^loop: c-pointer<uv-loop-s-c>): <> int
  external/uv-loop-init(loop).int

pub extern external/uv-loop-close(^loop: c-pointer<uv-loop-s-c>): int32
  c inline "(int)uv_loop_close((uv_loop_t*)#1)"

pub inline fun ffi/uv-loop-close(^loop: c-pointer<uv-loop-s-c>): <> int
  external/uv-loop-close(loop).int

pub extern external/uv-loop-new(): c-pointer<uv-loop-s-c>
  c inline "(intptr_t)uv_loop_new()"

pub extern external/uv-loop-delete(^arg0: c-pointer<uv-loop-s-c>): ()
  c inline "(void)uv_loop_delete((uv_loop_t*)#1)"

pub extern external/uv-loop-size(): ssize_t
  c inline "(size_t)uv_loop_size()"

pub inline fun ffi/uv-loop-size(): <> int
  external/uv-loop-size().int

pub extern external/uv-loop-alive(^loop: c-pointer<uv-loop-s-c>): int32
  c inline "(int)uv_loop_alive((uv_loop_t*)#1)"

pub inline fun ffi/uv-loop-alive(^loop: c-pointer<uv-loop-s-c>): <> int
  external/uv-loop-alive(loop).int

pub extern external/uv-loop-configure(^loop: c-pointer<uv-loop-s-c>, ^option: int32): int32
  c inline "(int)uv_loop_configure((uv_loop_t*)#1, (int32_t)#2)"

pub inline fun ffi/uv-loop-configure(^loop: c-pointer<uv-loop-s-c>, ^option: uv-loop-option-enum): <exn> int
  external/uv-loop-configure(loop, option.uv-loop-option-enum/int).int

pub extern external/uv-loop-fork(^loop: c-pointer<uv-loop-s-c>): int32
  c inline "(int)uv_loop_fork((uv_loop_t*)#1)"

pub inline fun ffi/uv-loop-fork(^loop: c-pointer<uv-loop-s-c>): <> int
  external/uv-loop-fork(loop).int

pub extern external/uv-run(^arg0: c-pointer<uv-loop-s-c>, ^mode: int32): int32
  c inline "(int)uv_run((uv_loop_t*)#1, (int32_t)#2)"

pub inline fun ffi/uv-run(^arg0: c-pointer<uv-loop-s-c>, ^mode: uv-run-mode-enum): <exn> int
  external/uv-run(arg0, mode.uv-run-mode-enum/int).int

pub extern external/uv-stop(^arg0: c-pointer<uv-loop-s-c>): ()
  c inline "(void)uv_stop((uv_loop_t*)#1)"

pub extern external/uv-ref(^arg0: c-pointer<uv-handle-s-c>): ()
  c inline "(void)uv_ref((uv_handle_t*)#1)"

pub extern external/uv-unref(^arg0: c-pointer<uv-handle-s-c>): ()
  c inline "(void)uv_unref((uv_handle_t*)#1)"

pub extern external/uv-has-ref(^arg0: c-pointer<uv-handle-s-c>): int32
  c inline "(int)uv_has_ref((uv_handle_t*)#1)"

pub inline fun ffi/uv-has-ref(^arg0: c-pointer<uv-handle-s-c>): <> int
  external/uv-has-ref(arg0).int

pub extern external/uv-update-time(^arg0: c-pointer<uv-loop-s-c>): ()
  c inline "(void)uv_update_time((uv_loop_t*)#1)"

pub extern external/uv-now(^arg0: c-pointer<uv-loop-s-c>): int64
  c inline "(int64_t)uv_now((uv_loop_t*)#1)"

pub inline fun ffi/uv-now(^arg0: c-pointer<uv-loop-s-c>): <> int
  external/uv-now(arg0).int

pub extern external/uv-backend-fd(^arg0: c-pointer<uv-loop-s-c>): int32
  c inline "(int)uv_backend_fd((uv_loop_t*)#1)"

pub inline fun ffi/uv-backend-fd(^arg0: c-pointer<uv-loop-s-c>): <> int
  external/uv-backend-fd(arg0).int

pub extern external/uv-backend-timeout(^arg0: c-pointer<uv-loop-s-c>): int32
  c inline "(int)uv_backend_timeout((uv_loop_t*)#1)"

pub inline fun ffi/uv-backend-timeout(^arg0: c-pointer<uv-loop-s-c>): <> int
  external/uv-backend-timeout(arg0).int

pub extern external/uv-translate-sys-error(^sys-errno: int32): int32
  c inline "(int)uv_translate_sys_error((int)#1)"

pub inline fun ffi/uv-translate-sys-error(^sys-errno: int): <> int
  external/uv-translate-sys-error(sys-errno.int32).int

pub extern external/uv-strerror(^err: int32): c-pointer<int>
  c inline "(intptr_t)uv_strerror((int)#1)"

pub inline fun ffi/uv-strerror(^err: int): <> c-pointer<int>
  external/uv-strerror(err.int32)

pub extern external/uv-strerror-r(^err: int32, ^buf: c-pointer<int>, ^buflen: ssize_t): c-pointer<int>
  c inline "(intptr_t)uv_strerror_r((int)#1, (char*)#2, (size_t)#3)"

pub inline fun ffi/uv-strerror-r(^err: int, ^buf: c-pointer<int>, ^buflen: int): <> c-pointer<int>
  external/uv-strerror-r(err.int32, buf, buflen.ssize_t)

pub extern external/uv-err-name(^err: int32): c-pointer<int>
  c inline "(intptr_t)uv_err_name((int)#1)"

pub inline fun ffi/uv-err-name(^err: int): <> c-pointer<int>
  external/uv-err-name(err.int32)

pub extern external/uv-err-name-r(^err: int32, ^buf: c-pointer<int>, ^buflen: ssize_t): c-pointer<int>
  c inline "(intptr_t)uv_err_name_r((int)#1, (char*)#2, (size_t)#3)"

pub inline fun ffi/uv-err-name-r(^err: int, ^buf: c-pointer<int>, ^buflen: int): <> c-pointer<int>
  external/uv-err-name-r(err.int32, buf, buflen.ssize_t)

pub extern external/uv-shutdown(^req: c-pointer<uv-shutdown-s-c>, ^handle1: c-pointer<uv-stream-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_shutdown((uv_shutdown_t*)#1, (uv_stream_t*)#2, (uv_shutdown_cb)#3)"

pub inline fun ffi/uv-shutdown(^req: c-pointer<uv-shutdown-s-c>, ^handle1: c-pointer<uv-stream-s-c>, ^cb: uv-shutdown-cb): <> int
  external/uv-shutdown(req, handle1, cb).int

pub extern external/uv-handle-size(^type1: int32): ssize_t
  c inline "(size_t)uv_handle_size((int32_t)#1)"

pub inline fun ffi/uv-handle-size(^type1: uv-handle-type-enum): <exn> int
  external/uv-handle-size(type1.uv-handle-type-enum/int).int

pub extern external/uv-handle-get-type(^handle1: c-pointer<uv-handle-s-c>): int32
  c inline "(int32_t)uv_handle_get_type((uv_handle_t*)#1)"

pub inline fun ffi/uv-handle-get-type(^handle1: c-pointer<uv-handle-s-c>): <exn> uv-handle-type-enum
  external/uv-handle-get-type(handle1).int/uv-handle-type-enum

pub extern external/uv-handle-type-name(^type1: int32): c-pointer<int>
  c inline "(intptr_t)uv_handle_type_name((int32_t)#1)"

pub inline fun ffi/uv-handle-type-name(^type1: uv-handle-type-enum): <exn> c-pointer<int>
  external/uv-handle-type-name(type1.uv-handle-type-enum/int)

pub extern external/uv-handle-get-data(^handle1: c-pointer<uv-handle-s-c>): c-pointer<()>
  c inline "(intptr_t)uv_handle_get_data((uv_handle_t*)#1)"

pub extern external/uv-handle-get-loop(^handle1: c-pointer<uv-handle-s-c>): c-pointer<uv-loop-s-c>
  c inline "(intptr_t)uv_handle_get_loop((uv_handle_t*)#1)"

pub extern external/uv-handle-set-data(^handle1: c-pointer<uv-handle-s-c>, ^data: c-pointer<()>): ()
  c inline "(void)uv_handle_set_data((uv_handle_t*)#1, (void*)#2)"

pub extern external/uv-req-size(^type1: int32): ssize_t
  c inline "(size_t)uv_req_size((int32_t)#1)"

pub inline fun ffi/uv-req-size(^type1: uv-req-type-enum): <exn> int
  external/uv-req-size(type1.uv-req-type-enum/int).int

pub extern external/uv-req-get-data(^req: c-pointer<uv-req-s-c>): c-pointer<()>
  c inline "(intptr_t)uv_req_get_data((uv_req_t*)#1)"

pub extern external/uv-req-set-data(^req: c-pointer<uv-req-s-c>, ^data: c-pointer<()>): ()
  c inline "(void)uv_req_set_data((uv_req_t*)#1, (void*)#2)"

pub extern external/uv-req-get-type(^req: c-pointer<uv-req-s-c>): int32
  c inline "(int32_t)uv_req_get_type((uv_req_t*)#1)"

pub inline fun ffi/uv-req-get-type(^req: c-pointer<uv-req-s-c>): <exn> uv-req-type-enum
  external/uv-req-get-type(req).int/uv-req-type-enum

pub extern external/uv-req-type-name(^type1: int32): c-pointer<int>
  c inline "(intptr_t)uv_req_type_name((int32_t)#1)"

pub inline fun ffi/uv-req-type-name(^type1: uv-req-type-enum): <exn> c-pointer<int>
  external/uv-req-type-name(type1.uv-req-type-enum/int)

pub extern external/uv-is-active(^handle1: c-pointer<uv-handle-s-c>): int32
  c inline "(int)uv_is_active((uv_handle_t*)#1)"

pub inline fun ffi/uv-is-active(^handle1: c-pointer<uv-handle-s-c>): <> int
  external/uv-is-active(handle1).int

pub extern external/uv-walk(^loop: c-pointer<uv-loop-s-c>, ^walk-cb: c-pointer<intptr_t>, ^arg: c-pointer<()>): ()
  c inline "(void)uv_walk((uv_loop_t*)#1, (uv_walk_cb)#2, (void*)#3)"

pub extern external/uv-print-all-handles(^loop: c-pointer<uv-loop-s-c>, ^stream: c-pointer<io-file-c>): ()
  c inline "(void)uv_print_all_handles((uv_loop_t*)#1, (FILE*)#2)"

pub extern external/uv-print-active-handles(^loop: c-pointer<uv-loop-s-c>, ^stream: c-pointer<io-file-c>): ()
  c inline "(void)uv_print_active_handles((uv_loop_t*)#1, (FILE*)#2)"

pub extern external/uv-close(^handle1: c-pointer<uv-handle-s-c>, ^close-cb: c-pointer<intptr_t>): ()
  c inline "(void)uv_close((uv_handle_t*)#1, (uv_close_cb)#2)"

pub extern external/uv-send-buffer-size(^handle1: c-pointer<uv-handle-s-c>, ^value: c-pointer<int>): int32
  c inline "(int)uv_send_buffer_size((uv_handle_t*)#1, (int*)#2)"

pub inline fun ffi/uv-send-buffer-size(^handle1: c-pointer<uv-handle-s-c>, ^value: c-pointer<int>): <> int
  external/uv-send-buffer-size(handle1, value).int

pub extern external/uv-recv-buffer-size(^handle1: c-pointer<uv-handle-s-c>, ^value: c-pointer<int>): int32
  c inline "(int)uv_recv_buffer_size((uv_handle_t*)#1, (int*)#2)"

pub inline fun ffi/uv-recv-buffer-size(^handle1: c-pointer<uv-handle-s-c>, ^value: c-pointer<int>): <> int
  external/uv-recv-buffer-size(handle1, value).int

pub extern external/uv-fileno(^handle1: c-pointer<uv-handle-s-c>, ^fd: c-pointer<int>): int32
  c inline "(int)uv_fileno((uv_handle_t*)#1, (uv_os_fd_t*)#2)"

pub inline fun ffi/uv-fileno(^handle1: c-pointer<uv-handle-s-c>, ^fd: c-pointer<int>): <> int
  external/uv-fileno(handle1, fd).int

pub extern external/uv-buf-init(^base: c-pointer<int>, ^len: int32): c-pointer<uv-buf-t-c>
  c inline "struct uv_buf_t* _s = kk_malloc(sizeof(struct uv_buf_t), kk_context());\n*_s = uv_buf_init((char*)#1, (unsigned int)#2);\n(intptr_t)_s"

pub inline fun ffi/uv-buf-init(^base: c-pointer<int>, ^len: int): <> c-pointer<uv-buf-t-c>
  external/uv-buf-init(base, len.int32)

pub extern external/uv-pipe(^fds: c-pointer<int>, ^read-flags: int32, ^write-flags: int32): int32
  c inline "(int)uv_pipe((uv_file*)#1, (int)#2, (int)#3)"

pub inline fun ffi/uv-pipe(^fds: c-array<int>, ^read-flags: int, ^write-flags: int): <> int
  external/uv-pipe(fds.cextern/carray/ptr, read-flags.int32, write-flags.int32).int

pub extern external/uv-socketpair(^type1: int32, ^protocol: int32, ^socket-vector: c-pointer<int>, ^flags0: int32, ^flags1: int32): int32
  c inline "(int)uv_socketpair((int)#1, (int)#2, (uv_os_sock_t*)#3, (int)#4, (int)#5)"

pub inline fun ffi/uv-socketpair(^type1: int, ^protocol: int, ^socket-vector: c-array<int>, ^flags0: int, ^flags1: int): <> int
  external/uv-socketpair(type1.int32, protocol.int32, socket-vector.cextern/carray/ptr, flags0.int32, flags1.int32).int

pub extern external/uv-stream-get-write-queue-size(^stream: c-pointer<uv-stream-s-c>): ssize_t
  c inline "(size_t)uv_stream_get_write_queue_size((uv_stream_t*)#1)"

pub inline fun ffi/uv-stream-get-write-queue-size(^stream: c-pointer<uv-stream-s-c>): <> int
  external/uv-stream-get-write-queue-size(stream).int

pub extern external/uv-listen(^stream: c-pointer<uv-stream-s-c>, ^backlog: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_listen((uv_stream_t*)#1, (int)#2, (uv_connection_cb)#3)"

pub inline fun ffi/uv-listen(^stream: c-pointer<uv-stream-s-c>, ^backlog: int, ^cb: uv-connection-cb): <> int
  external/uv-listen(stream, backlog.int32, cb).int

pub extern external/uv-accept(^server: c-pointer<uv-stream-s-c>, ^client: c-pointer<uv-stream-s-c>): int32
  c inline "(int)uv_accept((uv_stream_t*)#1, (uv_stream_t*)#2)"

pub inline fun ffi/uv-accept(^server: c-pointer<uv-stream-s-c>, ^client: c-pointer<uv-stream-s-c>): <> int
  external/uv-accept(server, client).int

pub extern external/uv-read-start(^arg0: c-pointer<uv-stream-s-c>, ^alloc-cb: c-pointer<intptr_t>, ^read-cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_read_start((uv_stream_t*)#1, (uv_alloc_cb)#2, (uv_read_cb)#3)"

pub inline fun ffi/uv-read-start(^arg0: c-pointer<uv-stream-s-c>, ^alloc-cb: uv-alloc-cb, ^read-cb: uv-read-cb): <> int
  external/uv-read-start(arg0, alloc-cb, read-cb).int

pub extern external/uv-read-stop(^arg0: c-pointer<uv-stream-s-c>): int32
  c inline "(int)uv_read_stop((uv_stream_t*)#1)"

pub inline fun ffi/uv-read-stop(^arg0: c-pointer<uv-stream-s-c>): <> int
  external/uv-read-stop(arg0).int

pub extern external/uv-write(^req: c-pointer<uv-write-s-c>, ^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_write((uv_write_t*)#1, (uv_stream_t*)#2, (struct uv_buf_t*)#3, (unsigned int)#4, (uv_write_cb)#5)"

pub inline fun ffi/uv-write(^req: c-pointer<uv-write-s-c>, ^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^cb: uv-write-cb): <> int
  external/uv-write(req, handle1, bufs.cextern/carray/ptr, nbufs.int32, cb).int

pub extern external/uv-write2(^req: c-pointer<uv-write-s-c>, ^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^send-handle: c-pointer<uv-stream-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_write2((uv_write_t*)#1, (uv_stream_t*)#2, (struct uv_buf_t*)#3, (unsigned int)#4, (uv_stream_t*)#5, (uv_write_cb)#6)"

pub inline fun ffi/uv-write2(^req: c-pointer<uv-write-s-c>, ^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^send-handle: c-pointer<uv-stream-s-c>, ^cb: uv-write-cb): <> int
  external/uv-write2(req, handle1, bufs.cextern/carray/ptr, nbufs.int32, send-handle, cb).int

pub extern external/uv-try-write(^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32): int32
  c inline "(int)uv_try_write((uv_stream_t*)#1, (struct uv_buf_t*)#2, (unsigned int)#3)"

pub inline fun ffi/uv-try-write(^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int): <> int
  external/uv-try-write(handle1, bufs.cextern/carray/ptr, nbufs.int32).int

pub extern external/uv-try-write2(^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^send-handle: c-pointer<uv-stream-s-c>): int32
  c inline "(int)uv_try_write2((uv_stream_t*)#1, (struct uv_buf_t*)#2, (unsigned int)#3, (uv_stream_t*)#4)"

pub inline fun ffi/uv-try-write2(^handle1: c-pointer<uv-stream-s-c>, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^send-handle: c-pointer<uv-stream-s-c>): <> int
  external/uv-try-write2(handle1, bufs.cextern/carray/ptr, nbufs.int32, send-handle).int

pub extern external/uv-is-readable(^handle1: c-pointer<uv-stream-s-c>): int32
  c inline "(int)uv_is_readable((uv_stream_t*)#1)"

pub inline fun ffi/uv-is-readable(^handle1: c-pointer<uv-stream-s-c>): <> int
  external/uv-is-readable(handle1).int

pub extern external/uv-is-writable(^handle1: c-pointer<uv-stream-s-c>): int32
  c inline "(int)uv_is_writable((uv_stream_t*)#1)"

pub inline fun ffi/uv-is-writable(^handle1: c-pointer<uv-stream-s-c>): <> int
  external/uv-is-writable(handle1).int

pub extern external/uv-stream-set-blocking(^handle1: c-pointer<uv-stream-s-c>, ^blocking: int32): int32
  c inline "(int)uv_stream_set_blocking((uv_stream_t*)#1, (int)#2)"

pub inline fun ffi/uv-stream-set-blocking(^handle1: c-pointer<uv-stream-s-c>, ^blocking: int): <> int
  external/uv-stream-set-blocking(handle1, blocking.int32).int

pub extern external/uv-is-closing(^handle1: c-pointer<uv-handle-s-c>): int32
  c inline "(int)uv_is_closing((uv_handle_t*)#1)"

pub inline fun ffi/uv-is-closing(^handle1: c-pointer<uv-handle-s-c>): <> int
  external/uv-is-closing(handle1).int

pub extern external/uv-tcp-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-tcp-s-c>): int32
  c inline "(int)uv_tcp_init((uv_loop_t*)#1, (uv_tcp_t*)#2)"

pub inline fun ffi/uv-tcp-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-tcp-s-c>): <> int
  external/uv-tcp-init(arg0, handle1).int

pub extern external/uv-tcp-init-ex(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-tcp-s-c>, ^flags: int32): int32
  c inline "(int)uv_tcp_init_ex((uv_loop_t*)#1, (uv_tcp_t*)#2, (unsigned int)#3)"

pub inline fun ffi/uv-tcp-init-ex(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-tcp-s-c>, ^flags: int): <> int
  external/uv-tcp-init-ex(arg0, handle1, flags.int32).int

pub extern external/uv-tcp-open(^handle1: c-pointer<uv-tcp-s-c>, ^sock: int32): int32
  c inline "(int)uv_tcp_open((uv_tcp_t*)#1, (uv_os_sock_t)#2)"

pub inline fun ffi/uv-tcp-open(^handle1: c-pointer<uv-tcp-s-c>, ^sock: int): <> int
  external/uv-tcp-open(handle1, sock.int32).int

pub extern external/uv-tcp-nodelay(^handle1: c-pointer<uv-tcp-s-c>, ^enable: int32): int32
  c inline "(int)uv_tcp_nodelay((uv_tcp_t*)#1, (int)#2)"

pub inline fun ffi/uv-tcp-nodelay(^handle1: c-pointer<uv-tcp-s-c>, ^enable: int): <> int
  external/uv-tcp-nodelay(handle1, enable.int32).int

pub extern external/uv-tcp-keepalive(^handle1: c-pointer<uv-tcp-s-c>, ^enable: int32, ^delay: int32): int32
  c inline "(int)uv_tcp_keepalive((uv_tcp_t*)#1, (int)#2, (unsigned int)#3)"

pub inline fun ffi/uv-tcp-keepalive(^handle1: c-pointer<uv-tcp-s-c>, ^enable: int, ^delay: int): <> int
  external/uv-tcp-keepalive(handle1, enable.int32, delay.int32).int

pub extern external/uv-tcp-simultaneous-accepts(^handle1: c-pointer<uv-tcp-s-c>, ^enable: int32): int32
  c inline "(int)uv_tcp_simultaneous_accepts((uv_tcp_t*)#1, (int)#2)"

pub inline fun ffi/uv-tcp-simultaneous-accepts(^handle1: c-pointer<uv-tcp-s-c>, ^enable: int): <> int
  external/uv-tcp-simultaneous-accepts(handle1, enable.int32).int

pub extern external/uv-tcp-bind(^handle1: c-pointer<uv-tcp-s-c>, ^addr: c-pointer<sockaddr-c>, ^flags: int32): int32
  c inline "(int)uv_tcp_bind((uv_tcp_t*)#1, (struct sockaddr*)#2, (unsigned int)#3)"

pub inline fun ffi/uv-tcp-bind(^handle1: c-pointer<uv-tcp-s-c>, ^addr: c-pointer<sockaddr-c>, ^flags: int): <> int
  external/uv-tcp-bind(handle1, addr, flags.int32).int

pub extern external/uv-tcp-getsockname(^handle1: c-pointer<uv-tcp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): int32
  c inline "(int)uv_tcp_getsockname((uv_tcp_t*)#1, (struct sockaddr*)#2, (int*)#3)"

pub inline fun ffi/uv-tcp-getsockname(^handle1: c-pointer<uv-tcp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): <> int
  external/uv-tcp-getsockname(handle1, name, namelen).int

pub extern external/uv-tcp-getpeername(^handle1: c-pointer<uv-tcp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): int32
  c inline "(int)uv_tcp_getpeername((uv_tcp_t*)#1, (struct sockaddr*)#2, (int*)#3)"

pub inline fun ffi/uv-tcp-getpeername(^handle1: c-pointer<uv-tcp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): <> int
  external/uv-tcp-getpeername(handle1, name, namelen).int

pub extern external/uv-tcp-close-reset(^handle1: c-pointer<uv-tcp-s-c>, ^close-cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_tcp_close_reset((uv_tcp_t*)#1, (uv_close_cb)#2)"

pub inline fun ffi/uv-tcp-close-reset(^handle1: c-pointer<uv-tcp-s-c>, ^close-cb: uv-close-cb): <> int
  external/uv-tcp-close-reset(handle1, close-cb).int

pub extern external/uv-tcp-connect(^req: c-pointer<uv-connect-s-c>, ^handle1: c-pointer<uv-tcp-s-c>, ^addr: c-pointer<sockaddr-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_tcp_connect((uv_connect_t*)#1, (uv_tcp_t*)#2, (struct sockaddr*)#3, (uv_connect_cb)#4)"

pub inline fun ffi/uv-tcp-connect(^req: c-pointer<uv-connect-s-c>, ^handle1: c-pointer<uv-tcp-s-c>, ^addr: c-pointer<sockaddr-c>, ^cb: uv-connect-cb): <> int
  external/uv-tcp-connect(req, handle1, addr, cb).int

pub extern external/uv-udp-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-udp-s-c>): int32
  c inline "(int)uv_udp_init((uv_loop_t*)#1, (uv_udp_t*)#2)"

pub inline fun ffi/uv-udp-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-udp-s-c>): <> int
  external/uv-udp-init(arg0, handle1).int

pub extern external/uv-udp-init-ex(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-udp-s-c>, ^flags: int32): int32
  c inline "(int)uv_udp_init_ex((uv_loop_t*)#1, (uv_udp_t*)#2, (unsigned int)#3)"

pub inline fun ffi/uv-udp-init-ex(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-udp-s-c>, ^flags: int): <> int
  external/uv-udp-init-ex(arg0, handle1, flags.int32).int

pub extern external/uv-udp-open(^handle1: c-pointer<uv-udp-s-c>, ^sock: int32): int32
  c inline "(int)uv_udp_open((uv_udp_t*)#1, (uv_os_sock_t)#2)"

pub inline fun ffi/uv-udp-open(^handle1: c-pointer<uv-udp-s-c>, ^sock: int): <> int
  external/uv-udp-open(handle1, sock.int32).int

pub extern external/uv-udp-bind(^handle1: c-pointer<uv-udp-s-c>, ^addr: c-pointer<sockaddr-c>, ^flags: int32): int32
  c inline "(int)uv_udp_bind((uv_udp_t*)#1, (struct sockaddr*)#2, (unsigned int)#3)"

pub inline fun ffi/uv-udp-bind(^handle1: c-pointer<uv-udp-s-c>, ^addr: c-pointer<sockaddr-c>, ^flags: int): <> int
  external/uv-udp-bind(handle1, addr, flags.int32).int

pub extern external/uv-udp-connect(^handle1: c-pointer<uv-udp-s-c>, ^addr: c-pointer<sockaddr-c>): int32
  c inline "(int)uv_udp_connect((uv_udp_t*)#1, (struct sockaddr*)#2)"

pub inline fun ffi/uv-udp-connect(^handle1: c-pointer<uv-udp-s-c>, ^addr: c-pointer<sockaddr-c>): <> int
  external/uv-udp-connect(handle1, addr).int

pub extern external/uv-udp-getpeername(^handle1: c-pointer<uv-udp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): int32
  c inline "(int)uv_udp_getpeername((uv_udp_t*)#1, (struct sockaddr*)#2, (int*)#3)"

pub inline fun ffi/uv-udp-getpeername(^handle1: c-pointer<uv-udp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): <> int
  external/uv-udp-getpeername(handle1, name, namelen).int

pub extern external/uv-udp-getsockname(^handle1: c-pointer<uv-udp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): int32
  c inline "(int)uv_udp_getsockname((uv_udp_t*)#1, (struct sockaddr*)#2, (int*)#3)"

pub inline fun ffi/uv-udp-getsockname(^handle1: c-pointer<uv-udp-s-c>, ^name: c-pointer<sockaddr-c>, ^namelen: c-pointer<int>): <> int
  external/uv-udp-getsockname(handle1, name, namelen).int

pub extern external/uv-udp-set-membership(^handle1: c-pointer<uv-udp-s-c>, ^multicast-addr: c-pointer<int>, ^interface-addr: c-pointer<int>, ^membership: int32): int32
  c inline "(int)uv_udp_set_membership((uv_udp_t*)#1, (char*)#2, (char*)#3, (int32_t)#4)"

pub inline fun ffi/uv-udp-set-membership(^handle1: c-pointer<uv-udp-s-c>, ^multicast-addr: c-pointer<int>, ^interface-addr: c-pointer<int>, ^membership: uv-membership-enum): <exn> int
  external/uv-udp-set-membership(handle1, multicast-addr, interface-addr, membership.uv-membership-enum/int).int

pub extern external/uv-udp-set-source-membership(^handle1: c-pointer<uv-udp-s-c>, ^multicast-addr: c-pointer<int>, ^interface-addr: c-pointer<int>, ^source-addr: c-pointer<int>, ^membership: int32): int32
  c inline "(int)uv_udp_set_source_membership((uv_udp_t*)#1, (char*)#2, (char*)#3, (char*)#4, (int32_t)#5)"

pub inline fun ffi/uv-udp-set-source-membership(^handle1: c-pointer<uv-udp-s-c>, ^multicast-addr: c-pointer<int>, ^interface-addr: c-pointer<int>, ^source-addr: c-pointer<int>, ^membership: uv-membership-enum): <exn> int
  external/uv-udp-set-source-membership(handle1, multicast-addr, interface-addr, source-addr, membership.uv-membership-enum/int).int

pub extern external/uv-udp-set-multicast-loop(^handle1: c-pointer<uv-udp-s-c>, ^on1: int32): int32
  c inline "(int)uv_udp_set_multicast_loop((uv_udp_t*)#1, (int)#2)"

pub inline fun ffi/uv-udp-set-multicast-loop(^handle1: c-pointer<uv-udp-s-c>, ^on1: int): <> int
  external/uv-udp-set-multicast-loop(handle1, on1.int32).int

pub extern external/uv-udp-set-multicast-ttl(^handle1: c-pointer<uv-udp-s-c>, ^ttl: int32): int32
  c inline "(int)uv_udp_set_multicast_ttl((uv_udp_t*)#1, (int)#2)"

pub inline fun ffi/uv-udp-set-multicast-ttl(^handle1: c-pointer<uv-udp-s-c>, ^ttl: int): <> int
  external/uv-udp-set-multicast-ttl(handle1, ttl.int32).int

pub extern external/uv-udp-set-multicast-interface(^handle1: c-pointer<uv-udp-s-c>, ^interface-addr: c-pointer<int>): int32
  c inline "(int)uv_udp_set_multicast_interface((uv_udp_t*)#1, (char*)#2)"

pub inline fun ffi/uv-udp-set-multicast-interface(^handle1: c-pointer<uv-udp-s-c>, ^interface-addr: c-pointer<int>): <> int
  external/uv-udp-set-multicast-interface(handle1, interface-addr).int

pub extern external/uv-udp-set-broadcast(^handle1: c-pointer<uv-udp-s-c>, ^on1: int32): int32
  c inline "(int)uv_udp_set_broadcast((uv_udp_t*)#1, (int)#2)"

pub inline fun ffi/uv-udp-set-broadcast(^handle1: c-pointer<uv-udp-s-c>, ^on1: int): <> int
  external/uv-udp-set-broadcast(handle1, on1.int32).int

pub extern external/uv-udp-set-ttl(^handle1: c-pointer<uv-udp-s-c>, ^ttl: int32): int32
  c inline "(int)uv_udp_set_ttl((uv_udp_t*)#1, (int)#2)"

pub inline fun ffi/uv-udp-set-ttl(^handle1: c-pointer<uv-udp-s-c>, ^ttl: int): <> int
  external/uv-udp-set-ttl(handle1, ttl.int32).int

pub extern external/uv-udp-send(^req: c-pointer<uv-udp-send-s-c>, ^handle1: c-pointer<uv-udp-s-c>, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^addr: c-pointer<sockaddr-c>, ^send-cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_udp_send((uv_udp_send_t*)#1, (uv_udp_t*)#2, (struct uv_buf_t*)#3, (unsigned int)#4, (struct sockaddr*)#5, (uv_udp_send_cb)#6)"

pub inline fun ffi/uv-udp-send(^req: c-pointer<uv-udp-send-s-c>, ^handle1: c-pointer<uv-udp-s-c>, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^addr: c-pointer<sockaddr-c>, ^send-cb: uv-udp-send-cb): <> int
  external/uv-udp-send(req, handle1, bufs.cextern/carray/ptr, nbufs.int32, addr, send-cb).int

pub extern external/uv-udp-try-send(^handle1: c-pointer<uv-udp-s-c>, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^addr: c-pointer<sockaddr-c>): int32
  c inline "(int)uv_udp_try_send((uv_udp_t*)#1, (struct uv_buf_t*)#2, (unsigned int)#3, (struct sockaddr*)#4)"

pub inline fun ffi/uv-udp-try-send(^handle1: c-pointer<uv-udp-s-c>, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^addr: c-pointer<sockaddr-c>): <> int
  external/uv-udp-try-send(handle1, bufs.cextern/carray/ptr, nbufs.int32, addr).int

pub extern external/uv-udp-recv-start(^handle1: c-pointer<uv-udp-s-c>, ^alloc-cb: c-pointer<intptr_t>, ^recv-cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_udp_recv_start((uv_udp_t*)#1, (uv_alloc_cb)#2, (uv_udp_recv_cb)#3)"

pub inline fun ffi/uv-udp-recv-start(^handle1: c-pointer<uv-udp-s-c>, ^alloc-cb: uv-alloc-cb, ^recv-cb: uv-udp-recv-cb): <> int
  external/uv-udp-recv-start(handle1, alloc-cb, recv-cb).int

pub extern external/uv-udp-using-recvmmsg(^handle1: c-pointer<uv-udp-s-c>): int32
  c inline "(int)uv_udp_using_recvmmsg((uv_udp_t*)#1)"

pub inline fun ffi/uv-udp-using-recvmmsg(^handle1: c-pointer<uv-udp-s-c>): <> int
  external/uv-udp-using-recvmmsg(handle1).int

pub extern external/uv-udp-recv-stop(^handle1: c-pointer<uv-udp-s-c>): int32
  c inline "(int)uv_udp_recv_stop((uv_udp_t*)#1)"

pub inline fun ffi/uv-udp-recv-stop(^handle1: c-pointer<uv-udp-s-c>): <> int
  external/uv-udp-recv-stop(handle1).int

pub extern external/uv-udp-get-send-queue-size(^handle1: c-pointer<uv-udp-s-c>): ssize_t
  c inline "(size_t)uv_udp_get_send_queue_size((uv_udp_t*)#1)"

pub inline fun ffi/uv-udp-get-send-queue-size(^handle1: c-pointer<uv-udp-s-c>): <> int
  external/uv-udp-get-send-queue-size(handle1).int

pub extern external/uv-udp-get-send-queue-count(^handle1: c-pointer<uv-udp-s-c>): ssize_t
  c inline "(size_t)uv_udp_get_send_queue_count((uv_udp_t*)#1)"

pub inline fun ffi/uv-udp-get-send-queue-count(^handle1: c-pointer<uv-udp-s-c>): <> int
  external/uv-udp-get-send-queue-count(handle1).int

pub extern external/uv-tty-init(^arg0: c-pointer<uv-loop-s-c>, ^arg1: c-pointer<uv-tty-s-c>, ^fd: int32, ^readable: int32): int32
  c inline "(int)uv_tty_init((uv_loop_t*)#1, (uv_tty_t*)#2, (uv_file)#3, (int)#4)"

pub inline fun ffi/uv-tty-init(^arg0: c-pointer<uv-loop-s-c>, ^arg1: c-pointer<uv-tty-s-c>, ^fd: int, ^readable: int): <> int
  external/uv-tty-init(arg0, arg1, fd.int32, readable.int32).int

pub extern external/uv-tty-set-mode(^arg0: c-pointer<uv-tty-s-c>, ^mode: int32): int32
  c inline "(int)uv_tty_set_mode((uv_tty_t*)#1, (int32_t)#2)"

pub inline fun ffi/uv-tty-set-mode(^arg0: c-pointer<uv-tty-s-c>, ^mode: uv-tty-mode-t-enum): <exn> int
  external/uv-tty-set-mode(arg0, mode.uv-tty-mode-t-enum/int).int

pub extern external/uv-tty-reset-mode(): int32
  c inline "(int)uv_tty_reset_mode()"

pub inline fun ffi/uv-tty-reset-mode(): <> int
  external/uv-tty-reset-mode().int

pub extern external/uv-tty-get-winsize(^arg0: c-pointer<uv-tty-s-c>, ^width: c-pointer<int>, ^height: c-pointer<int>): int32
  c inline "(int)uv_tty_get_winsize((uv_tty_t*)#1, (int*)#2, (int*)#3)"

pub inline fun ffi/uv-tty-get-winsize(^arg0: c-pointer<uv-tty-s-c>, ^width: c-pointer<int>, ^height: c-pointer<int>): <> int
  external/uv-tty-get-winsize(arg0, width, height).int

pub extern external/uv-tty-set-vterm-state(^state: int32): ()
  c inline "(void)uv_tty_set_vterm_state((int32_t)#1)"

pub inline fun ffi/uv-tty-set-vterm-state(^state: uv-tty-vtermstate-t-enum): <exn> ()
  external/uv-tty-set-vterm-state(state.uv-tty-vtermstate-t-enum/int)

pub extern external/uv-tty-get-vterm-state(^state: c-pointer<uv-tty-vtermstate-t-enum>): int32
  c inline "(int)uv_tty_get_vterm_state((int32_t*)#1)"

pub inline fun ffi/uv-tty-get-vterm-state(^state: c-pointer<uv-tty-vtermstate-t-enum>): <> int
  external/uv-tty-get-vterm-state(state).int

pub extern external/uv-guess-handle(^file: int32): int32
  c inline "(int32_t)uv_guess_handle((uv_file)#1)"

pub inline fun ffi/uv-guess-handle(^file: int): <exn> uv-handle-type-enum
  external/uv-guess-handle(file.int32).int/uv-handle-type-enum

pub extern external/uv-pipe-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-pipe-s-c>, ^ipc: int32): int32
  c inline "(int)uv_pipe_init((uv_loop_t*)#1, (uv_pipe_t*)#2, (int)#3)"

pub inline fun ffi/uv-pipe-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-pipe-s-c>, ^ipc: int): <> int
  external/uv-pipe-init(arg0, handle1, ipc.int32).int

pub extern external/uv-pipe-open(^arg0: c-pointer<uv-pipe-s-c>, ^file: int32): int32
  c inline "(int)uv_pipe_open((uv_pipe_t*)#1, (uv_file)#2)"

pub inline fun ffi/uv-pipe-open(^arg0: c-pointer<uv-pipe-s-c>, ^file: int): <> int
  external/uv-pipe-open(arg0, file.int32).int

pub extern external/uv-pipe-bind(^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>): int32
  c inline "(int)uv_pipe_bind((uv_pipe_t*)#1, (char*)#2)"

pub inline fun ffi/uv-pipe-bind(^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>): <> int
  external/uv-pipe-bind(handle1, name).int

pub extern external/uv-pipe-bind2(^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>, ^namelen: ssize_t, ^flags: int32): int32
  c inline "(int)uv_pipe_bind2((uv_pipe_t*)#1, (char*)#2, (size_t)#3, (unsigned int)#4)"

pub inline fun ffi/uv-pipe-bind2(^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>, ^namelen: int, ^flags: int): <> int
  external/uv-pipe-bind2(handle1, name, namelen.ssize_t, flags.int32).int

pub extern external/uv-pipe-connect(^req: c-pointer<uv-connect-s-c>, ^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>, ^cb: c-pointer<intptr_t>): ()
  c inline "(void)uv_pipe_connect((uv_connect_t*)#1, (uv_pipe_t*)#2, (char*)#3, (uv_connect_cb)#4)"

pub extern external/uv-pipe-connect2(^req: c-pointer<uv-connect-s-c>, ^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>, ^namelen: ssize_t, ^flags: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_pipe_connect2((uv_connect_t*)#1, (uv_pipe_t*)#2, (char*)#3, (size_t)#4, (unsigned int)#5, (uv_connect_cb)#6)"

pub inline fun ffi/uv-pipe-connect2(^req: c-pointer<uv-connect-s-c>, ^handle1: c-pointer<uv-pipe-s-c>, ^name: c-pointer<int>, ^namelen: int, ^flags: int, ^cb: uv-connect-cb): <> int
  external/uv-pipe-connect2(req, handle1, name, namelen.ssize_t, flags.int32, cb).int

pub extern external/uv-pipe-getsockname(^handle1: c-pointer<uv-pipe-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_pipe_getsockname((uv_pipe_t*)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-pipe-getsockname(^handle1: c-pointer<uv-pipe-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-pipe-getsockname(handle1, buffer, size).int

pub extern external/uv-pipe-getpeername(^handle1: c-pointer<uv-pipe-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_pipe_getpeername((uv_pipe_t*)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-pipe-getpeername(^handle1: c-pointer<uv-pipe-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-pipe-getpeername(handle1, buffer, size).int

pub extern external/uv-pipe-pending-instances(^handle1: c-pointer<uv-pipe-s-c>, ^count: int32): ()
  c inline "(void)uv_pipe_pending_instances((uv_pipe_t*)#1, (int)#2)"

pub inline fun ffi/uv-pipe-pending-instances(^handle1: c-pointer<uv-pipe-s-c>, ^count: int): <> ()
  external/uv-pipe-pending-instances(handle1, count.int32)

pub extern external/uv-pipe-pending-count(^handle1: c-pointer<uv-pipe-s-c>): int32
  c inline "(int)uv_pipe_pending_count((uv_pipe_t*)#1)"

pub inline fun ffi/uv-pipe-pending-count(^handle1: c-pointer<uv-pipe-s-c>): <> int
  external/uv-pipe-pending-count(handle1).int

pub extern external/uv-pipe-pending-type(^handle1: c-pointer<uv-pipe-s-c>): int32
  c inline "(int32_t)uv_pipe_pending_type((uv_pipe_t*)#1)"

pub inline fun ffi/uv-pipe-pending-type(^handle1: c-pointer<uv-pipe-s-c>): <exn> uv-handle-type-enum
  external/uv-pipe-pending-type(handle1).int/uv-handle-type-enum

pub extern external/uv-pipe-chmod(^handle1: c-pointer<uv-pipe-s-c>, ^flags: int32): int32
  c inline "(int)uv_pipe_chmod((uv_pipe_t*)#1, (int)#2)"

pub inline fun ffi/uv-pipe-chmod(^handle1: c-pointer<uv-pipe-s-c>, ^flags: int): <> int
  external/uv-pipe-chmod(handle1, flags.int32).int

pub extern external/uv-poll-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-poll-s-c>, ^fd: int32): int32
  c inline "(int)uv_poll_init((uv_loop_t*)#1, (uv_poll_t*)#2, (int)#3)"

pub inline fun ffi/uv-poll-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-poll-s-c>, ^fd: int): <> int
  external/uv-poll-init(loop, handle1, fd.int32).int

pub extern external/uv-poll-init-socket(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-poll-s-c>, ^socket: int32): int32
  c inline "(int)uv_poll_init_socket((uv_loop_t*)#1, (uv_poll_t*)#2, (uv_os_sock_t)#3)"

pub inline fun ffi/uv-poll-init-socket(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-poll-s-c>, ^socket: int): <> int
  external/uv-poll-init-socket(loop, handle1, socket.int32).int

pub extern external/uv-poll-start(^handle1: c-pointer<uv-poll-s-c>, ^events: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_poll_start((uv_poll_t*)#1, (int)#2, (uv_poll_cb)#3)"

pub inline fun ffi/uv-poll-start(^handle1: c-pointer<uv-poll-s-c>, ^events: int, ^cb: uv-poll-cb): <> int
  external/uv-poll-start(handle1, events.int32, cb).int

pub extern external/uv-poll-stop(^handle1: c-pointer<uv-poll-s-c>): int32
  c inline "(int)uv_poll_stop((uv_poll_t*)#1)"

pub inline fun ffi/uv-poll-stop(^handle1: c-pointer<uv-poll-s-c>): <> int
  external/uv-poll-stop(handle1).int

pub extern external/uv-prepare-init(^arg0: c-pointer<uv-loop-s-c>, ^prepare: c-pointer<uv-prepare-s-c>): int32
  c inline "(int)uv_prepare_init((uv_loop_t*)#1, (uv_prepare_t*)#2)"

pub inline fun ffi/uv-prepare-init(^arg0: c-pointer<uv-loop-s-c>, ^prepare: c-pointer<uv-prepare-s-c>): <> int
  external/uv-prepare-init(arg0, prepare).int

pub extern external/uv-prepare-start(^prepare: c-pointer<uv-prepare-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_prepare_start((uv_prepare_t*)#1, (uv_prepare_cb)#2)"

pub inline fun ffi/uv-prepare-start(^prepare: c-pointer<uv-prepare-s-c>, ^cb: uv-prepare-cb): <> int
  external/uv-prepare-start(prepare, cb).int

pub extern external/uv-prepare-stop(^prepare: c-pointer<uv-prepare-s-c>): int32
  c inline "(int)uv_prepare_stop((uv_prepare_t*)#1)"

pub inline fun ffi/uv-prepare-stop(^prepare: c-pointer<uv-prepare-s-c>): <> int
  external/uv-prepare-stop(prepare).int

pub extern external/uv-check-init(^arg0: c-pointer<uv-loop-s-c>, ^check: c-pointer<uv-check-s-c>): int32
  c inline "(int)uv_check_init((uv_loop_t*)#1, (uv_check_t*)#2)"

pub inline fun ffi/uv-check-init(^arg0: c-pointer<uv-loop-s-c>, ^check: c-pointer<uv-check-s-c>): <> int
  external/uv-check-init(arg0, check).int

pub extern external/uv-check-start(^check: c-pointer<uv-check-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_check_start((uv_check_t*)#1, (uv_check_cb)#2)"

pub inline fun ffi/uv-check-start(^check: c-pointer<uv-check-s-c>, ^cb: uv-check-cb): <> int
  external/uv-check-start(check, cb).int

pub extern external/uv-check-stop(^check: c-pointer<uv-check-s-c>): int32
  c inline "(int)uv_check_stop((uv_check_t*)#1)"

pub inline fun ffi/uv-check-stop(^check: c-pointer<uv-check-s-c>): <> int
  external/uv-check-stop(check).int

pub extern external/uv-idle-init(^arg0: c-pointer<uv-loop-s-c>, ^idle: c-pointer<uv-idle-s-c>): int32
  c inline "(int)uv_idle_init((uv_loop_t*)#1, (uv_idle_t*)#2)"

pub inline fun ffi/uv-idle-init(^arg0: c-pointer<uv-loop-s-c>, ^idle: c-pointer<uv-idle-s-c>): <> int
  external/uv-idle-init(arg0, idle).int

pub extern external/uv-idle-start(^idle: c-pointer<uv-idle-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_idle_start((uv_idle_t*)#1, (uv_idle_cb)#2)"

pub inline fun ffi/uv-idle-start(^idle: c-pointer<uv-idle-s-c>, ^cb: uv-idle-cb): <> int
  external/uv-idle-start(idle, cb).int

pub extern external/uv-idle-stop(^idle: c-pointer<uv-idle-s-c>): int32
  c inline "(int)uv_idle_stop((uv_idle_t*)#1)"

pub inline fun ffi/uv-idle-stop(^idle: c-pointer<uv-idle-s-c>): <> int
  external/uv-idle-stop(idle).int

pub extern external/uv-async-init(^arg0: c-pointer<uv-loop-s-c>, ^async1: c-pointer<uv-async-s-c>, ^async-cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_async_init((uv_loop_t*)#1, (uv_async_t*)#2, (uv_async_cb)#3)"

pub inline fun ffi/uv-async-init(^arg0: c-pointer<uv-loop-s-c>, ^async1: c-pointer<uv-async-s-c>, ^async-cb: uv-async-cb): <> int
  external/uv-async-init(arg0, async1, async-cb).int

pub extern external/uv-async-send(^async1: c-pointer<uv-async-s-c>): int32
  c inline "(int)uv_async_send((uv_async_t*)#1)"

pub inline fun ffi/uv-async-send(^async1: c-pointer<uv-async-s-c>): <> int
  external/uv-async-send(async1).int

pub extern external/uv-timer-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-timer-s-c>): int32
  c inline "(int)uv_timer_init((uv_loop_t*)#1, (uv_timer_t*)#2)"

pub inline fun ffi/uv-timer-init(^arg0: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-timer-s-c>): <> int
  external/uv-timer-init(arg0, handle1).int

pub extern external/uv-timer-start(^handle1: c-pointer<uv-timer-s-c>, ^cb: c-pointer<intptr_t>, ^timeout: int64, ^repeat: int64): int32
  c inline "(int)uv_timer_start((uv_timer_t*)#1, (uv_timer_cb)#2, (int64_t)#3, (int64_t)#4)"

pub inline fun ffi/uv-timer-start(^handle1: c-pointer<uv-timer-s-c>, ^cb: uv-timer-cb, ^timeout: int, ^repeat: int): <> int
  external/uv-timer-start(handle1, cb, timeout.int64, repeat.int64).int

pub extern external/uv-timer-stop(^handle1: c-pointer<uv-timer-s-c>): int32
  c inline "(int)uv_timer_stop((uv_timer_t*)#1)"

pub inline fun ffi/uv-timer-stop(^handle1: c-pointer<uv-timer-s-c>): <> int
  external/uv-timer-stop(handle1).int

pub extern external/uv-timer-again(^handle1: c-pointer<uv-timer-s-c>): int32
  c inline "(int)uv_timer_again((uv_timer_t*)#1)"

pub inline fun ffi/uv-timer-again(^handle1: c-pointer<uv-timer-s-c>): <> int
  external/uv-timer-again(handle1).int

pub extern external/uv-timer-set-repeat(^handle1: c-pointer<uv-timer-s-c>, ^repeat: int64): ()
  c inline "(void)uv_timer_set_repeat((uv_timer_t*)#1, (int64_t)#2)"

pub inline fun ffi/uv-timer-set-repeat(^handle1: c-pointer<uv-timer-s-c>, ^repeat: int): <> ()
  external/uv-timer-set-repeat(handle1, repeat.int64)

pub extern external/uv-timer-get-repeat(^handle1: c-pointer<uv-timer-s-c>): int64
  c inline "(int64_t)uv_timer_get_repeat((uv_timer_t*)#1)"

pub inline fun ffi/uv-timer-get-repeat(^handle1: c-pointer<uv-timer-s-c>): <> int
  external/uv-timer-get-repeat(handle1).int

pub extern external/uv-timer-get-due-in(^handle1: c-pointer<uv-timer-s-c>): int64
  c inline "(int64_t)uv_timer_get_due_in((uv_timer_t*)#1)"

pub inline fun ffi/uv-timer-get-due-in(^handle1: c-pointer<uv-timer-s-c>): <> int
  external/uv-timer-get-due-in(handle1).int

pub extern external/uv-getaddrinfo(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-getaddrinfo-s-c>, ^getaddrinfo-cb: c-pointer<intptr_t>, ^node: c-pointer<int>, ^service: c-pointer<int>, ^hints: c-pointer<addrinfo-c>): int32
  c inline "(int)uv_getaddrinfo((uv_loop_t*)#1, (uv_getaddrinfo_t*)#2, (uv_getaddrinfo_cb)#3, (char*)#4, (char*)#5, (struct addrinfo*)#6)"

pub inline fun ffi/uv-getaddrinfo(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-getaddrinfo-s-c>, ^getaddrinfo-cb: uv-getaddrinfo-cb, ^node: c-pointer<int>, ^service: c-pointer<int>, ^hints: c-pointer<addrinfo-c>): <> int
  external/uv-getaddrinfo(loop, req, getaddrinfo-cb, node, service, hints).int

pub extern external/uv-freeaddrinfo(^ai: c-pointer<addrinfo-c>): ()
  c inline "(void)uv_freeaddrinfo((struct addrinfo*)#1)"

pub extern external/uv-getnameinfo(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-getnameinfo-s-c>, ^getnameinfo-cb: c-pointer<intptr_t>, ^addr: c-pointer<sockaddr-c>, ^flags: int32): int32
  c inline "(int)uv_getnameinfo((uv_loop_t*)#1, (uv_getnameinfo_t*)#2, (uv_getnameinfo_cb)#3, (struct sockaddr*)#4, (int)#5)"

pub inline fun ffi/uv-getnameinfo(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-getnameinfo-s-c>, ^getnameinfo-cb: uv-getnameinfo-cb, ^addr: c-pointer<sockaddr-c>, ^flags: int): <> int
  external/uv-getnameinfo(loop, req, getnameinfo-cb, addr, flags.int32).int

pub extern external/uv-spawn(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-process-s-c>, ^options: c-pointer<uv-process-options-s-c>): int32
  c inline "(int)uv_spawn((uv_loop_t*)#1, (uv_process_t*)#2, (uv_process_options_t*)#3)"

pub inline fun ffi/uv-spawn(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-process-s-c>, ^options: c-pointer<uv-process-options-s-c>): <> int
  external/uv-spawn(loop, handle1, options).int

pub extern external/uv-process-kill(^arg0: c-pointer<uv-process-s-c>, ^signum: int32): int32
  c inline "(int)uv_process_kill((uv_process_t*)#1, (int)#2)"

pub inline fun ffi/uv-process-kill(^arg0: c-pointer<uv-process-s-c>, ^signum: int): <> int
  external/uv-process-kill(arg0, signum.int32).int

pub extern external/uv-kill(^pid: int32, ^signum: int32): int32
  c inline "(int)uv_kill((int)#1, (int)#2)"

pub inline fun ffi/uv-kill(^pid: int, ^signum: int): <> int
  external/uv-kill(pid.int32, signum.int32).int

pub extern external/uv-process-get-pid(^arg0: c-pointer<uv-process-s-c>): int32
  c inline "(uv_pid_t)uv_process_get_pid((uv_process_t*)#1)"

pub inline fun ffi/uv-process-get-pid(^arg0: c-pointer<uv-process-s-c>): <> int
  external/uv-process-get-pid(arg0).int

pub extern external/uv-queue-work(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-work-s-c>, ^work-cb: c-pointer<intptr_t>, ^after-work-cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_queue_work((uv_loop_t*)#1, (uv_work_t*)#2, (uv_work_cb)#3, (uv_after_work_cb)#4)"

pub inline fun ffi/uv-queue-work(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-work-s-c>, ^work-cb: uv-work-cb, ^after-work-cb: uv-after-work-cb): <> int
  external/uv-queue-work(loop, req, work-cb, after-work-cb).int

pub extern external/uv-cancel(^req: c-pointer<uv-req-s-c>): int32
  c inline "(int)uv_cancel((uv_req_t*)#1)"

pub inline fun ffi/uv-cancel(^req: c-pointer<uv-req-s-c>): <> int
  external/uv-cancel(req).int

pub extern external/uv-setup-args(^argc: int32, ^argv: c-pointer<c-pointer<int>>): c-pointer<c-pointer<int>>
  c inline "(intptr_t)uv_setup_args((int)#1, (char**)#2)"

pub inline fun ffi/uv-setup-args(^argc: int, ^argv: c-pointer<c-pointer<int>>): <> c-pointer<c-pointer<int>>
  external/uv-setup-args(argc.int32, argv)

pub extern external/uv-get-process-title(^buffer: c-pointer<int>, ^size: ssize_t): int32
  c inline "(int)uv_get_process_title((char*)#1, (size_t)#2)"

pub inline fun ffi/uv-get-process-title(^buffer: c-pointer<int>, ^size: int): <> int
  external/uv-get-process-title(buffer, size.ssize_t).int

pub extern external/uv-set-process-title(^title: c-pointer<int>): int32
  c inline "(int)uv_set_process_title((char*)#1)"

pub inline fun ffi/uv-set-process-title(^title: c-pointer<int>): <> int
  external/uv-set-process-title(title).int

pub extern external/uv-resident-set-memory(^rss: c-pointer<int>): int32
  c inline "(int)uv_resident_set_memory((size_t*)#1)"

pub inline fun ffi/uv-resident-set-memory(^rss: c-pointer<int>): <> int
  external/uv-resident-set-memory(rss).int

pub extern external/uv-uptime(^uptime: c-pointer<float64>): int32
  c inline "(int)uv_uptime((double*)#1)"

pub inline fun ffi/uv-uptime(^uptime: c-pointer<float64>): <> int
  external/uv-uptime(uptime).int

pub extern external/uv-get-osfhandle(^fd: int32): int32
  c inline "(uv_os_fd_t)uv_get_osfhandle((int)#1)"

pub inline fun ffi/uv-get-osfhandle(^fd: int): <> int
  external/uv-get-osfhandle(fd.int32).int

pub extern external/uv-open-osfhandle(^os-fd: int32): int32
  c inline "(int)uv_open_osfhandle((uv_os_fd_t)#1)"

pub inline fun ffi/uv-open-osfhandle(^os-fd: int): <> int
  external/uv-open-osfhandle(os-fd.int32).int

pub extern external/uv-getrusage(^rusage: c-pointer<uv-rusage-t-c>): int32
  c inline "(int)uv_getrusage((uv_rusage_t*)#1)"

pub inline fun ffi/uv-getrusage(^rusage: c-pointer<uv-rusage-t-c>): <> int
  external/uv-getrusage(rusage).int

pub extern external/uv-os-homedir(^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_os_homedir((char*)#1, (size_t*)#2)"

pub inline fun ffi/uv-os-homedir(^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-os-homedir(buffer, size).int

pub extern external/uv-os-tmpdir(^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_os_tmpdir((char*)#1, (size_t*)#2)"

pub inline fun ffi/uv-os-tmpdir(^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-os-tmpdir(buffer, size).int

pub extern external/uv-os-get-passwd(^pwd: c-pointer<uv-passwd-s-c>): int32
  c inline "(int)uv_os_get_passwd((uv_passwd_t*)#1)"

pub inline fun ffi/uv-os-get-passwd(^pwd: c-pointer<uv-passwd-s-c>): <> int
  external/uv-os-get-passwd(pwd).int

pub extern external/uv-os-free-passwd(^pwd: c-pointer<uv-passwd-s-c>): ()
  c inline "(void)uv_os_free_passwd((uv_passwd_t*)#1)"

pub extern external/uv-os-get-passwd2(^pwd: c-pointer<uv-passwd-s-c>, ^uid: int32): int32
  c inline "(int)uv_os_get_passwd2((uv_passwd_t*)#1, (uv_uid_t)#2)"

pub inline fun ffi/uv-os-get-passwd2(^pwd: c-pointer<uv-passwd-s-c>, ^uid: int): <> int
  external/uv-os-get-passwd2(pwd, uid.int32).int

pub extern external/uv-os-get-group(^grp: c-pointer<uv-group-s-c>, ^gid: int32): int32
  c inline "(int)uv_os_get_group((uv_group_t*)#1, (uv_uid_t)#2)"

pub inline fun ffi/uv-os-get-group(^grp: c-pointer<uv-group-s-c>, ^gid: int): <> int
  external/uv-os-get-group(grp, gid.int32).int

pub extern external/uv-os-free-group(^grp: c-pointer<uv-group-s-c>): ()
  c inline "(void)uv_os_free_group((uv_group_t*)#1)"

pub extern external/uv-os-getpid(): int32
  c inline "(uv_pid_t)uv_os_getpid()"

pub inline fun ffi/uv-os-getpid(): <> int
  external/uv-os-getpid().int

pub extern external/uv-os-getppid(): int32
  c inline "(uv_pid_t)uv_os_getppid()"

pub inline fun ffi/uv-os-getppid(): <> int
  external/uv-os-getppid().int

pub extern external/uv-os-getpriority(^pid: int32, ^priority: c-pointer<int>): int32
  c inline "(int)uv_os_getpriority((uv_pid_t)#1, (int*)#2)"

pub inline fun ffi/uv-os-getpriority(^pid: int, ^priority: c-pointer<int>): <> int
  external/uv-os-getpriority(pid.int32, priority).int

pub extern external/uv-os-setpriority(^pid: int32, ^priority: int32): int32
  c inline "(int)uv_os_setpriority((uv_pid_t)#1, (int)#2)"

pub inline fun ffi/uv-os-setpriority(^pid: int, ^priority: int): <> int
  external/uv-os-setpriority(pid.int32, priority.int32).int

pub extern external/uv-available-parallelism(): int32
  c inline "(unsigned int)uv_available_parallelism()"

pub inline fun ffi/uv-available-parallelism(): <> int
  external/uv-available-parallelism().int

pub extern external/uv-cpu-info(^cpu-infos: c-pointer<c-pointer<uv-cpu-info-s-c>>, ^count: c-pointer<int>): int32
  c inline "(int)uv_cpu_info((uv_cpu_info_t**)#1, (int*)#2)"

pub inline fun ffi/uv-cpu-info(^cpu-infos: c-pointer<c-pointer<uv-cpu-info-s-c>>, ^count: c-pointer<int>): <> int
  external/uv-cpu-info(cpu-infos, count).int

pub extern external/uv-free-cpu-info(^cpu-infos: c-pointer<uv-cpu-info-s-c>, ^count: int32): ()
  c inline "(void)uv_free_cpu_info((uv_cpu_info_t*)#1, (int)#2)"

pub inline fun ffi/uv-free-cpu-info(^cpu-infos: c-pointer<uv-cpu-info-s-c>, ^count: int): <> ()
  external/uv-free-cpu-info(cpu-infos, count.int32)

pub extern external/uv-cpumask-size(): int32
  c inline "(int)uv_cpumask_size()"

pub inline fun ffi/uv-cpumask-size(): <> int
  external/uv-cpumask-size().int

pub extern external/uv-interface-addresses(^addresses: c-pointer<c-pointer<uv-interface-address-s-c>>, ^count: c-pointer<int>): int32
  c inline "(int)uv_interface_addresses((uv_interface_address_t**)#1, (int*)#2)"

pub inline fun ffi/uv-interface-addresses(^addresses: c-pointer<c-pointer<uv-interface-address-s-c>>, ^count: c-pointer<int>): <> int
  external/uv-interface-addresses(addresses, count).int

pub extern external/uv-free-interface-addresses(^addresses: c-pointer<uv-interface-address-s-c>, ^count: int32): ()
  c inline "(void)uv_free_interface_addresses((uv_interface_address_t*)#1, (int)#2)"

pub inline fun ffi/uv-free-interface-addresses(^addresses: c-pointer<uv-interface-address-s-c>, ^count: int): <> ()
  external/uv-free-interface-addresses(addresses, count.int32)

pub extern external/uv-os-environ(^envitems: c-pointer<c-pointer<uv-env-item-s-c>>, ^count: c-pointer<int>): int32
  c inline "(int)uv_os_environ((uv_env_item_t**)#1, (int*)#2)"

pub inline fun ffi/uv-os-environ(^envitems: c-pointer<c-pointer<uv-env-item-s-c>>, ^count: c-pointer<int>): <> int
  external/uv-os-environ(envitems, count).int

pub extern external/uv-os-free-environ(^envitems: c-pointer<uv-env-item-s-c>, ^count: int32): ()
  c inline "(void)uv_os_free_environ((uv_env_item_t*)#1, (int)#2)"

pub inline fun ffi/uv-os-free-environ(^envitems: c-pointer<uv-env-item-s-c>, ^count: int): <> ()
  external/uv-os-free-environ(envitems, count.int32)

pub extern external/uv-os-getenv(^name: c-pointer<int>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_os_getenv((char*)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-os-getenv(^name: c-pointer<int>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-os-getenv(name, buffer, size).int

pub extern external/uv-os-setenv(^name: c-pointer<int>, ^value: c-pointer<int>): int32
  c inline "(int)uv_os_setenv((char*)#1, (char*)#2)"

pub inline fun ffi/uv-os-setenv(^name: c-pointer<int>, ^value: c-pointer<int>): <> int
  external/uv-os-setenv(name, value).int

pub extern external/uv-os-unsetenv(^name: c-pointer<int>): int32
  c inline "(int)uv_os_unsetenv((char*)#1)"

pub inline fun ffi/uv-os-unsetenv(^name: c-pointer<int>): <> int
  external/uv-os-unsetenv(name).int

pub extern external/uv-os-gethostname(^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_os_gethostname((char*)#1, (size_t*)#2)"

pub inline fun ffi/uv-os-gethostname(^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-os-gethostname(buffer, size).int

pub extern external/uv-os-uname(^buffer: c-pointer<uv-utsname-s-c>): int32
  c inline "(int)uv_os_uname((uv_utsname_t*)#1)"

pub inline fun ffi/uv-os-uname(^buffer: c-pointer<uv-utsname-s-c>): <> int
  external/uv-os-uname(buffer).int

pub extern external/uv-metrics-info(^loop: c-pointer<uv-loop-s-c>, ^metrics: c-pointer<uv-metrics-s-c>): int32
  c inline "(int)uv_metrics_info((uv_loop_t*)#1, (uv_metrics_t*)#2)"

pub inline fun ffi/uv-metrics-info(^loop: c-pointer<uv-loop-s-c>, ^metrics: c-pointer<uv-metrics-s-c>): <> int
  external/uv-metrics-info(loop, metrics).int

pub extern external/uv-metrics-idle-time(^loop: c-pointer<uv-loop-s-c>): int64
  c inline "(int64_t)uv_metrics_idle_time((uv_loop_t*)#1)"

pub inline fun ffi/uv-metrics-idle-time(^loop: c-pointer<uv-loop-s-c>): <> int
  external/uv-metrics-idle-time(loop).int

pub extern external/uv-fs-get-type(^arg0: c-pointer<uv-fs-s-c>): int32
  c inline "(int32_t)uv_fs_get_type((uv_fs_t*)#1)"

pub inline fun ffi/uv-fs-get-type(^arg0: c-pointer<uv-fs-s-c>): <exn> uv-fs-type-enum
  external/uv-fs-get-type(arg0).int/uv-fs-type-enum

pub extern external/uv-fs-get-result(^arg0: c-pointer<uv-fs-s-c>): ssize_t
  c inline "(ssize_t)uv_fs_get_result((uv_fs_t*)#1)"

pub inline fun ffi/uv-fs-get-result(^arg0: c-pointer<uv-fs-s-c>): <> int
  external/uv-fs-get-result(arg0).int

pub extern external/uv-fs-get-system-error(^arg0: c-pointer<uv-fs-s-c>): int32
  c inline "(int)uv_fs_get_system_error((uv_fs_t*)#1)"

pub inline fun ffi/uv-fs-get-system-error(^arg0: c-pointer<uv-fs-s-c>): <> int
  external/uv-fs-get-system-error(arg0).int

pub extern external/uv-fs-get-ptr(^arg0: c-pointer<uv-fs-s-c>): c-pointer<()>
  c inline "(intptr_t)uv_fs_get_ptr((uv_fs_t*)#1)"

pub extern external/uv-fs-get-path(^arg0: c-pointer<uv-fs-s-c>): c-pointer<int>
  c inline "(intptr_t)uv_fs_get_path((uv_fs_t*)#1)"

pub extern external/uv-fs-get-statbuf(^arg0: c-pointer<uv-fs-s-c>): c-pointer<uv-stat-t-c>
  c inline "(intptr_t)uv_fs_get_statbuf((uv_fs_t*)#1)"

pub extern external/uv-fs-req-cleanup(^req: c-pointer<uv-fs-s-c>): ()
  c inline "(void)uv_fs_req_cleanup((uv_fs_t*)#1)"

pub extern external/uv-fs-close(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_close((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-close(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-close(loop, req, file.int32, cb).int

pub extern external/uv-fs-open(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^flags: int32, ^mode: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_open((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (int)#4, (int)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-open(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^flags: int, ^mode: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-open(loop, req, path, flags.int32, mode.int32, cb).int

pub extern external/uv-fs-read(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^offset: int64, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_read((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (struct uv_buf_t*)#4, (unsigned int)#5, (int64_t)#6, (uv_fs_cb)#7)"

pub inline fun ffi/uv-fs-read(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^offset: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-read(loop, req, file.int32, bufs.cextern/carray/ptr, nbufs.int32, offset.int64, cb).int

pub extern external/uv-fs-unlink(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_unlink((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-unlink(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-unlink(loop, req, path, cb).int

pub extern external/uv-fs-write(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^bufs: c-pointer<uv-buf-t-c>, ^nbufs: int32, ^offset: int64, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_write((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (struct uv_buf_t*)#4, (unsigned int)#5, (int64_t)#6, (uv_fs_cb)#7)"

pub inline fun ffi/uv-fs-write(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^bufs: c-array<uv-buf-t-c>, ^nbufs: int, ^offset: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-write(loop, req, file.int32, bufs.cextern/carray/ptr, nbufs.int32, offset.int64, cb).int

pub extern external/uv-fs-copyfile(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^flags: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_copyfile((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (char*)#4, (int)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-copyfile(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^flags: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-copyfile(loop, req, path, new-path, flags.int32, cb).int

pub extern external/uv-fs-mkdir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^mode: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_mkdir((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (int)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-mkdir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^mode: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-mkdir(loop, req, path, mode.int32, cb).int

pub extern external/uv-fs-mkdtemp(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^tpl: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_mkdtemp((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-mkdtemp(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^tpl: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-mkdtemp(loop, req, tpl, cb).int

pub extern external/uv-fs-mkstemp(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^tpl: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_mkstemp((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-mkstemp(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^tpl: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-mkstemp(loop, req, tpl, cb).int

pub extern external/uv-fs-rmdir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_rmdir((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-rmdir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-rmdir(loop, req, path, cb).int

pub extern external/uv-fs-scandir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^flags: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_scandir((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (int)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-scandir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^flags: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-scandir(loop, req, path, flags.int32, cb).int

pub extern external/uv-fs-scandir-next(^req: c-pointer<uv-fs-s-c>, ^ent: c-pointer<uv-dirent-s-c>): int32
  c inline "(int)uv_fs_scandir_next((uv_fs_t*)#1, (uv_dirent_t*)#2)"

pub inline fun ffi/uv-fs-scandir-next(^req: c-pointer<uv-fs-s-c>, ^ent: c-pointer<uv-dirent-s-c>): <> int
  external/uv-fs-scandir-next(req, ent).int

pub extern external/uv-fs-opendir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_opendir((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-opendir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-opendir(loop, req, path, cb).int

pub extern external/uv-fs-readdir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^dir: c-pointer<uv-dir-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_readdir((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_dir_t*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-readdir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^dir: c-pointer<uv-dir-s-c>, ^cb: uv-fs-cb): <> int
  external/uv-fs-readdir(loop, req, dir, cb).int

pub extern external/uv-fs-closedir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^dir: c-pointer<uv-dir-s-c>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_closedir((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_dir_t*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-closedir(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^dir: c-pointer<uv-dir-s-c>, ^cb: uv-fs-cb): <> int
  external/uv-fs-closedir(loop, req, dir, cb).int

pub extern external/uv-fs-stat(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_stat((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-stat(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-stat(loop, req, path, cb).int

pub extern external/uv-fs-fstat(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_fstat((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-fstat(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-fstat(loop, req, file.int32, cb).int

pub extern external/uv-fs-rename(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_rename((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (char*)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-rename(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-rename(loop, req, path, new-path, cb).int

pub extern external/uv-fs-fsync(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_fsync((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-fsync(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-fsync(loop, req, file.int32, cb).int

pub extern external/uv-fs-fdatasync(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_fdatasync((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-fdatasync(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-fdatasync(loop, req, file.int32, cb).int

pub extern external/uv-fs-ftruncate(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^offset: int64, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_ftruncate((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (int64_t)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-ftruncate(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^offset: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-ftruncate(loop, req, file.int32, offset.int64, cb).int

pub extern external/uv-fs-sendfile(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^out-fd: int32, ^in-fd: int32, ^in-offset: int64, ^length: ssize_t, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_sendfile((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (uv_file)#4, (int64_t)#5, (size_t)#6, (uv_fs_cb)#7)"

pub inline fun ffi/uv-fs-sendfile(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^out-fd: int, ^in-fd: int, ^in-offset: int, ^length: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-sendfile(loop, req, out-fd.int32, in-fd.int32, in-offset.int64, length.ssize_t, cb).int

pub extern external/uv-fs-access(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^mode: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_access((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (int)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-access(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^mode: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-access(loop, req, path, mode.int32, cb).int

pub extern external/uv-fs-chmod(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^mode: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_chmod((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (int)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-chmod(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^mode: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-chmod(loop, req, path, mode.int32, cb).int

pub extern external/uv-fs-utime(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^atime: float64, ^mtime: float64, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_utime((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (double)#4, (double)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-utime(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^atime: float64, ^mtime: float64, ^cb: uv-fs-cb): <> int
  external/uv-fs-utime(loop, req, path, atime, mtime, cb).int

pub extern external/uv-fs-futime(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^atime: float64, ^mtime: float64, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_futime((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (double)#4, (double)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-futime(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^atime: float64, ^mtime: float64, ^cb: uv-fs-cb): <> int
  external/uv-fs-futime(loop, req, file.int32, atime, mtime, cb).int

pub extern external/uv-fs-lutime(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^atime: float64, ^mtime: float64, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_lutime((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (double)#4, (double)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-lutime(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^atime: float64, ^mtime: float64, ^cb: uv-fs-cb): <> int
  external/uv-fs-lutime(loop, req, path, atime, mtime, cb).int

pub extern external/uv-fs-lstat(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_lstat((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-lstat(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-lstat(loop, req, path, cb).int

pub extern external/uv-fs-link(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_link((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (char*)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-link(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-link(loop, req, path, new-path, cb).int

pub extern external/uv-fs-symlink(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^flags: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_symlink((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (char*)#4, (int)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-symlink(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^new-path: c-pointer<int>, ^flags: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-symlink(loop, req, path, new-path, flags.int32, cb).int

pub extern external/uv-fs-readlink(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_readlink((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-readlink(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-readlink(loop, req, path, cb).int

pub extern external/uv-fs-realpath(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_realpath((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-realpath(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-realpath(loop, req, path, cb).int

pub extern external/uv-fs-fchmod(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^mode: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_fchmod((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (int)#4, (uv_fs_cb)#5)"

pub inline fun ffi/uv-fs-fchmod(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^mode: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-fchmod(loop, req, file.int32, mode.int32, cb).int

pub extern external/uv-fs-chown(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^uid: int32, ^gid: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_chown((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_uid_t)#4, (uv_gid_t)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-chown(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^uid: int, ^gid: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-chown(loop, req, path, uid.int32, gid.int32, cb).int

pub extern external/uv-fs-fchown(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int32, ^uid: int32, ^gid: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_fchown((uv_loop_t*)#1, (uv_fs_t*)#2, (uv_file)#3, (uv_uid_t)#4, (uv_gid_t)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-fchown(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^file: int, ^uid: int, ^gid: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-fchown(loop, req, file.int32, uid.int32, gid.int32, cb).int

pub extern external/uv-fs-lchown(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^uid: int32, ^gid: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_lchown((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_uid_t)#4, (uv_gid_t)#5, (uv_fs_cb)#6)"

pub inline fun ffi/uv-fs-lchown(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^uid: int, ^gid: int, ^cb: uv-fs-cb): <> int
  external/uv-fs-lchown(loop, req, path, uid.int32, gid.int32, cb).int

pub extern external/uv-fs-statfs(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_fs_statfs((uv_loop_t*)#1, (uv_fs_t*)#2, (char*)#3, (uv_fs_cb)#4)"

pub inline fun ffi/uv-fs-statfs(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-fs-s-c>, ^path: c-pointer<int>, ^cb: uv-fs-cb): <> int
  external/uv-fs-statfs(loop, req, path, cb).int

pub extern external/uv-fs-poll-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-fs-poll-s-c>): int32
  c inline "(int)uv_fs_poll_init((uv_loop_t*)#1, (uv_fs_poll_t*)#2)"

pub inline fun ffi/uv-fs-poll-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-fs-poll-s-c>): <> int
  external/uv-fs-poll-init(loop, handle1).int

pub extern external/uv-fs-poll-start(^handle1: c-pointer<uv-fs-poll-s-c>, ^poll-cb: c-pointer<intptr_t>, ^path: c-pointer<int>, ^interval: int32): int32
  c inline "(int)uv_fs_poll_start((uv_fs_poll_t*)#1, (uv_fs_poll_cb)#2, (char*)#3, (unsigned int)#4)"

pub inline fun ffi/uv-fs-poll-start(^handle1: c-pointer<uv-fs-poll-s-c>, ^poll-cb: uv-fs-poll-cb, ^path: c-pointer<int>, ^interval: int): <> int
  external/uv-fs-poll-start(handle1, poll-cb, path, interval.int32).int

pub extern external/uv-fs-poll-stop(^handle1: c-pointer<uv-fs-poll-s-c>): int32
  c inline "(int)uv_fs_poll_stop((uv_fs_poll_t*)#1)"

pub inline fun ffi/uv-fs-poll-stop(^handle1: c-pointer<uv-fs-poll-s-c>): <> int
  external/uv-fs-poll-stop(handle1).int

pub extern external/uv-fs-poll-getpath(^handle1: c-pointer<uv-fs-poll-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_fs_poll_getpath((uv_fs_poll_t*)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-fs-poll-getpath(^handle1: c-pointer<uv-fs-poll-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-fs-poll-getpath(handle1, buffer, size).int

pub extern external/uv-signal-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-signal-s-c>): int32
  c inline "(int)uv_signal_init((uv_loop_t*)#1, (uv_signal_t*)#2)"

pub inline fun ffi/uv-signal-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-signal-s-c>): <> int
  external/uv-signal-init(loop, handle1).int

pub extern external/uv-signal-start(^handle1: c-pointer<uv-signal-s-c>, ^signal-cb: c-pointer<intptr_t>, ^signum: int32): int32
  c inline "(int)uv_signal_start((uv_signal_t*)#1, (uv_signal_cb)#2, (int)#3)"

pub inline fun ffi/uv-signal-start(^handle1: c-pointer<uv-signal-s-c>, ^signal-cb: uv-signal-cb, ^signum: int): <> int
  external/uv-signal-start(handle1, signal-cb, signum.int32).int

pub extern external/uv-signal-start-oneshot(^handle1: c-pointer<uv-signal-s-c>, ^signal-cb: c-pointer<intptr_t>, ^signum: int32): int32
  c inline "(int)uv_signal_start_oneshot((uv_signal_t*)#1, (uv_signal_cb)#2, (int)#3)"

pub inline fun ffi/uv-signal-start-oneshot(^handle1: c-pointer<uv-signal-s-c>, ^signal-cb: uv-signal-cb, ^signum: int): <> int
  external/uv-signal-start-oneshot(handle1, signal-cb, signum.int32).int

pub extern external/uv-signal-stop(^handle1: c-pointer<uv-signal-s-c>): int32
  c inline "(int)uv_signal_stop((uv_signal_t*)#1)"

pub inline fun ffi/uv-signal-stop(^handle1: c-pointer<uv-signal-s-c>): <> int
  external/uv-signal-stop(handle1).int

pub extern external/uv-loadavg(^avg: c-pointer<float64>): ()
  c inline "(void)uv_loadavg((double*)#1)"

pub extern external/uv-fs-event-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-fs-event-s-c>): int32
  c inline "(int)uv_fs_event_init((uv_loop_t*)#1, (uv_fs_event_t*)#2)"

pub inline fun ffi/uv-fs-event-init(^loop: c-pointer<uv-loop-s-c>, ^handle1: c-pointer<uv-fs-event-s-c>): <> int
  external/uv-fs-event-init(loop, handle1).int

pub extern external/uv-fs-event-start(^handle1: c-pointer<uv-fs-event-s-c>, ^cb: c-pointer<intptr_t>, ^path: c-pointer<int>, ^flags: int32): int32
  c inline "(int)uv_fs_event_start((uv_fs_event_t*)#1, (uv_fs_event_cb)#2, (char*)#3, (unsigned int)#4)"

pub inline fun ffi/uv-fs-event-start(^handle1: c-pointer<uv-fs-event-s-c>, ^cb: uv-fs-event-cb, ^path: c-pointer<int>, ^flags: int): <> int
  external/uv-fs-event-start(handle1, cb, path, flags.int32).int

pub extern external/uv-fs-event-stop(^handle1: c-pointer<uv-fs-event-s-c>): int32
  c inline "(int)uv_fs_event_stop((uv_fs_event_t*)#1)"

pub inline fun ffi/uv-fs-event-stop(^handle1: c-pointer<uv-fs-event-s-c>): <> int
  external/uv-fs-event-stop(handle1).int

pub extern external/uv-fs-event-getpath(^handle1: c-pointer<uv-fs-event-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_fs_event_getpath((uv_fs_event_t*)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-fs-event-getpath(^handle1: c-pointer<uv-fs-event-s-c>, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-fs-event-getpath(handle1, buffer, size).int

pub extern external/uv-ip4-addr(^ip: c-pointer<int>, ^port: int32, ^addr: c-pointer<sockaddr-in-c>): int32
  c inline "(int)uv_ip4_addr((char*)#1, (int)#2, (struct sockaddr_in*)#3)"

pub inline fun ffi/uv-ip4-addr(^ip: c-pointer<int>, ^port: int, ^addr: c-pointer<sockaddr-in-c>): <> int
  external/uv-ip4-addr(ip, port.int32, addr).int

pub extern external/uv-ip6-addr(^ip: c-pointer<int>, ^port: int32, ^addr: c-pointer<sockaddr-in6-c>): int32
  c inline "(int)uv_ip6_addr((char*)#1, (int)#2, (struct sockaddr_in6*)#3)"

pub inline fun ffi/uv-ip6-addr(^ip: c-pointer<int>, ^port: int, ^addr: c-pointer<sockaddr-in6-c>): <> int
  external/uv-ip6-addr(ip, port.int32, addr).int

pub extern external/uv-ip4-name(^src: c-pointer<sockaddr-in-c>, ^dst: c-pointer<int>, ^size: ssize_t): int32
  c inline "(int)uv_ip4_name((struct sockaddr_in*)#1, (char*)#2, (size_t)#3)"

pub inline fun ffi/uv-ip4-name(^src: c-pointer<sockaddr-in-c>, ^dst: c-pointer<int>, ^size: int): <> int
  external/uv-ip4-name(src, dst, size.ssize_t).int

pub extern external/uv-ip6-name(^src: c-pointer<sockaddr-in6-c>, ^dst: c-pointer<int>, ^size: ssize_t): int32
  c inline "(int)uv_ip6_name((struct sockaddr_in6*)#1, (char*)#2, (size_t)#3)"

pub inline fun ffi/uv-ip6-name(^src: c-pointer<sockaddr-in6-c>, ^dst: c-pointer<int>, ^size: int): <> int
  external/uv-ip6-name(src, dst, size.ssize_t).int

pub extern external/uv-ip-name(^src: c-pointer<sockaddr-c>, ^dst: c-pointer<int>, ^size: ssize_t): int32
  c inline "(int)uv_ip_name((struct sockaddr*)#1, (char*)#2, (size_t)#3)"

pub inline fun ffi/uv-ip-name(^src: c-pointer<sockaddr-c>, ^dst: c-pointer<int>, ^size: int): <> int
  external/uv-ip-name(src, dst, size.ssize_t).int

pub extern external/uv-inet-ntop(^af: int32, ^src: c-pointer<()>, ^dst: c-pointer<int>, ^size: ssize_t): int32
  c inline "(int)uv_inet_ntop((int)#1, (void*)#2, (char*)#3, (size_t)#4)"

pub inline fun ffi/uv-inet-ntop(^af: int, ^src: c-pointer<()>, ^dst: c-pointer<int>, ^size: int): <> int
  external/uv-inet-ntop(af.int32, src, dst, size.ssize_t).int

pub extern external/uv-inet-pton(^af: int32, ^src: c-pointer<int>, ^dst: c-pointer<()>): int32
  c inline "(int)uv_inet_pton((int)#1, (char*)#2, (void*)#3)"

pub inline fun ffi/uv-inet-pton(^af: int, ^src: c-pointer<int>, ^dst: c-pointer<()>): <> int
  external/uv-inet-pton(af.int32, src, dst).int

pub extern external/uv-random(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-random-s-c>, ^buf: c-pointer<()>, ^buflen: ssize_t, ^flags: int32, ^cb: c-pointer<intptr_t>): int32
  c inline "(int)uv_random((uv_loop_t*)#1, (uv_random_t*)#2, (void*)#3, (size_t)#4, (unsigned int)#5, (uv_random_cb)#6)"

pub inline fun ffi/uv-random(^loop: c-pointer<uv-loop-s-c>, ^req: c-pointer<uv-random-s-c>, ^buf: c-pointer<()>, ^buflen: int, ^flags: int, ^cb: uv-random-cb): <> int
  external/uv-random(loop, req, buf, buflen.ssize_t, flags.int32, cb).int

pub extern external/uv-if-indextoname(^ifindex: int32, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_if_indextoname((unsigned int)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-if-indextoname(^ifindex: int, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-if-indextoname(ifindex.int32, buffer, size).int

pub extern external/uv-if-indextoiid(^ifindex: int32, ^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_if_indextoiid((unsigned int)#1, (char*)#2, (size_t*)#3)"

pub inline fun ffi/uv-if-indextoiid(^ifindex: int, ^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-if-indextoiid(ifindex.int32, buffer, size).int

pub extern external/uv-exepath(^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_exepath((char*)#1, (size_t*)#2)"

pub inline fun ffi/uv-exepath(^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-exepath(buffer, size).int

pub extern external/uv-cwd(^buffer: c-pointer<int>, ^size: c-pointer<int>): int32
  c inline "(int)uv_cwd((char*)#1, (size_t*)#2)"

pub inline fun ffi/uv-cwd(^buffer: c-pointer<int>, ^size: c-pointer<int>): <> int
  external/uv-cwd(buffer, size).int

pub extern external/uv-chdir(^dir: c-pointer<int>): int32
  c inline "(int)uv_chdir((char*)#1)"

pub inline fun ffi/uv-chdir(^dir: c-pointer<int>): <> int
  external/uv-chdir(dir).int

pub extern external/uv-get-free-memory(): int64
  c inline "(int64_t)uv_get_free_memory()"

pub inline fun ffi/uv-get-free-memory(): <> int
  external/uv-get-free-memory().int

pub extern external/uv-get-total-memory(): int64
  c inline "(int64_t)uv_get_total_memory()"

pub inline fun ffi/uv-get-total-memory(): <> int
  external/uv-get-total-memory().int

pub extern external/uv-get-constrained-memory(): int64
  c inline "(int64_t)uv_get_constrained_memory()"

pub inline fun ffi/uv-get-constrained-memory(): <> int
  external/uv-get-constrained-memory().int

pub extern external/uv-get-available-memory(): int64
  c inline "(int64_t)uv_get_available_memory()"

pub inline fun ffi/uv-get-available-memory(): <> int
  external/uv-get-available-memory().int

pub extern external/uv-clock-gettime(^clock-id: int32, ^ts: c-pointer<uv-timespec64-t-c>): int32
  c inline "(int)uv_clock_gettime((int32_t)#1, (uv_timespec64_t*)#2)"

pub inline fun ffi/uv-clock-gettime(^clock-id: uv-clock-id-enum, ^ts: c-pointer<uv-timespec64-t-c>): <exn> int
  external/uv-clock-gettime(clock-id.uv-clock-id-enum/int, ts).int

pub extern external/uv-hrtime(): int64
  c inline "(int64_t)uv_hrtime()"

pub inline fun ffi/uv-hrtime(): <> int
  external/uv-hrtime().int

pub extern external/uv-sleep(^msec: int32): ()
  c inline "(void)uv_sleep((unsigned int)#1)"

pub inline fun ffi/uv-sleep(^msec: int): <> ()
  external/uv-sleep(msec.int32)

pub extern external/uv-disable-stdio-inheritance(): ()
  c inline "(void)uv_disable_stdio_inheritance()"

pub extern external/uv-dlopen(^filename: c-pointer<int>, ^lib: c-pointer<uv-lib-t-c>): int32
  c inline "(int)uv_dlopen((char*)#1, (uv_lib_t*)#2)"

pub inline fun ffi/uv-dlopen(^filename: c-pointer<int>, ^lib: c-pointer<uv-lib-t-c>): <> int
  external/uv-dlopen(filename, lib).int

pub extern external/uv-dlclose(^lib: c-pointer<uv-lib-t-c>): ()
  c inline "(void)uv_dlclose((uv_lib_t*)#1)"

pub extern external/uv-dlsym(^lib: c-pointer<uv-lib-t-c>, ^name: c-pointer<int>, ^ptr: c-pointer<c-pointer<()>>): int32
  c inline "(int)uv_dlsym((uv_lib_t*)#1, (char*)#2, (void**)#3)"

pub inline fun ffi/uv-dlsym(^lib: c-pointer<uv-lib-t-c>, ^name: c-pointer<int>, ^ptr: c-pointer<c-pointer<()>>): <> int
  external/uv-dlsym(lib, name, ptr).int

pub extern external/uv-dlerror(^lib: c-pointer<uv-lib-t-c>): c-pointer<int>
  c inline "(intptr_t)uv_dlerror((uv_lib_t*)#1)"

pub extern external/uv-mutex-init(^handle1: c-pointer<pthread-mutex-t-c>): int32
  c inline "(int)uv_mutex_init((uv_mutex_t*)#1)"

pub inline fun ffi/uv-mutex-init(^handle1: c-pointer<pthread-mutex-t-c>): <> int
  external/uv-mutex-init(handle1).int

pub extern external/uv-mutex-init-recursive(^handle1: c-pointer<pthread-mutex-t-c>): int32
  c inline "(int)uv_mutex_init_recursive((uv_mutex_t*)#1)"

pub inline fun ffi/uv-mutex-init-recursive(^handle1: c-pointer<pthread-mutex-t-c>): <> int
  external/uv-mutex-init-recursive(handle1).int

pub extern external/uv-mutex-destroy(^handle1: c-pointer<pthread-mutex-t-c>): ()
  c inline "(void)uv_mutex_destroy((uv_mutex_t*)#1)"

pub extern external/uv-mutex-lock(^handle1: c-pointer<pthread-mutex-t-c>): ()
  c inline "(void)uv_mutex_lock((uv_mutex_t*)#1)"

pub extern external/uv-mutex-trylock(^handle1: c-pointer<pthread-mutex-t-c>): int32
  c inline "(int)uv_mutex_trylock((uv_mutex_t*)#1)"

pub inline fun ffi/uv-mutex-trylock(^handle1: c-pointer<pthread-mutex-t-c>): <> int
  external/uv-mutex-trylock(handle1).int

pub extern external/uv-mutex-unlock(^handle1: c-pointer<pthread-mutex-t-c>): ()
  c inline "(void)uv_mutex_unlock((uv_mutex_t*)#1)"

pub extern external/uv-rwlock-init(^rwlock: c-pointer<pthread-rwlock-t-c>): int32
  c inline "(int)uv_rwlock_init((uv_rwlock_t*)#1)"

pub inline fun ffi/uv-rwlock-init(^rwlock: c-pointer<pthread-rwlock-t-c>): <> int
  external/uv-rwlock-init(rwlock).int

pub extern external/uv-rwlock-destroy(^rwlock: c-pointer<pthread-rwlock-t-c>): ()
  c inline "(void)uv_rwlock_destroy((uv_rwlock_t*)#1)"

pub extern external/uv-rwlock-rdlock(^rwlock: c-pointer<pthread-rwlock-t-c>): ()
  c inline "(void)uv_rwlock_rdlock((uv_rwlock_t*)#1)"

pub extern external/uv-rwlock-tryrdlock(^rwlock: c-pointer<pthread-rwlock-t-c>): int32
  c inline "(int)uv_rwlock_tryrdlock((uv_rwlock_t*)#1)"

pub inline fun ffi/uv-rwlock-tryrdlock(^rwlock: c-pointer<pthread-rwlock-t-c>): <> int
  external/uv-rwlock-tryrdlock(rwlock).int

pub extern external/uv-rwlock-rdunlock(^rwlock: c-pointer<pthread-rwlock-t-c>): ()
  c inline "(void)uv_rwlock_rdunlock((uv_rwlock_t*)#1)"

pub extern external/uv-rwlock-wrlock(^rwlock: c-pointer<pthread-rwlock-t-c>): ()
  c inline "(void)uv_rwlock_wrlock((uv_rwlock_t*)#1)"

pub extern external/uv-rwlock-trywrlock(^rwlock: c-pointer<pthread-rwlock-t-c>): int32
  c inline "(int)uv_rwlock_trywrlock((uv_rwlock_t*)#1)"

pub inline fun ffi/uv-rwlock-trywrlock(^rwlock: c-pointer<pthread-rwlock-t-c>): <> int
  external/uv-rwlock-trywrlock(rwlock).int

pub extern external/uv-rwlock-wrunlock(^rwlock: c-pointer<pthread-rwlock-t-c>): ()
  c inline "(void)uv_rwlock_wrunlock((uv_rwlock_t*)#1)"

pub extern external/uv-sem-init(^sem: c-pointer<sem-t-c>, ^value: int32): int32
  c inline "(int)uv_sem_init((uv_sem_t*)#1, (unsigned int)#2)"

pub inline fun ffi/uv-sem-init(^sem: c-pointer<sem-t-c>, ^value: int): <> int
  external/uv-sem-init(sem, value.int32).int

pub extern external/uv-sem-destroy(^sem: c-pointer<sem-t-c>): ()
  c inline "(void)uv_sem_destroy((uv_sem_t*)#1)"

pub extern external/uv-sem-post(^sem: c-pointer<sem-t-c>): ()
  c inline "(void)uv_sem_post((uv_sem_t*)#1)"

pub extern external/uv-sem-wait(^sem: c-pointer<sem-t-c>): ()
  c inline "(void)uv_sem_wait((uv_sem_t*)#1)"

pub extern external/uv-sem-trywait(^sem: c-pointer<sem-t-c>): int32
  c inline "(int)uv_sem_trywait((uv_sem_t*)#1)"

pub inline fun ffi/uv-sem-trywait(^sem: c-pointer<sem-t-c>): <> int
  external/uv-sem-trywait(sem).int

pub extern external/uv-cond-init(^cond: c-pointer<pthread-cond-t-c>): int32
  c inline "(int)uv_cond_init((uv_cond_t*)#1)"

pub inline fun ffi/uv-cond-init(^cond: c-pointer<pthread-cond-t-c>): <> int
  external/uv-cond-init(cond).int

pub extern external/uv-cond-destroy(^cond: c-pointer<pthread-cond-t-c>): ()
  c inline "(void)uv_cond_destroy((uv_cond_t*)#1)"

pub extern external/uv-cond-signal(^cond: c-pointer<pthread-cond-t-c>): ()
  c inline "(void)uv_cond_signal((uv_cond_t*)#1)"

pub extern external/uv-cond-broadcast(^cond: c-pointer<pthread-cond-t-c>): ()
  c inline "(void)uv_cond_broadcast((uv_cond_t*)#1)"

pub extern external/uv-barrier-init(^barrier: c-pointer<pthread-barrier-t-c>, ^count: int32): int32
  c inline "(int)uv_barrier_init((uv_barrier_t*)#1, (unsigned int)#2)"

pub inline fun ffi/uv-barrier-init(^barrier: c-pointer<pthread-barrier-t-c>, ^count: int): <> int
  external/uv-barrier-init(barrier, count.int32).int

pub extern external/uv-barrier-destroy(^barrier: c-pointer<pthread-barrier-t-c>): ()
  c inline "(void)uv_barrier_destroy((uv_barrier_t*)#1)"

pub extern external/uv-barrier-wait(^barrier: c-pointer<pthread-barrier-t-c>): int32
  c inline "(int)uv_barrier_wait((uv_barrier_t*)#1)"

pub inline fun ffi/uv-barrier-wait(^barrier: c-pointer<pthread-barrier-t-c>): <> int
  external/uv-barrier-wait(barrier).int

pub extern external/uv-cond-wait(^cond: c-pointer<pthread-cond-t-c>, ^mutex: c-pointer<pthread-mutex-t-c>): ()
  c inline "(void)uv_cond_wait((uv_cond_t*)#1, (uv_mutex_t*)#2)"

pub extern external/uv-cond-timedwait(^cond: c-pointer<pthread-cond-t-c>, ^mutex: c-pointer<pthread-mutex-t-c>, ^timeout: int64): int32
  c inline "(int)uv_cond_timedwait((uv_cond_t*)#1, (uv_mutex_t*)#2, (int64_t)#3)"

pub inline fun ffi/uv-cond-timedwait(^cond: c-pointer<pthread-cond-t-c>, ^mutex: c-pointer<pthread-mutex-t-c>, ^timeout: int): <> int
  external/uv-cond-timedwait(cond, mutex, timeout.int64).int

pub extern external/uv-once(^guard: c-pointer<int>, ^callback: c-pointer<intptr_t>): ()
  c inline "(void)uv_once((uv_once_t*)#1, (void (*)())#2)"

pub extern external/uv-key-create(^key: c-pointer<int>): int32
  c inline "(int)uv_key_create((uv_key_t*)#1)"

pub inline fun ffi/uv-key-create(^key: c-pointer<int>): <> int
  external/uv-key-create(key).int

pub extern external/uv-key-delete(^key: c-pointer<int>): ()
  c inline "(void)uv_key_delete((uv_key_t*)#1)"

pub extern external/uv-key-get(^key: c-pointer<int>): c-pointer<()>
  c inline "(intptr_t)uv_key_get((uv_key_t*)#1)"

pub extern external/uv-key-set(^key: c-pointer<int>, ^value: c-pointer<()>): ()
  c inline "(void)uv_key_set((uv_key_t*)#1, (void*)#2)"

pub extern external/uv-gettimeofday(^tv: c-pointer<uv-timeval64-t-c>): int32
  c inline "(int)uv_gettimeofday((uv_timeval64_t*)#1)"

pub inline fun ffi/uv-gettimeofday(^tv: c-pointer<uv-timeval64-t-c>): <> int
  external/uv-gettimeofday(tv).int

pub extern external/uv-thread-create(^tid: c-pointer<int>, ^entry: c-pointer<intptr_t>, ^arg: c-pointer<()>): int32
  c inline "(int)uv_thread_create((uv_thread_t*)#1, (uv_thread_cb)#2, (void*)#3)"

pub inline fun ffi/uv-thread-create(^tid: c-pointer<int>, ^entry: uv-thread-cb, ^arg: c-pointer<()>): <> int
  external/uv-thread-create(tid, entry, arg).int

pub extern external/uv-thread-create-ex(^tid: c-pointer<int>, ^params: c-pointer<uv-thread-options-s-c>, ^entry: c-pointer<intptr_t>, ^arg: c-pointer<()>): int32
  c inline "(int)uv_thread_create_ex((uv_thread_t*)#1, (uv_thread_options_t*)#2, (uv_thread_cb)#3, (void*)#4)"

pub inline fun ffi/uv-thread-create-ex(^tid: c-pointer<int>, ^params: c-pointer<uv-thread-options-s-c>, ^entry: uv-thread-cb, ^arg: c-pointer<()>): <> int
  external/uv-thread-create-ex(tid, params, entry, arg).int

pub extern external/uv-thread-setaffinity(^tid: c-pointer<int>, ^cpumask: c-pointer<int>, ^oldmask: c-pointer<int>, ^mask-size: ssize_t): int32
  c inline "(int)uv_thread_setaffinity((uv_thread_t*)#1, (char*)#2, (char*)#3, (size_t)#4)"

pub inline fun ffi/uv-thread-setaffinity(^tid: c-pointer<int>, ^cpumask: c-pointer<int>, ^oldmask: c-pointer<int>, ^mask-size: int): <> int
  external/uv-thread-setaffinity(tid, cpumask, oldmask, mask-size.ssize_t).int

pub extern external/uv-thread-getaffinity(^tid: c-pointer<int>, ^cpumask: c-pointer<int>, ^mask-size: ssize_t): int32
  c inline "(int)uv_thread_getaffinity((uv_thread_t*)#1, (char*)#2, (size_t)#3)"

pub inline fun ffi/uv-thread-getaffinity(^tid: c-pointer<int>, ^cpumask: c-pointer<int>, ^mask-size: int): <> int
  external/uv-thread-getaffinity(tid, cpumask, mask-size.ssize_t).int

pub extern external/uv-thread-getcpu(): int32
  c inline "(int)uv_thread_getcpu()"

pub inline fun ffi/uv-thread-getcpu(): <> int
  external/uv-thread-getcpu().int

pub extern external/uv-thread-self(): int64
  c inline "(uv_thread_t)uv_thread_self()"

pub inline fun ffi/uv-thread-self(): <> int
  external/uv-thread-self().int

pub extern external/uv-thread-join(^tid: c-pointer<int>): int32
  c inline "(int)uv_thread_join((uv_thread_t*)#1)"

pub inline fun ffi/uv-thread-join(^tid: c-pointer<int>): <> int
  external/uv-thread-join(tid).int

pub extern external/uv-thread-equal(^t1: c-pointer<int>, ^t2: c-pointer<int>): int32
  c inline "(int)uv_thread_equal((uv_thread_t*)#1, (uv_thread_t*)#2)"

pub inline fun ffi/uv-thread-equal(^t1: c-pointer<int>, ^t2: c-pointer<int>): <> int
  external/uv-thread-equal(t1, t2).int

pub extern external/uv-loop-get-data(^arg0: c-pointer<uv-loop-s-c>): c-pointer<()>
  c inline "(intptr_t)uv_loop_get_data((uv_loop_t*)#1)"

pub extern external/uv-loop-set-data(^arg0: c-pointer<uv-loop-s-c>, ^data: c-pointer<()>): ()
  c inline "(void)uv_loop_set_data((uv_loop_t*)#1, (void*)#2)"

pub value struct uv-queue
  next: uv-queue-c
  prev: uv-queue-c

pub type uv-queue-c
pub alias uv-queuep = c-pointer<uv-queue-c>
pub alias uv-queuec = owned-c<uv-queue-c>
pub alias uv-queuecb<s::S> = borrowed-c<s,uv-queue-c>
pub alias uv-queueca = owned-c<c-array<uv-queue-c>>

pub extern uv-queue/size-of(c: c-null<uv-queue-c>): int32
  c inline "sizeof(struct uv__queue)"

pub fun uv-queuec(): uv-queuec
  malloc(?size-of=uv-queue/size-of)

pub fun uv-queuec-calloc(): uv-queuec
  malloc-c(?size-of=uv-queue/size-of)

pub fun uv-queuec-array(n: int): uv-queueca
  malloc(n.int32, ?size-of=uv-queue/size-of)

pub fun uv-queuec-array-calloc(n: int): uv-queueca
  malloc-c(n.int32, ?size-of=uv-queue/size-of)

pub struct uv-work
  work: c-pointer<intptr_t>
  done: c-pointer<intptr_t>
  loop: uv-loop-s-c
  wq: uv-queue-c

pub type uv-work-c
pub alias uv-workp = c-pointer<uv-work-c>
pub alias uv-workc = owned-c<uv-work-c>
pub alias uv-workcb<s::S> = borrowed-c<s,uv-work-c>
pub alias uv-workca = owned-c<c-array<uv-work-c>>

pub extern uv-work/size-of(c: c-null<uv-work-c>): int32
  c inline "sizeof(struct uv__work)"

pub fun uv-workc(): uv-workc
  malloc(?size-of=uv-work/size-of)

pub fun uv-workc-calloc(): uv-workc
  malloc-c(?size-of=uv-work/size-of)

pub fun uv-workc-array(n: int): uv-workca
  malloc(n.int32, ?size-of=uv-work/size-of)

pub fun uv-workc-array-calloc(n: int): uv-workca
  malloc-c(n.int32, ?size-of=uv-work/size-of)

pub struct uv-loop-s
  data: c-pointer<()>
  active-handles: int
  handle-queue: uv-queue-c
  active-reqs: unnamed-union1-c
  internal-fields: c-pointer<()>
  stop-flag: int
  flags: int
  backend-fd: int
  pending-queue: uv-queue-c
  watcher-queue: uv-queue-c
  watchers: c-pointer<c-pointer<uv-io-s-c>>
  nwatchers: int
  nfds: int
  wq: uv-queue-c
  wq-mutex: pthread-mutex-t
  wq-async: koka-uv-async-t
  cloexec-lock: pthread-rwlock-t
  closing-handles: c-pointer<uv-handle-s-c>
  process-handles: uv-queue-c
  prepare-handles: uv-queue-c
  check-handles: uv-queue-c
  idle-handles: uv-queue-c
  async-handles: uv-queue-c
  async-unused: c-pointer<intptr_t>
  async-io-watcher: koka-uv-io-t
  async-wfd: int
  timer-heap: unnamed-struct1-c
  timer-counter: int
  time: int
  signal-pipefd: c-array<int>
  signal-io-watcher: koka-uv-io-t
  child-watcher: koka-uv-signal-t
  emfile-fd: int
  inotify-read-watcher: koka-uv-io-t
  inotify-watchers: c-pointer<()>
  inotify-fd: int

pub type uv-loop-s-c
pub alias uv-loop-sp = c-pointer<uv-loop-s-c>
pub alias uv-loop-sc = owned-c<uv-loop-s-c>
pub alias uv-loop-scb<s::S> = borrowed-c<s,uv-loop-s-c>
pub alias uv-loop-sca = owned-c<c-array<uv-loop-s-c>>

pub extern uv-loop-s/size-of(c: c-null<uv-loop-s-c>): int32
  c inline "sizeof(struct uv_loop_s)"

pub fun uv-loop-sc(): uv-loop-sc
  malloc(?size-of=uv-loop-s/size-of)

pub fun uv-loop-sc-calloc(): uv-loop-sc
  malloc-c(?size-of=uv-loop-s/size-of)

pub fun uv-loop-sc-array(n: int): uv-loop-sca
  malloc(n.int32, ?size-of=uv-loop-s/size-of)

pub fun uv-loop-sc-array-calloc(n: int): uv-loop-sca
  malloc-c(n.int32, ?size-of=uv-loop-s/size-of)

pub struct unnamed-union1
pub type unnamed-union1-c
pub alias unnamed-union1p = c-pointer<unnamed-union1-c>
pub alias unnamed-union1c = owned-c<unnamed-union1-c>
pub alias unnamed-union1cb<s::S> = borrowed-c<s,unnamed-union1-c>
pub alias unnamed-union1ca = owned-c<c-array<unnamed-union1-c>>

alias uv-io-t = uv-io-s-c
alias koka-uv-io-t = uv-io-s
pub struct uv-io-s
  cb: uv-io-cb
  pending-queue: uv-queue-c
  watcher-queue: uv-queue-c
  pevents: int
  events: int
  fd: int

pub type uv-io-s-c
pub alias uv-io-sp = c-pointer<uv-io-s-c>
pub alias uv-io-sc = owned-c<uv-io-s-c>
pub alias uv-io-scb<s::S> = borrowed-c<s,uv-io-s-c>
pub alias uv-io-sca = owned-c<c-array<uv-io-s-c>>

pub extern uv-io-s/size-of(c: c-null<uv-io-s-c>): int32
  c inline "sizeof(struct uv__io_s)"

pub fun uv-io-sc(): uv-io-sc
  malloc(?size-of=uv-io-s/size-of)

pub fun uv-io-sc-calloc(): uv-io-sc
  malloc-c(?size-of=uv-io-s/size-of)

pub fun uv-io-sc-array(n: int): uv-io-sca
  malloc(n.int32, ?size-of=uv-io-s/size-of)

pub fun uv-io-sc-array-calloc(n: int): uv-io-sca
  malloc-c(n.int32, ?size-of=uv-io-s/size-of)

alias uv-io-cb = c-pointer<intptr_t>
alias uv-io-cbfn = ((loop : c-pointer<uv-loop-s-c>, w : c-pointer<uv-io-s-c>, events : int) -> ())
alias uv-mutex-t = pthread-mutex-t-c
pub struct pthread-mutex-t
pub type pthread-mutex-t-c
pub alias pthread-mutex-tp = c-pointer<pthread-mutex-t-c>
pub alias pthread-mutex-tc<s::S> = owned-c<pthread-mutex-t-c>
pub alias pthread-mutex-tcb<s::S> = borrowed-c<s,pthread-mutex-t-c>
pub alias pthread-mutex-tca<s::S> = owned-c<c-array<pthread-mutex-t-c>>

pub struct pthread-mutex-s
  lock: int
  count: int
  owner: int
  nusers: int
  kind: int
  spins: int
  elision: int
  list: koka-pthread-list-t

pub type pthread-mutex-s-c
pub alias pthread-mutex-sp = c-pointer<pthread-mutex-s-c>
pub alias pthread-mutex-sc = owned-c<pthread-mutex-s-c>
pub alias pthread-mutex-scb<s::S> = borrowed-c<s,pthread-mutex-s-c>
pub alias pthread-mutex-sca = owned-c<c-array<pthread-mutex-s-c>>

pub extern pthread-mutex-s/size-of(c: c-null<pthread-mutex-s-c>): int32
  c inline "sizeof(struct __pthread_mutex_s)"

pub fun pthread-mutex-sc(): pthread-mutex-sc
  malloc(?size-of=pthread-mutex-s/size-of)

pub fun pthread-mutex-sc-calloc(): pthread-mutex-sc
  malloc-c(?size-of=pthread-mutex-s/size-of)

pub fun pthread-mutex-sc-array(n: int): pthread-mutex-sca
  malloc(n.int32, ?size-of=pthread-mutex-s/size-of)

pub fun pthread-mutex-sc-array-calloc(n: int): pthread-mutex-sca
  malloc-c(n.int32, ?size-of=pthread-mutex-s/size-of)

alias pthread-list-t = pthread-internal-list-c
alias koka-pthread-list-t = pthread-internal-list
pub value struct pthread-internal-list
  prev: pthread-internal-list-c
  next: pthread-internal-list-c

pub type pthread-internal-list-c
pub alias pthread-internal-listp = c-pointer<pthread-internal-list-c>
pub alias pthread-internal-listc = owned-c<pthread-internal-list-c>
pub alias pthread-internal-listcb<s::S> = borrowed-c<s,pthread-internal-list-c>
pub alias pthread-internal-listca = owned-c<c-array<pthread-internal-list-c>>

pub extern pthread-internal-list/size-of(c: c-null<pthread-internal-list-c>): int32
  c inline "sizeof(struct __pthread_internal_list)"

pub fun pthread-internal-listc(): pthread-internal-listc
  malloc(?size-of=pthread-internal-list/size-of)

pub fun pthread-internal-listc-calloc(): pthread-internal-listc
  malloc-c(?size-of=pthread-internal-list/size-of)

pub fun pthread-internal-listc-array(n: int): pthread-internal-listca
  malloc(n.int32, ?size-of=pthread-internal-list/size-of)

pub fun pthread-internal-listc-array-calloc(n: int): pthread-internal-listca
  malloc-c(n.int32, ?size-of=pthread-internal-list/size-of)

alias uv-async-t = uv-async-s-c
alias koka-uv-async-t = uv-async-s
pub struct uv-async-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union2-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  async-cb: uv-async-cb
  queue: uv-queue-c
  pending: int

pub type uv-async-s-c
pub alias uv-async-sp = c-pointer<uv-async-s-c>
pub alias uv-async-sc = owned-c<uv-async-s-c>
pub alias uv-async-scb<s::S> = borrowed-c<s,uv-async-s-c>
pub alias uv-async-sca = owned-c<c-array<uv-async-s-c>>

pub extern uv-async-s/size-of(c: c-null<uv-async-s-c>): int32
  c inline "sizeof(struct uv_async_s)"

pub fun uv-async-sc(): uv-async-sc
  malloc(?size-of=uv-async-s/size-of)

pub fun uv-async-sc-calloc(): uv-async-sc
  malloc-c(?size-of=uv-async-s/size-of)

pub fun uv-async-sc-array(n: int): uv-async-sca
  malloc(n.int32, ?size-of=uv-async-s/size-of)

pub fun uv-async-sc-array-calloc(n: int): uv-async-sca
  malloc-c(n.int32, ?size-of=uv-async-s/size-of)

alias uv-loop-t = uv-loop-s-c
alias koka-uv-loop-t = uv-loop-s
pub type uv-handle-type-enum
  UV_UNKNOWN_HANDLE
  UV_ASYNC
  UV_CHECK
  UV_FS_EVENT
  UV_FS_POLL
  UV_HANDLE
  UV_IDLE
  UV_NAMED_PIPE
  UV_POLL
  UV_PREPARE
  UV_PROCESS
  UV_STREAM
  UV_TCP
  UV_TIMER
  UV_TTY
  UV_UDP
  UV_SIGNAL
  UV_FILE
  UV_HANDLE_TYPE_MAX

pub fun uv-handle-type-enum/int(i: uv-handle-type-enum): int32
  match i
    UV_UNKNOWN_HANDLE -> 0.int32
    UV_ASYNC -> 1.int32
    UV_CHECK -> 2.int32
    UV_FS_EVENT -> 3.int32
    UV_FS_POLL -> 4.int32
    UV_HANDLE -> 5.int32
    UV_IDLE -> 6.int32
    UV_NAMED_PIPE -> 7.int32
    UV_POLL -> 8.int32
    UV_PREPARE -> 9.int32
    UV_PROCESS -> 10.int32
    UV_STREAM -> 11.int32
    UV_TCP -> 12.int32
    UV_TIMER -> 13.int32
    UV_TTY -> 14.int32
    UV_UDP -> 15.int32
    UV_SIGNAL -> 16.int32
    UV_FILE -> 17.int32
    UV_HANDLE_TYPE_MAX -> 18.int32

pub fun int/uv-handle-type-enum(i: int32): exn uv-handle-type-enum
  match i.int
    0 -> UV_UNKNOWN_HANDLE
    1 -> UV_ASYNC
    2 -> UV_CHECK
    3 -> UV_FS_EVENT
    4 -> UV_FS_POLL
    5 -> UV_HANDLE
    6 -> UV_IDLE
    7 -> UV_NAMED_PIPE
    8 -> UV_POLL
    9 -> UV_PREPARE
    10 -> UV_PROCESS
    11 -> UV_STREAM
    12 -> UV_TCP
    13 -> UV_TIMER
    14 -> UV_TTY
    15 -> UV_UDP
    16 -> UV_SIGNAL
    17 -> UV_FILE
    18 -> UV_HANDLE_TYPE_MAX

alias uv-close-cb = c-pointer<intptr_t>
alias uv-close-cbfn = ((handle1 : c-pointer<uv-handle-s-c>) -> ())
alias uv-handle-t = uv-handle-s-c
pub struct uv-handle-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union4-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int

pub type uv-handle-s-c
pub alias uv-handle-sp = c-pointer<uv-handle-s-c>
pub alias uv-handle-sc = owned-c<uv-handle-s-c>
pub alias uv-handle-scb<s::S> = borrowed-c<s,uv-handle-s-c>
pub alias uv-handle-sca = owned-c<c-array<uv-handle-s-c>>

pub extern uv-handle-s/size-of(c: c-null<uv-handle-s-c>): int32
  c inline "sizeof(struct uv_handle_s)"

pub fun uv-handle-sc(): uv-handle-sc
  malloc(?size-of=uv-handle-s/size-of)

pub fun uv-handle-sc-calloc(): uv-handle-sc
  malloc-c(?size-of=uv-handle-s/size-of)

pub fun uv-handle-sc-array(n: int): uv-handle-sca
  malloc(n.int32, ?size-of=uv-handle-s/size-of)

pub fun uv-handle-sc-array-calloc(n: int): uv-handle-sca
  malloc-c(n.int32, ?size-of=uv-handle-s/size-of)

pub struct unnamed-union4
pub type unnamed-union4-c
pub alias unnamed-union4p = c-pointer<unnamed-union4-c>
pub alias unnamed-union4c<s::S> = owned-c<unnamed-union4-c>
pub alias unnamed-union4cb<s::S> = borrowed-c<s,unnamed-union4-c>
pub alias unnamed-union4ca<s::S> = owned-c<c-array<unnamed-union4-c>>

pub struct unnamed-union2
pub type unnamed-union2-c
pub alias unnamed-union2p = c-pointer<unnamed-union2-c>
pub alias unnamed-union2c<s::S> = owned-c<unnamed-union2-c>
pub alias unnamed-union2cb<s::S> = borrowed-c<s,unnamed-union2-c>
pub alias unnamed-union2ca<s::S> = owned-c<c-array<unnamed-union2-c>>

alias uv-async-cb = c-pointer<intptr_t>
alias uv-async-cbfn = ((handle1 : c-pointer<uv-async-s-c>) -> ())
alias uv-async-t1 = uv-async-s-c
alias koka-uv-async-t1 = uv-async-s
alias uv-rwlock-t = pthread-rwlock-t-c
pub struct pthread-rwlock-t
pub type pthread-rwlock-t-c
pub alias pthread-rwlock-tp = c-pointer<pthread-rwlock-t-c>
pub alias pthread-rwlock-tc<s::S> = owned-c<pthread-rwlock-t-c>
pub alias pthread-rwlock-tcb<s::S> = borrowed-c<s,pthread-rwlock-t-c>
pub alias pthread-rwlock-tca<s::S> = owned-c<c-array<pthread-rwlock-t-c>>

pub struct pthread-rwlock-arch-t
pub type pthread-rwlock-arch-t-c
pub alias pthread-rwlock-arch-tp = c-pointer<pthread-rwlock-arch-t-c>
pub alias pthread-rwlock-arch-tc<s::S> = owned-c<pthread-rwlock-arch-t-c>
pub alias pthread-rwlock-arch-tcb<s::S> = borrowed-c<s,pthread-rwlock-arch-t-c>
pub alias pthread-rwlock-arch-tca<s::S> = owned-c<c-array<pthread-rwlock-arch-t-c>>

pub extern pthread-rwlock-arch-t/size-of(c: c-null<pthread-rwlock-arch-t-c>): int32
  c inline "sizeof(struct __pthread_rwlock_arch_t)"

pub fun pthread-rwlock-arch-tc(): pthread-rwlock-arch-tc<s::S>
  malloc(?size-of=pthread-rwlock-arch-t/size-of)

pub fun pthread-rwlock-arch-tc-calloc(): pthread-rwlock-arch-tc<s::S>
  malloc-c(?size-of=pthread-rwlock-arch-t/size-of)

pub fun pthread-rwlock-arch-tc-array(n: int): pthread-rwlock-arch-tca<s::S>
  malloc(n.int32, ?size-of=pthread-rwlock-arch-t/size-of)

pub fun pthread-rwlock-arch-tc-array-calloc(n: int): pthread-rwlock-arch-tca<s::S>
  malloc-c(n.int32, ?size-of=pthread-rwlock-arch-t/size-of)

pub value struct unnamed-struct1
  min: c-pointer<()>
  nelts: int

pub type unnamed-struct1-c
pub alias unnamed-struct1p = c-pointer<unnamed-struct1-c>
pub alias unnamed-struct1c = owned-c<unnamed-struct1-c>
pub alias unnamed-struct1cb<s::S> = borrowed-c<s,unnamed-struct1-c>
pub alias unnamed-struct1ca = owned-c<c-array<unnamed-struct1-c>>

alias uv-signal-t = uv-signal-s-c
alias koka-uv-signal-t = uv-signal-s
pub struct uv-signal-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union3-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  signal-cb: uv-signal-cb
  signum: int
  tree-entry: unnamed-struct2-c
  caught-signals: int
  dispatched-signals: int

pub type uv-signal-s-c
pub alias uv-signal-sp = c-pointer<uv-signal-s-c>
pub alias uv-signal-sc = owned-c<uv-signal-s-c>
pub alias uv-signal-scb<s::S> = borrowed-c<s,uv-signal-s-c>
pub alias uv-signal-sca = owned-c<c-array<uv-signal-s-c>>

pub extern uv-signal-s/size-of(c: c-null<uv-signal-s-c>): int32
  c inline "sizeof(struct uv_signal_s)"

pub fun uv-signal-sc(): uv-signal-sc
  malloc(?size-of=uv-signal-s/size-of)

pub fun uv-signal-sc-calloc(): uv-signal-sc
  malloc-c(?size-of=uv-signal-s/size-of)

pub fun uv-signal-sc-array(n: int): uv-signal-sca
  malloc(n.int32, ?size-of=uv-signal-s/size-of)

pub fun uv-signal-sc-array-calloc(n: int): uv-signal-sca
  malloc-c(n.int32, ?size-of=uv-signal-s/size-of)

pub struct unnamed-union3
pub type unnamed-union3-c
pub alias unnamed-union3p = c-pointer<unnamed-union3-c>
pub alias unnamed-union3c<s::S> = owned-c<unnamed-union3-c>
pub alias unnamed-union3cb<s::S> = borrowed-c<s,unnamed-union3-c>
pub alias unnamed-union3ca<s::S> = owned-c<c-array<unnamed-union3-c>>

alias uv-signal-cb = c-pointer<intptr_t>
alias uv-signal-cbfn = ((handle1 : c-pointer<uv-signal-s-c>, signum : int) -> ())
alias uv-signal-t1 = uv-signal-s-c
alias koka-uv-signal-t1 = uv-signal-s
pub struct unnamed-struct2
  rbe-left: uv-signal-s-c
  rbe-right: uv-signal-s-c
  rbe-parent: uv-signal-s-c
  rbe-color: int

pub type unnamed-struct2-c
pub alias unnamed-struct2p = c-pointer<unnamed-struct2-c>
pub alias unnamed-struct2c = owned-c<unnamed-struct2-c>
pub alias unnamed-struct2cb<s::S> = borrowed-c<s,unnamed-struct2-c>
pub alias unnamed-struct2ca = owned-c<c-array<unnamed-struct2-c>>

pub value struct uv-buf-t
  base: c-pointer<int>
  len: int

pub type uv-buf-t-c
pub alias uv-buf-tp = c-pointer<uv-buf-t-c>
pub alias uv-buf-tc = owned-c<uv-buf-t-c>
pub alias uv-buf-tcb<s::S> = borrowed-c<s,uv-buf-t-c>
pub alias uv-buf-tca = owned-c<c-array<uv-buf-t-c>>

pub extern uv-buf-t/size-of(c: c-null<uv-buf-t-c>): int32
  c inline "sizeof(struct uv_buf_t)"

pub fun uv-buf-tc(): uv-buf-tc
  malloc(?size-of=uv-buf-t/size-of)

pub fun uv-buf-tc-calloc(): uv-buf-tc
  malloc-c(?size-of=uv-buf-t/size-of)

pub fun uv-buf-tc-array(n: int): uv-buf-tca
  malloc(n.int32, ?size-of=uv-buf-t/size-of)

pub fun uv-buf-tc-array-calloc(n: int): uv-buf-tca
  malloc-c(n.int32, ?size-of=uv-buf-t/size-of)

pub value struct uv-lib-t
  handle1: c-pointer<()>
  errmsg: c-pointer<int>

pub type uv-lib-t-c
pub alias uv-lib-tp = c-pointer<uv-lib-t-c>
pub alias uv-lib-tc = owned-c<uv-lib-t-c>
pub alias uv-lib-tcb<s::S> = borrowed-c<s,uv-lib-t-c>
pub alias uv-lib-tca = owned-c<c-array<uv-lib-t-c>>

pub extern uv-lib-t/size-of(c: c-null<uv-lib-t-c>): int32
  c inline "sizeof(uv_lib_t)"

pub fun uv-lib-tc(): uv-lib-tc
  malloc(?size-of=uv-lib-t/size-of)

pub fun uv-lib-tc-calloc(): uv-lib-tc
  malloc-c(?size-of=uv-lib-t/size-of)

pub fun uv-lib-tc-array(n: int): uv-lib-tca
  malloc(n.int32, ?size-of=uv-lib-t/size-of)

pub fun uv-lib-tc-array-calloc(n: int): uv-lib-tca
  malloc-c(n.int32, ?size-of=uv-lib-t/size-of)

pub type uv-errno-t-enum
  UV_E2BIG
  UV_EACCES
  UV_EADDRINUSE
  UV_EADDRNOTAVAIL
  UV_EAFNOSUPPORT
  UV_EAGAIN
  UV_EAI_ADDRFAMILY
  UV_EAI_AGAIN
  UV_EAI_BADFLAGS
  UV_EAI_BADHINTS
  UV_EAI_CANCELED
  UV_EAI_FAIL
  UV_EAI_FAMILY
  UV_EAI_MEMORY
  UV_EAI_NODATA
  UV_EAI_NONAME
  UV_EAI_OVERFLOW
  UV_EAI_PROTOCOL
  UV_EAI_SERVICE
  UV_EAI_SOCKTYPE
  UV_EALREADY
  UV_EBADF
  UV_EBUSY
  UV_ECANCELED
  UV_ECHARSET
  UV_ECONNABORTED
  UV_ECONNREFUSED
  UV_ECONNRESET
  UV_EDESTADDRREQ
  UV_EEXIST
  UV_EFAULT
  UV_EFBIG
  UV_EHOSTUNREACH
  UV_EINTR
  UV_EINVAL
  UV_EIO
  UV_EISCONN
  UV_EISDIR
  UV_ELOOP
  UV_EMFILE
  UV_EMSGSIZE
  UV_ENAMETOOLONG
  UV_ENETDOWN
  UV_ENETUNREACH
  UV_ENFILE
  UV_ENOBUFS
  UV_ENODEV
  UV_ENOENT
  UV_ENOMEM
  UV_ENONET
  UV_ENOPROTOOPT
  UV_ENOSPC
  UV_ENOSYS
  UV_ENOTCONN
  UV_ENOTDIR
  UV_ENOTEMPTY
  UV_ENOTSOCK
  UV_ENOTSUP
  UV_EOVERFLOW
  UV_EPERM
  UV_EPIPE
  UV_EPROTO
  UV_EPROTONOSUPPORT
  UV_EPROTOTYPE
  UV_ERANGE
  UV_EROFS
  UV_ESHUTDOWN
  UV_ESPIPE
  UV_ESRCH
  UV_ETIMEDOUT
  UV_ETXTBSY
  UV_EXDEV
  UV_UNKNOWN
  UV_EOF
  UV_ENXIO
  UV_EMLINK
  UV_EHOSTDOWN
  UV_EREMOTEIO
  UV_ENOTTY
  UV_EFTYPE
  UV_EILSEQ
  UV_ESOCKTNOSUPPORT
  UV_ENODATA
  UV_EUNATCH
  UV_ERRNO_MAX

pub fun uv-errno-t-enum/int(i: uv-errno-t-enum): int32
  match i
    UV_E2BIG -> -7.int32
    UV_EACCES -> -13.int32
    UV_EADDRINUSE -> -98.int32
    UV_EADDRNOTAVAIL -> -99.int32
    UV_EAFNOSUPPORT -> -97.int32
    UV_EAGAIN -> -11.int32
    UV_EAI_ADDRFAMILY -> -3000.int32
    UV_EAI_AGAIN -> -3001.int32
    UV_EAI_BADFLAGS -> -3002.int32
    UV_EAI_BADHINTS -> -3013.int32
    UV_EAI_CANCELED -> -3003.int32
    UV_EAI_FAIL -> -3004.int32
    UV_EAI_FAMILY -> -3005.int32
    UV_EAI_MEMORY -> -3006.int32
    UV_EAI_NODATA -> -3007.int32
    UV_EAI_NONAME -> -3008.int32
    UV_EAI_OVERFLOW -> -3009.int32
    UV_EAI_PROTOCOL -> -3014.int32
    UV_EAI_SERVICE -> -3010.int32
    UV_EAI_SOCKTYPE -> -3011.int32
    UV_EALREADY -> -114.int32
    UV_EBADF -> -9.int32
    UV_EBUSY -> -16.int32
    UV_ECANCELED -> -125.int32
    UV_ECHARSET -> -4080.int32
    UV_ECONNABORTED -> -103.int32
    UV_ECONNREFUSED -> -111.int32
    UV_ECONNRESET -> -104.int32
    UV_EDESTADDRREQ -> -89.int32
    UV_EEXIST -> -17.int32
    UV_EFAULT -> -14.int32
    UV_EFBIG -> -27.int32
    UV_EHOSTUNREACH -> -113.int32
    UV_EINTR -> -4.int32
    UV_EINVAL -> -22.int32
    UV_EIO -> -5.int32
    UV_EISCONN -> -106.int32
    UV_EISDIR -> -21.int32
    UV_ELOOP -> -40.int32
    UV_EMFILE -> -24.int32
    UV_EMSGSIZE -> -90.int32
    UV_ENAMETOOLONG -> -36.int32
    UV_ENETDOWN -> -100.int32
    UV_ENETUNREACH -> -101.int32
    UV_ENFILE -> -23.int32
    UV_ENOBUFS -> -105.int32
    UV_ENODEV -> -19.int32
    UV_ENOENT -> -2.int32
    UV_ENOMEM -> -12.int32
    UV_ENONET -> -64.int32
    UV_ENOPROTOOPT -> -92.int32
    UV_ENOSPC -> -28.int32
    UV_ENOSYS -> -38.int32
    UV_ENOTCONN -> -107.int32
    UV_ENOTDIR -> -20.int32
    UV_ENOTEMPTY -> -39.int32
    UV_ENOTSOCK -> -88.int32
    UV_ENOTSUP -> -95.int32
    UV_EOVERFLOW -> -75.int32
    UV_EPERM -> -1.int32
    UV_EPIPE -> -32.int32
    UV_EPROTO -> -71.int32
    UV_EPROTONOSUPPORT -> -93.int32
    UV_EPROTOTYPE -> -91.int32
    UV_ERANGE -> -34.int32
    UV_EROFS -> -30.int32
    UV_ESHUTDOWN -> -108.int32
    UV_ESPIPE -> -29.int32
    UV_ESRCH -> -3.int32
    UV_ETIMEDOUT -> -110.int32
    UV_ETXTBSY -> -26.int32
    UV_EXDEV -> -18.int32
    UV_UNKNOWN -> -4094.int32
    UV_EOF -> -4095.int32
    UV_ENXIO -> -6.int32
    UV_EMLINK -> -31.int32
    UV_EHOSTDOWN -> -112.int32
    UV_EREMOTEIO -> -121.int32
    UV_ENOTTY -> -25.int32
    UV_EFTYPE -> -4028.int32
    UV_EILSEQ -> -84.int32
    UV_ESOCKTNOSUPPORT -> -94.int32
    UV_ENODATA -> -61.int32
    UV_EUNATCH -> -49.int32
    UV_ERRNO_MAX -> -4096.int32

pub fun int/uv-errno-t-enum(i: int32): exn uv-errno-t-enum
  match i.int
    -7 -> UV_E2BIG
    -13 -> UV_EACCES
    -98 -> UV_EADDRINUSE
    -99 -> UV_EADDRNOTAVAIL
    -97 -> UV_EAFNOSUPPORT
    -11 -> UV_EAGAIN
    -3000 -> UV_EAI_ADDRFAMILY
    -3001 -> UV_EAI_AGAIN
    -3002 -> UV_EAI_BADFLAGS
    -3013 -> UV_EAI_BADHINTS
    -3003 -> UV_EAI_CANCELED
    -3004 -> UV_EAI_FAIL
    -3005 -> UV_EAI_FAMILY
    -3006 -> UV_EAI_MEMORY
    -3007 -> UV_EAI_NODATA
    -3008 -> UV_EAI_NONAME
    -3009 -> UV_EAI_OVERFLOW
    -3014 -> UV_EAI_PROTOCOL
    -3010 -> UV_EAI_SERVICE
    -3011 -> UV_EAI_SOCKTYPE
    -114 -> UV_EALREADY
    -9 -> UV_EBADF
    -16 -> UV_EBUSY
    -125 -> UV_ECANCELED
    -4080 -> UV_ECHARSET
    -103 -> UV_ECONNABORTED
    -111 -> UV_ECONNREFUSED
    -104 -> UV_ECONNRESET
    -89 -> UV_EDESTADDRREQ
    -17 -> UV_EEXIST
    -14 -> UV_EFAULT
    -27 -> UV_EFBIG
    -113 -> UV_EHOSTUNREACH
    -4 -> UV_EINTR
    -22 -> UV_EINVAL
    -5 -> UV_EIO
    -106 -> UV_EISCONN
    -21 -> UV_EISDIR
    -40 -> UV_ELOOP
    -24 -> UV_EMFILE
    -90 -> UV_EMSGSIZE
    -36 -> UV_ENAMETOOLONG
    -100 -> UV_ENETDOWN
    -101 -> UV_ENETUNREACH
    -23 -> UV_ENFILE
    -105 -> UV_ENOBUFS
    -19 -> UV_ENODEV
    -2 -> UV_ENOENT
    -12 -> UV_ENOMEM
    -64 -> UV_ENONET
    -92 -> UV_ENOPROTOOPT
    -28 -> UV_ENOSPC
    -38 -> UV_ENOSYS
    -107 -> UV_ENOTCONN
    -20 -> UV_ENOTDIR
    -39 -> UV_ENOTEMPTY
    -88 -> UV_ENOTSOCK
    -95 -> UV_ENOTSUP
    -75 -> UV_EOVERFLOW
    -1 -> UV_EPERM
    -32 -> UV_EPIPE
    -71 -> UV_EPROTO
    -93 -> UV_EPROTONOSUPPORT
    -91 -> UV_EPROTOTYPE
    -34 -> UV_ERANGE
    -30 -> UV_EROFS
    -108 -> UV_ESHUTDOWN
    -29 -> UV_ESPIPE
    -3 -> UV_ESRCH
    -110 -> UV_ETIMEDOUT
    -26 -> UV_ETXTBSY
    -18 -> UV_EXDEV
    -4094 -> UV_UNKNOWN
    -4095 -> UV_EOF
    -6 -> UV_ENXIO
    -31 -> UV_EMLINK
    -112 -> UV_EHOSTDOWN
    -121 -> UV_EREMOTEIO
    -25 -> UV_ENOTTY
    -4028 -> UV_EFTYPE
    -84 -> UV_EILSEQ
    -94 -> UV_ESOCKTNOSUPPORT
    -61 -> UV_ENODATA
    -49 -> UV_EUNATCH
    -4096 -> UV_ERRNO_MAX

pub type uv-req-type-enum
  UV_UNKNOWN_REQ
  UV_REQ
  UV_CONNECT
  UV_WRITE
  UV_SHUTDOWN
  UV_UDP_SEND
  UV_FS
  UV_WORK
  UV_GETADDRINFO
  UV_GETNAMEINFO
  UV_RANDOM
  UV_REQ_TYPE_MAX

pub fun uv-req-type-enum/int(i: uv-req-type-enum): int32
  match i
    UV_UNKNOWN_REQ -> 0.int32
    UV_REQ -> 1.int32
    UV_CONNECT -> 2.int32
    UV_WRITE -> 3.int32
    UV_SHUTDOWN -> 4.int32
    UV_UDP_SEND -> 5.int32
    UV_FS -> 6.int32
    UV_WORK -> 7.int32
    UV_GETADDRINFO -> 8.int32
    UV_GETNAMEINFO -> 9.int32
    UV_RANDOM -> 10.int32
    UV_REQ_TYPE_MAX -> 11.int32

pub fun int/uv-req-type-enum(i: int32): exn uv-req-type-enum
  match i.int
    0 -> UV_UNKNOWN_REQ
    1 -> UV_REQ
    2 -> UV_CONNECT
    3 -> UV_WRITE
    4 -> UV_SHUTDOWN
    5 -> UV_UDP_SEND
    6 -> UV_FS
    7 -> UV_WORK
    8 -> UV_GETADDRINFO
    9 -> UV_GETNAMEINFO
    10 -> UV_RANDOM
    11 -> UV_REQ_TYPE_MAX

pub struct uv-dir-s
pub type uv-dir-s-c
pub alias uv-dir-sp = c-pointer<uv-dir-s-c>
pub alias uv-dir-sc<s::S> = owned-c<uv-dir-s-c>
pub alias uv-dir-scb<s::S> = borrowed-c<s,uv-dir-s-c>
pub alias uv-dir-sca<s::S> = owned-c<c-array<uv-dir-s-c>>

pub extern uv-dir-s/size-of(c: c-null<uv-dir-s-c>): int32
  c inline "sizeof(struct uv_dir_s)"

pub fun uv-dir-sc(): uv-dir-sc<s::S>
  malloc(?size-of=uv-dir-s/size-of)

pub fun uv-dir-sc-calloc(): uv-dir-sc<s::S>
  malloc-c(?size-of=uv-dir-s/size-of)

pub fun uv-dir-sc-array(n: int): uv-dir-sca<s::S>
  malloc(n.int32, ?size-of=uv-dir-s/size-of)

pub fun uv-dir-sc-array-calloc(n: int): uv-dir-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-dir-s/size-of)

alias uv-dirent-t = uv-dirent-s-c
pub value struct uv-dirent-s
  name: c-pointer<int>
  type1: int

pub type uv-dirent-s-c
pub alias uv-dirent-sp = c-pointer<uv-dirent-s-c>
pub alias uv-dirent-sc = owned-c<uv-dirent-s-c>
pub alias uv-dirent-scb<s::S> = borrowed-c<s,uv-dirent-s-c>
pub alias uv-dirent-sca = owned-c<c-array<uv-dirent-s-c>>

pub extern uv-dirent-s/size-of(c: c-null<uv-dirent-s-c>): int32
  c inline "sizeof(struct uv_dirent_s)"

pub fun uv-dirent-sc(): uv-dirent-sc
  malloc(?size-of=uv-dirent-s/size-of)

pub fun uv-dirent-sc-calloc(): uv-dirent-sc
  malloc-c(?size-of=uv-dirent-s/size-of)

pub fun uv-dirent-sc-array(n: int): uv-dirent-sca
  malloc(n.int32, ?size-of=uv-dirent-s/size-of)

pub fun uv-dirent-sc-array-calloc(n: int): uv-dirent-sca
  malloc-c(n.int32, ?size-of=uv-dirent-s/size-of)

pub type uv-dirent-type-t-enum
  UV_DIRENT_UNKNOWN
  UV_DIRENT_FILE
  UV_DIRENT_DIR
  UV_DIRENT_LINK
  UV_DIRENT_FIFO
  UV_DIRENT_SOCKET
  UV_DIRENT_CHAR
  UV_DIRENT_BLOCK

pub fun uv-dirent-type-t-enum/int(i: uv-dirent-type-t-enum): int32
  match i
    UV_DIRENT_UNKNOWN -> 0.int32
    UV_DIRENT_FILE -> 1.int32
    UV_DIRENT_DIR -> 2.int32
    UV_DIRENT_LINK -> 3.int32
    UV_DIRENT_FIFO -> 4.int32
    UV_DIRENT_SOCKET -> 5.int32
    UV_DIRENT_CHAR -> 6.int32
    UV_DIRENT_BLOCK -> 7.int32

pub fun int/uv-dirent-type-t-enum(i: int32): exn uv-dirent-type-t-enum
  match i.int
    0 -> UV_DIRENT_UNKNOWN
    1 -> UV_DIRENT_FILE
    2 -> UV_DIRENT_DIR
    3 -> UV_DIRENT_LINK
    4 -> UV_DIRENT_FIFO
    5 -> UV_DIRENT_SOCKET
    6 -> UV_DIRENT_CHAR
    7 -> UV_DIRENT_BLOCK

alias dir = dirstream-c
pub struct dirstream
pub type dirstream-c
pub alias dirstreamp = c-pointer<dirstream-c>
pub alias dirstreamc = owned-c<dirstream-c>
pub alias dirstreamcb<s::S> = borrowed-c<s,dirstream-c>
pub alias dirstreamca = owned-c<c-array<dirstream-c>>

pub struct uv-stream-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union5-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  write-queue-size: int
  alloc-cb: uv-alloc-cb
  read-cb: uv-read-cb
  connect-req: c-pointer<uv-connect-s-c>
  shutdown-req: c-pointer<uv-shutdown-s-c>
  io-watcher: koka-uv-io-t
  write-queue: uv-queue-c
  write-completed-queue: uv-queue-c
  connection-cb: uv-connection-cb
  delayed-error: int
  accepted-fd: int
  queued-fds: c-pointer<()>

pub type uv-stream-s-c
pub alias uv-stream-sp = c-pointer<uv-stream-s-c>
pub alias uv-stream-sc = owned-c<uv-stream-s-c>
pub alias uv-stream-scb<s::S> = borrowed-c<s,uv-stream-s-c>
pub alias uv-stream-sca = owned-c<c-array<uv-stream-s-c>>

pub extern uv-stream-s/size-of(c: c-null<uv-stream-s-c>): int32
  c inline "sizeof(struct uv_stream_s)"

pub fun uv-stream-sc(): uv-stream-sc
  malloc(?size-of=uv-stream-s/size-of)

pub fun uv-stream-sc-calloc(): uv-stream-sc
  malloc-c(?size-of=uv-stream-s/size-of)

pub fun uv-stream-sc-array(n: int): uv-stream-sca
  malloc(n.int32, ?size-of=uv-stream-s/size-of)

pub fun uv-stream-sc-array-calloc(n: int): uv-stream-sca
  malloc-c(n.int32, ?size-of=uv-stream-s/size-of)

pub struct unnamed-union5
pub type unnamed-union5-c
pub alias unnamed-union5p = c-pointer<unnamed-union5-c>
pub alias unnamed-union5c<s::S> = owned-c<unnamed-union5-c>
pub alias unnamed-union5cb<s::S> = borrowed-c<s,unnamed-union5-c>
pub alias unnamed-union5ca<s::S> = owned-c<c-array<unnamed-union5-c>>

alias uv-alloc-cb = c-pointer<intptr_t>
alias uv-alloc-cbfn = ((handle1 : c-pointer<uv-handle-s-c>, suggested_size : int, buf : c-pointer<uv-buf-t-c>) -> ())
alias uv-read-cb = c-pointer<intptr_t>
alias uv-read-cbfn = ((stream : c-pointer<uv-stream-s-c>, nread : int, buf : c-pointer<uv-buf-t-c>) -> ())
alias uv-stream-t = uv-stream-s-c
alias koka-uv-stream-t = uv-stream-s
alias uv-connect-t = uv-connect-s-c
pub struct uv-connect-s
pub type uv-connect-s-c
pub alias uv-connect-sp = c-pointer<uv-connect-s-c>
pub alias uv-connect-sc<s::S> = owned-c<uv-connect-s-c>
pub alias uv-connect-scb<s::S> = borrowed-c<s,uv-connect-s-c>
pub alias uv-connect-sca<s::S> = owned-c<c-array<uv-connect-s-c>>

pub extern uv-connect-s/size-of(c: c-null<uv-connect-s-c>): int32
  c inline "sizeof(struct uv_connect_s)"

pub fun uv-connect-sc(): uv-connect-sc<s::S>
  malloc(?size-of=uv-connect-s/size-of)

pub fun uv-connect-sc-calloc(): uv-connect-sc<s::S>
  malloc-c(?size-of=uv-connect-s/size-of)

pub fun uv-connect-sc-array(n: int): uv-connect-sca<s::S>
  malloc(n.int32, ?size-of=uv-connect-s/size-of)

pub fun uv-connect-sc-array-calloc(n: int): uv-connect-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-connect-s/size-of)

alias uv-connect-cb = c-pointer<intptr_t>
alias uv-connect-cbfn = ((req : c-pointer<uv-connect-s-c>, status : int) -> ())
alias uv-shutdown-t = uv-shutdown-s-c
pub struct uv-shutdown-s
pub type uv-shutdown-s-c
pub alias uv-shutdown-sp = c-pointer<uv-shutdown-s-c>
pub alias uv-shutdown-sc<s::S> = owned-c<uv-shutdown-s-c>
pub alias uv-shutdown-scb<s::S> = borrowed-c<s,uv-shutdown-s-c>
pub alias uv-shutdown-sca<s::S> = owned-c<c-array<uv-shutdown-s-c>>

pub extern uv-shutdown-s/size-of(c: c-null<uv-shutdown-s-c>): int32
  c inline "sizeof(struct uv_shutdown_s)"

pub fun uv-shutdown-sc(): uv-shutdown-sc<s::S>
  malloc(?size-of=uv-shutdown-s/size-of)

pub fun uv-shutdown-sc-calloc(): uv-shutdown-sc<s::S>
  malloc-c(?size-of=uv-shutdown-s/size-of)

pub fun uv-shutdown-sc-array(n: int): uv-shutdown-sca<s::S>
  malloc(n.int32, ?size-of=uv-shutdown-s/size-of)

pub fun uv-shutdown-sc-array-calloc(n: int): uv-shutdown-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-shutdown-s/size-of)

alias uv-shutdown-cb = c-pointer<intptr_t>
alias uv-shutdown-cbfn = ((req : c-pointer<uv-shutdown-s-c>, status : int) -> ())
alias uv-connection-cb = c-pointer<intptr_t>
alias uv-connection-cbfn = ((server : c-pointer<uv-stream-s-c>, status : int) -> ())
pub struct uv-tcp-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union6-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  write-queue-size: int
  alloc-cb: uv-alloc-cb
  read-cb: uv-read-cb
  connect-req: c-pointer<uv-connect-s-c>
  shutdown-req: c-pointer<uv-shutdown-s-c>
  io-watcher: koka-uv-io-t
  write-queue: uv-queue-c
  write-completed-queue: uv-queue-c
  connection-cb: uv-connection-cb
  delayed-error: int
  accepted-fd: int
  queued-fds: c-pointer<()>

pub type uv-tcp-s-c
pub alias uv-tcp-sp = c-pointer<uv-tcp-s-c>
pub alias uv-tcp-sc = owned-c<uv-tcp-s-c>
pub alias uv-tcp-scb<s::S> = borrowed-c<s,uv-tcp-s-c>
pub alias uv-tcp-sca = owned-c<c-array<uv-tcp-s-c>>

pub extern uv-tcp-s/size-of(c: c-null<uv-tcp-s-c>): int32
  c inline "sizeof(struct uv_tcp_s)"

pub fun uv-tcp-sc(): uv-tcp-sc
  malloc(?size-of=uv-tcp-s/size-of)

pub fun uv-tcp-sc-calloc(): uv-tcp-sc
  malloc-c(?size-of=uv-tcp-s/size-of)

pub fun uv-tcp-sc-array(n: int): uv-tcp-sca
  malloc(n.int32, ?size-of=uv-tcp-s/size-of)

pub fun uv-tcp-sc-array-calloc(n: int): uv-tcp-sca
  malloc-c(n.int32, ?size-of=uv-tcp-s/size-of)

pub struct unnamed-union6
pub type unnamed-union6-c
pub alias unnamed-union6p = c-pointer<unnamed-union6-c>
pub alias unnamed-union6c<s::S> = owned-c<unnamed-union6-c>
pub alias unnamed-union6cb<s::S> = borrowed-c<s,unnamed-union6-c>
pub alias unnamed-union6ca<s::S> = owned-c<c-array<unnamed-union6-c>>

pub struct uv-udp-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union7-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  send-queue-size: int
  send-queue-count: int
  alloc-cb: uv-alloc-cb
  recv-cb: uv-udp-recv-cb
  io-watcher: koka-uv-io-t
  write-queue: uv-queue-c
  write-completed-queue: uv-queue-c

pub type uv-udp-s-c
pub alias uv-udp-sp = c-pointer<uv-udp-s-c>
pub alias uv-udp-sc = owned-c<uv-udp-s-c>
pub alias uv-udp-scb<s::S> = borrowed-c<s,uv-udp-s-c>
pub alias uv-udp-sca = owned-c<c-array<uv-udp-s-c>>

pub extern uv-udp-s/size-of(c: c-null<uv-udp-s-c>): int32
  c inline "sizeof(struct uv_udp_s)"

pub fun uv-udp-sc(): uv-udp-sc
  malloc(?size-of=uv-udp-s/size-of)

pub fun uv-udp-sc-calloc(): uv-udp-sc
  malloc-c(?size-of=uv-udp-s/size-of)

pub fun uv-udp-sc-array(n: int): uv-udp-sca
  malloc(n.int32, ?size-of=uv-udp-s/size-of)

pub fun uv-udp-sc-array-calloc(n: int): uv-udp-sca
  malloc-c(n.int32, ?size-of=uv-udp-s/size-of)

pub struct unnamed-union7
pub type unnamed-union7-c
pub alias unnamed-union7p = c-pointer<unnamed-union7-c>
pub alias unnamed-union7c<s::S> = owned-c<unnamed-union7-c>
pub alias unnamed-union7cb<s::S> = borrowed-c<s,unnamed-union7-c>
pub alias unnamed-union7ca<s::S> = owned-c<c-array<unnamed-union7-c>>

alias uv-udp-recv-cb = c-pointer<intptr_t>
alias uv-udp-recv-cbfn = ((handle1 : c-pointer<uv-udp-s-c>, nread : int, buf : c-pointer<uv-buf-t-c>, addr : c-pointer<sockaddr-c>, flags : int) -> ())
alias uv-udp-t = uv-udp-s-c
alias koka-uv-udp-t = uv-udp-s
pub struct sockaddr
pub type sockaddr-c
pub alias sockaddrp = c-pointer<sockaddr-c>
pub alias sockaddrc = owned-c<sockaddr-c>
pub alias sockaddrcb<s::S> = borrowed-c<s,sockaddr-c>
pub alias sockaddrca = owned-c<c-array<sockaddr-c>>

pub struct uv-pipe-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union8-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  write-queue-size: int
  alloc-cb: uv-alloc-cb
  read-cb: uv-read-cb
  connect-req: c-pointer<uv-connect-s-c>
  shutdown-req: c-pointer<uv-shutdown-s-c>
  io-watcher: koka-uv-io-t
  write-queue: uv-queue-c
  write-completed-queue: uv-queue-c
  connection-cb: uv-connection-cb
  delayed-error: int
  accepted-fd: int
  queued-fds: c-pointer<()>
  ipc: int
  pipe-fname: c-pointer<int>

pub type uv-pipe-s-c
pub alias uv-pipe-sp = c-pointer<uv-pipe-s-c>
pub alias uv-pipe-sc = owned-c<uv-pipe-s-c>
pub alias uv-pipe-scb<s::S> = borrowed-c<s,uv-pipe-s-c>
pub alias uv-pipe-sca = owned-c<c-array<uv-pipe-s-c>>

pub extern uv-pipe-s/size-of(c: c-null<uv-pipe-s-c>): int32
  c inline "sizeof(struct uv_pipe_s)"

pub fun uv-pipe-sc(): uv-pipe-sc
  malloc(?size-of=uv-pipe-s/size-of)

pub fun uv-pipe-sc-calloc(): uv-pipe-sc
  malloc-c(?size-of=uv-pipe-s/size-of)

pub fun uv-pipe-sc-array(n: int): uv-pipe-sca
  malloc(n.int32, ?size-of=uv-pipe-s/size-of)

pub fun uv-pipe-sc-array-calloc(n: int): uv-pipe-sca
  malloc-c(n.int32, ?size-of=uv-pipe-s/size-of)

pub struct unnamed-union8
pub type unnamed-union8-c
pub alias unnamed-union8p = c-pointer<unnamed-union8-c>
pub alias unnamed-union8c<s::S> = owned-c<unnamed-union8-c>
pub alias unnamed-union8cb<s::S> = borrowed-c<s,unnamed-union8-c>
pub alias unnamed-union8ca<s::S> = owned-c<c-array<unnamed-union8-c>>

pub struct uv-tty-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union9-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  write-queue-size: int
  alloc-cb: uv-alloc-cb
  read-cb: uv-read-cb
  connect-req: c-pointer<uv-connect-s-c>
  shutdown-req: c-pointer<uv-shutdown-s-c>
  io-watcher: koka-uv-io-t
  write-queue: uv-queue-c
  write-completed-queue: uv-queue-c
  connection-cb: uv-connection-cb
  delayed-error: int
  accepted-fd: int
  queued-fds: c-pointer<()>
  orig-termios: termios-c
  mode: int

pub type uv-tty-s-c
pub alias uv-tty-sp = c-pointer<uv-tty-s-c>
pub alias uv-tty-sc = owned-c<uv-tty-s-c>
pub alias uv-tty-scb<s::S> = borrowed-c<s,uv-tty-s-c>
pub alias uv-tty-sca = owned-c<c-array<uv-tty-s-c>>

pub extern uv-tty-s/size-of(c: c-null<uv-tty-s-c>): int32
  c inline "sizeof(struct uv_tty_s)"

pub fun uv-tty-sc(): uv-tty-sc
  malloc(?size-of=uv-tty-s/size-of)

pub fun uv-tty-sc-calloc(): uv-tty-sc
  malloc-c(?size-of=uv-tty-s/size-of)

pub fun uv-tty-sc-array(n: int): uv-tty-sca
  malloc(n.int32, ?size-of=uv-tty-s/size-of)

pub fun uv-tty-sc-array-calloc(n: int): uv-tty-sca
  malloc-c(n.int32, ?size-of=uv-tty-s/size-of)

pub struct unnamed-union9
pub type unnamed-union9-c
pub alias unnamed-union9p = c-pointer<unnamed-union9-c>
pub alias unnamed-union9c<s::S> = owned-c<unnamed-union9-c>
pub alias unnamed-union9cb<s::S> = borrowed-c<s,unnamed-union9-c>
pub alias unnamed-union9ca<s::S> = owned-c<c-array<unnamed-union9-c>>

pub struct termios
pub type termios-c
pub alias termiosp = c-pointer<termios-c>
pub alias termiosc<s::S> = owned-c<termios-c>
pub alias termioscb<s::S> = borrowed-c<s,termios-c>
pub alias termiosca<s::S> = owned-c<c-array<termios-c>>

pub extern termios/size-of(c: c-null<termios-c>): int32
  c inline "sizeof(struct termios)"

pub fun termiosc(): termiosc<s::S>
  malloc(?size-of=termios/size-of)

pub fun termiosc-calloc(): termiosc<s::S>
  malloc-c(?size-of=termios/size-of)

pub fun termiosc-array(n: int): termiosca<s::S>
  malloc(n.int32, ?size-of=termios/size-of)

pub fun termiosc-array-calloc(n: int): termiosca<s::S>
  malloc-c(n.int32, ?size-of=termios/size-of)

alias tcflag-t = int
alias cc-t = int
alias speed-t = int
pub struct uv-poll-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union10-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  poll-cb: uv-poll-cb
  io-watcher: koka-uv-io-t

pub type uv-poll-s-c
pub alias uv-poll-sp = c-pointer<uv-poll-s-c>
pub alias uv-poll-sc = owned-c<uv-poll-s-c>
pub alias uv-poll-scb<s::S> = borrowed-c<s,uv-poll-s-c>
pub alias uv-poll-sca = owned-c<c-array<uv-poll-s-c>>

pub extern uv-poll-s/size-of(c: c-null<uv-poll-s-c>): int32
  c inline "sizeof(struct uv_poll_s)"

pub fun uv-poll-sc(): uv-poll-sc
  malloc(?size-of=uv-poll-s/size-of)

pub fun uv-poll-sc-calloc(): uv-poll-sc
  malloc-c(?size-of=uv-poll-s/size-of)

pub fun uv-poll-sc-array(n: int): uv-poll-sca
  malloc(n.int32, ?size-of=uv-poll-s/size-of)

pub fun uv-poll-sc-array-calloc(n: int): uv-poll-sca
  malloc-c(n.int32, ?size-of=uv-poll-s/size-of)

pub struct unnamed-union10
pub type unnamed-union10-c
pub alias unnamed-union10p = c-pointer<unnamed-union10-c>
pub alias unnamed-union10c<s::S> = owned-c<unnamed-union10-c>
pub alias unnamed-union10cb<s::S> = borrowed-c<s,unnamed-union10-c>
pub alias unnamed-union10ca<s::S> = owned-c<c-array<unnamed-union10-c>>

alias uv-poll-cb = c-pointer<intptr_t>
alias uv-poll-cbfn = ((handle1 : c-pointer<uv-poll-s-c>, status : int, events : int) -> ())
alias uv-poll-t = uv-poll-s-c
alias koka-uv-poll-t = uv-poll-s
pub struct uv-timer-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union11-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  timer-cb: uv-timer-cb
  node: unnamed-union12-c
  timeout: int
  repeat: int
  start-id: int

pub type uv-timer-s-c
pub alias uv-timer-sp = c-pointer<uv-timer-s-c>
pub alias uv-timer-sc = owned-c<uv-timer-s-c>
pub alias uv-timer-scb<s::S> = borrowed-c<s,uv-timer-s-c>
pub alias uv-timer-sca = owned-c<c-array<uv-timer-s-c>>

pub extern uv-timer-s/size-of(c: c-null<uv-timer-s-c>): int32
  c inline "sizeof(struct uv_timer_s)"

pub fun uv-timer-sc(): uv-timer-sc
  malloc(?size-of=uv-timer-s/size-of)

pub fun uv-timer-sc-calloc(): uv-timer-sc
  malloc-c(?size-of=uv-timer-s/size-of)

pub fun uv-timer-sc-array(n: int): uv-timer-sca
  malloc(n.int32, ?size-of=uv-timer-s/size-of)

pub fun uv-timer-sc-array-calloc(n: int): uv-timer-sca
  malloc-c(n.int32, ?size-of=uv-timer-s/size-of)

pub struct unnamed-union11
pub type unnamed-union11-c
pub alias unnamed-union11p = c-pointer<unnamed-union11-c>
pub alias unnamed-union11c<s::S> = owned-c<unnamed-union11-c>
pub alias unnamed-union11cb<s::S> = borrowed-c<s,unnamed-union11-c>
pub alias unnamed-union11ca<s::S> = owned-c<c-array<unnamed-union11-c>>

alias uv-timer-cb = c-pointer<intptr_t>
alias uv-timer-cbfn = ((handle1 : c-pointer<uv-timer-s-c>) -> ())
alias uv-timer-t = uv-timer-s-c
alias koka-uv-timer-t = uv-timer-s
pub struct unnamed-union12
pub type unnamed-union12-c
pub alias unnamed-union12p = c-pointer<unnamed-union12-c>
pub alias unnamed-union12c<s::S> = owned-c<unnamed-union12-c>
pub alias unnamed-union12cb<s::S> = borrowed-c<s,unnamed-union12-c>
pub alias unnamed-union12ca<s::S> = owned-c<c-array<unnamed-union12-c>>

pub struct uv-prepare-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union13-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  prepare-cb: uv-prepare-cb
  queue: uv-queue-c

pub type uv-prepare-s-c
pub alias uv-prepare-sp = c-pointer<uv-prepare-s-c>
pub alias uv-prepare-sc = owned-c<uv-prepare-s-c>
pub alias uv-prepare-scb<s::S> = borrowed-c<s,uv-prepare-s-c>
pub alias uv-prepare-sca = owned-c<c-array<uv-prepare-s-c>>

pub extern uv-prepare-s/size-of(c: c-null<uv-prepare-s-c>): int32
  c inline "sizeof(struct uv_prepare_s)"

pub fun uv-prepare-sc(): uv-prepare-sc
  malloc(?size-of=uv-prepare-s/size-of)

pub fun uv-prepare-sc-calloc(): uv-prepare-sc
  malloc-c(?size-of=uv-prepare-s/size-of)

pub fun uv-prepare-sc-array(n: int): uv-prepare-sca
  malloc(n.int32, ?size-of=uv-prepare-s/size-of)

pub fun uv-prepare-sc-array-calloc(n: int): uv-prepare-sca
  malloc-c(n.int32, ?size-of=uv-prepare-s/size-of)

pub struct unnamed-union13
pub type unnamed-union13-c
pub alias unnamed-union13p = c-pointer<unnamed-union13-c>
pub alias unnamed-union13c<s::S> = owned-c<unnamed-union13-c>
pub alias unnamed-union13cb<s::S> = borrowed-c<s,unnamed-union13-c>
pub alias unnamed-union13ca<s::S> = owned-c<c-array<unnamed-union13-c>>

alias uv-prepare-cb = c-pointer<intptr_t>
alias uv-prepare-cbfn = ((handle1 : c-pointer<uv-prepare-s-c>) -> ())
alias uv-prepare-t = uv-prepare-s-c
alias koka-uv-prepare-t = uv-prepare-s
pub struct uv-check-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union14-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  check-cb: uv-check-cb
  queue: uv-queue-c

pub type uv-check-s-c
pub alias uv-check-sp = c-pointer<uv-check-s-c>
pub alias uv-check-sc = owned-c<uv-check-s-c>
pub alias uv-check-scb<s::S> = borrowed-c<s,uv-check-s-c>
pub alias uv-check-sca = owned-c<c-array<uv-check-s-c>>

pub extern uv-check-s/size-of(c: c-null<uv-check-s-c>): int32
  c inline "sizeof(struct uv_check_s)"

pub fun uv-check-sc(): uv-check-sc
  malloc(?size-of=uv-check-s/size-of)

pub fun uv-check-sc-calloc(): uv-check-sc
  malloc-c(?size-of=uv-check-s/size-of)

pub fun uv-check-sc-array(n: int): uv-check-sca
  malloc(n.int32, ?size-of=uv-check-s/size-of)

pub fun uv-check-sc-array-calloc(n: int): uv-check-sca
  malloc-c(n.int32, ?size-of=uv-check-s/size-of)

pub struct unnamed-union14
pub type unnamed-union14-c
pub alias unnamed-union14p = c-pointer<unnamed-union14-c>
pub alias unnamed-union14c<s::S> = owned-c<unnamed-union14-c>
pub alias unnamed-union14cb<s::S> = borrowed-c<s,unnamed-union14-c>
pub alias unnamed-union14ca<s::S> = owned-c<c-array<unnamed-union14-c>>

alias uv-check-cb = c-pointer<intptr_t>
alias uv-check-cbfn = ((handle1 : c-pointer<uv-check-s-c>) -> ())
alias uv-check-t = uv-check-s-c
alias koka-uv-check-t = uv-check-s
pub struct uv-idle-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union15-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  idle-cb: uv-idle-cb
  queue: uv-queue-c

pub type uv-idle-s-c
pub alias uv-idle-sp = c-pointer<uv-idle-s-c>
pub alias uv-idle-sc = owned-c<uv-idle-s-c>
pub alias uv-idle-scb<s::S> = borrowed-c<s,uv-idle-s-c>
pub alias uv-idle-sca = owned-c<c-array<uv-idle-s-c>>

pub extern uv-idle-s/size-of(c: c-null<uv-idle-s-c>): int32
  c inline "sizeof(struct uv_idle_s)"

pub fun uv-idle-sc(): uv-idle-sc
  malloc(?size-of=uv-idle-s/size-of)

pub fun uv-idle-sc-calloc(): uv-idle-sc
  malloc-c(?size-of=uv-idle-s/size-of)

pub fun uv-idle-sc-array(n: int): uv-idle-sca
  malloc(n.int32, ?size-of=uv-idle-s/size-of)

pub fun uv-idle-sc-array-calloc(n: int): uv-idle-sca
  malloc-c(n.int32, ?size-of=uv-idle-s/size-of)

pub struct unnamed-union15
pub type unnamed-union15-c
pub alias unnamed-union15p = c-pointer<unnamed-union15-c>
pub alias unnamed-union15c<s::S> = owned-c<unnamed-union15-c>
pub alias unnamed-union15cb<s::S> = borrowed-c<s,unnamed-union15-c>
pub alias unnamed-union15ca<s::S> = owned-c<c-array<unnamed-union15-c>>

alias uv-idle-cb = c-pointer<intptr_t>
alias uv-idle-cbfn = ((handle1 : c-pointer<uv-idle-s-c>) -> ())
alias uv-idle-t = uv-idle-s-c
alias koka-uv-idle-t = uv-idle-s
pub struct uv-process-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union16-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  exit-cb: uv-exit-cb
  pid: int
  queue: uv-queue-c
  status: int

pub type uv-process-s-c
pub alias uv-process-sp = c-pointer<uv-process-s-c>
pub alias uv-process-sc = owned-c<uv-process-s-c>
pub alias uv-process-scb<s::S> = borrowed-c<s,uv-process-s-c>
pub alias uv-process-sca = owned-c<c-array<uv-process-s-c>>

pub extern uv-process-s/size-of(c: c-null<uv-process-s-c>): int32
  c inline "sizeof(struct uv_process_s)"

pub fun uv-process-sc(): uv-process-sc
  malloc(?size-of=uv-process-s/size-of)

pub fun uv-process-sc-calloc(): uv-process-sc
  malloc-c(?size-of=uv-process-s/size-of)

pub fun uv-process-sc-array(n: int): uv-process-sca
  malloc(n.int32, ?size-of=uv-process-s/size-of)

pub fun uv-process-sc-array-calloc(n: int): uv-process-sca
  malloc-c(n.int32, ?size-of=uv-process-s/size-of)

pub struct unnamed-union16
pub type unnamed-union16-c
pub alias unnamed-union16p = c-pointer<unnamed-union16-c>
pub alias unnamed-union16c<s::S> = owned-c<unnamed-union16-c>
pub alias unnamed-union16cb<s::S> = borrowed-c<s,unnamed-union16-c>
pub alias unnamed-union16ca<s::S> = owned-c<c-array<unnamed-union16-c>>

alias uv-exit-cb = c-pointer<intptr_t>
alias uv-exit-cbfn = ((c-pointer<uv-process-s-c>, int, int) -> ())
alias uv-process-t = uv-process-s-c
alias koka-uv-process-t = uv-process-s
pub struct uv-fs-event-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union17-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  path: c-pointer<int>
  cb: uv-fs-event-cb
  watchers: uv-queue-c
  wd: int

pub type uv-fs-event-s-c
pub alias uv-fs-event-sp = c-pointer<uv-fs-event-s-c>
pub alias uv-fs-event-sc = owned-c<uv-fs-event-s-c>
pub alias uv-fs-event-scb<s::S> = borrowed-c<s,uv-fs-event-s-c>
pub alias uv-fs-event-sca = owned-c<c-array<uv-fs-event-s-c>>

pub extern uv-fs-event-s/size-of(c: c-null<uv-fs-event-s-c>): int32
  c inline "sizeof(struct uv_fs_event_s)"

pub fun uv-fs-event-sc(): uv-fs-event-sc
  malloc(?size-of=uv-fs-event-s/size-of)

pub fun uv-fs-event-sc-calloc(): uv-fs-event-sc
  malloc-c(?size-of=uv-fs-event-s/size-of)

pub fun uv-fs-event-sc-array(n: int): uv-fs-event-sca
  malloc(n.int32, ?size-of=uv-fs-event-s/size-of)

pub fun uv-fs-event-sc-array-calloc(n: int): uv-fs-event-sca
  malloc-c(n.int32, ?size-of=uv-fs-event-s/size-of)

pub struct unnamed-union17
pub type unnamed-union17-c
pub alias unnamed-union17p = c-pointer<unnamed-union17-c>
pub alias unnamed-union17c<s::S> = owned-c<unnamed-union17-c>
pub alias unnamed-union17cb<s::S> = borrowed-c<s,unnamed-union17-c>
pub alias unnamed-union17ca<s::S> = owned-c<c-array<unnamed-union17-c>>

alias uv-fs-event-cb = c-pointer<intptr_t>
alias uv-fs-event-cbfn = ((handle1 : c-pointer<uv-fs-event-s-c>, filename : c-pointer<int>, events : int, status : int) -> ())
alias uv-fs-event-t = uv-fs-event-s-c
alias koka-uv-fs-event-t = uv-fs-event-s
pub struct uv-fs-poll-s
  data: c-pointer<()>
  loop: c-pointer<uv-loop-s-c>
  type1: int
  close-cb: uv-close-cb
  handle-queue: uv-queue-c
  u: unnamed-union18-c
  next-closing: c-pointer<uv-handle-s-c>
  flags: int
  poll-ctx: c-pointer<()>

pub type uv-fs-poll-s-c
pub alias uv-fs-poll-sp = c-pointer<uv-fs-poll-s-c>
pub alias uv-fs-poll-sc = owned-c<uv-fs-poll-s-c>
pub alias uv-fs-poll-scb<s::S> = borrowed-c<s,uv-fs-poll-s-c>
pub alias uv-fs-poll-sca = owned-c<c-array<uv-fs-poll-s-c>>

pub extern uv-fs-poll-s/size-of(c: c-null<uv-fs-poll-s-c>): int32
  c inline "sizeof(struct uv_fs_poll_s)"

pub fun uv-fs-poll-sc(): uv-fs-poll-sc
  malloc(?size-of=uv-fs-poll-s/size-of)

pub fun uv-fs-poll-sc-calloc(): uv-fs-poll-sc
  malloc-c(?size-of=uv-fs-poll-s/size-of)

pub fun uv-fs-poll-sc-array(n: int): uv-fs-poll-sca
  malloc(n.int32, ?size-of=uv-fs-poll-s/size-of)

pub fun uv-fs-poll-sc-array-calloc(n: int): uv-fs-poll-sca
  malloc-c(n.int32, ?size-of=uv-fs-poll-s/size-of)

pub struct unnamed-union18
pub type unnamed-union18-c
pub alias unnamed-union18p = c-pointer<unnamed-union18-c>
pub alias unnamed-union18c<s::S> = owned-c<unnamed-union18-c>
pub alias unnamed-union18cb<s::S> = borrowed-c<s,unnamed-union18-c>
pub alias unnamed-union18ca<s::S> = owned-c<c-array<unnamed-union18-c>>

pub struct uv-req-s
pub type uv-req-s-c
pub alias uv-req-sp = c-pointer<uv-req-s-c>
pub alias uv-req-sc<s::S> = owned-c<uv-req-s-c>
pub alias uv-req-scb<s::S> = borrowed-c<s,uv-req-s-c>
pub alias uv-req-sca<s::S> = owned-c<c-array<uv-req-s-c>>

pub extern uv-req-s/size-of(c: c-null<uv-req-s-c>): int32
  c inline "sizeof(struct uv_req_s)"

pub fun uv-req-sc(): uv-req-sc<s::S>
  malloc(?size-of=uv-req-s/size-of)

pub fun uv-req-sc-calloc(): uv-req-sc<s::S>
  malloc-c(?size-of=uv-req-s/size-of)

pub fun uv-req-sc-array(n: int): uv-req-sca<s::S>
  malloc(n.int32, ?size-of=uv-req-s/size-of)

pub fun uv-req-sc-array-calloc(n: int): uv-req-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-req-s/size-of)

pub struct uv-getaddrinfo-s
pub type uv-getaddrinfo-s-c
pub alias uv-getaddrinfo-sp = c-pointer<uv-getaddrinfo-s-c>
pub alias uv-getaddrinfo-sc<s::S> = owned-c<uv-getaddrinfo-s-c>
pub alias uv-getaddrinfo-scb<s::S> = borrowed-c<s,uv-getaddrinfo-s-c>
pub alias uv-getaddrinfo-sca<s::S> = owned-c<c-array<uv-getaddrinfo-s-c>>

pub extern uv-getaddrinfo-s/size-of(c: c-null<uv-getaddrinfo-s-c>): int32
  c inline "sizeof(struct uv_getaddrinfo_s)"

pub fun uv-getaddrinfo-sc(): uv-getaddrinfo-sc<s::S>
  malloc(?size-of=uv-getaddrinfo-s/size-of)

pub fun uv-getaddrinfo-sc-calloc(): uv-getaddrinfo-sc<s::S>
  malloc-c(?size-of=uv-getaddrinfo-s/size-of)

pub fun uv-getaddrinfo-sc-array(n: int): uv-getaddrinfo-sca<s::S>
  malloc(n.int32, ?size-of=uv-getaddrinfo-s/size-of)

pub fun uv-getaddrinfo-sc-array-calloc(n: int): uv-getaddrinfo-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-getaddrinfo-s/size-of)

alias uv-getaddrinfo-cb = c-pointer<intptr_t>
alias uv-getaddrinfo-cbfn = ((req : c-pointer<uv-getaddrinfo-s-c>, status : int, res : c-pointer<addrinfo-c>) -> ())
alias uv-getaddrinfo-t = uv-getaddrinfo-s-c
pub struct addrinfo
pub type addrinfo-c
pub alias addrinfop = c-pointer<addrinfo-c>
pub alias addrinfoc = owned-c<addrinfo-c>
pub alias addrinfocb<s::S> = borrowed-c<s,addrinfo-c>
pub alias addrinfoca = owned-c<c-array<addrinfo-c>>

pub struct uv-getnameinfo-s
pub type uv-getnameinfo-s-c
pub alias uv-getnameinfo-sp = c-pointer<uv-getnameinfo-s-c>
pub alias uv-getnameinfo-sc<s::S> = owned-c<uv-getnameinfo-s-c>
pub alias uv-getnameinfo-scb<s::S> = borrowed-c<s,uv-getnameinfo-s-c>
pub alias uv-getnameinfo-sca<s::S> = owned-c<c-array<uv-getnameinfo-s-c>>

pub extern uv-getnameinfo-s/size-of(c: c-null<uv-getnameinfo-s-c>): int32
  c inline "sizeof(struct uv_getnameinfo_s)"

pub fun uv-getnameinfo-sc(): uv-getnameinfo-sc<s::S>
  malloc(?size-of=uv-getnameinfo-s/size-of)

pub fun uv-getnameinfo-sc-calloc(): uv-getnameinfo-sc<s::S>
  malloc-c(?size-of=uv-getnameinfo-s/size-of)

pub fun uv-getnameinfo-sc-array(n: int): uv-getnameinfo-sca<s::S>
  malloc(n.int32, ?size-of=uv-getnameinfo-s/size-of)

pub fun uv-getnameinfo-sc-array-calloc(n: int): uv-getnameinfo-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-getnameinfo-s/size-of)

alias uv-getnameinfo-cb = c-pointer<intptr_t>
alias uv-getnameinfo-cbfn = ((req : c-pointer<uv-getnameinfo-s-c>, status : int, hostname : c-pointer<int>, service : c-pointer<int>) -> ())
alias uv-getnameinfo-t = uv-getnameinfo-s-c
pub struct sockaddr-storage
pub type sockaddr-storage-c
pub alias sockaddr-storagep = c-pointer<sockaddr-storage-c>
pub alias sockaddr-storagec<s::S> = owned-c<sockaddr-storage-c>
pub alias sockaddr-storagecb<s::S> = borrowed-c<s,sockaddr-storage-c>
pub alias sockaddr-storageca<s::S> = owned-c<c-array<sockaddr-storage-c>>

pub extern sockaddr-storage/size-of(c: c-null<sockaddr-storage-c>): int32
  c inline "sizeof(struct sockaddr_storage)"

pub fun sockaddr-storagec(): sockaddr-storagec<s::S>
  malloc(?size-of=sockaddr-storage/size-of)

pub fun sockaddr-storagec-calloc(): sockaddr-storagec<s::S>
  malloc-c(?size-of=sockaddr-storage/size-of)

pub fun sockaddr-storagec-array(n: int): sockaddr-storageca<s::S>
  malloc(n.int32, ?size-of=sockaddr-storage/size-of)

pub fun sockaddr-storagec-array-calloc(n: int): sockaddr-storageca<s::S>
  malloc-c(n.int32, ?size-of=sockaddr-storage/size-of)

alias sa-family-t = int
pub struct uv-write-s
pub type uv-write-s-c
pub alias uv-write-sp = c-pointer<uv-write-s-c>
pub alias uv-write-sc<s::S> = owned-c<uv-write-s-c>
pub alias uv-write-scb<s::S> = borrowed-c<s,uv-write-s-c>
pub alias uv-write-sca<s::S> = owned-c<c-array<uv-write-s-c>>

pub extern uv-write-s/size-of(c: c-null<uv-write-s-c>): int32
  c inline "sizeof(struct uv_write_s)"

pub fun uv-write-sc(): uv-write-sc<s::S>
  malloc(?size-of=uv-write-s/size-of)

pub fun uv-write-sc-calloc(): uv-write-sc<s::S>
  malloc-c(?size-of=uv-write-s/size-of)

pub fun uv-write-sc-array(n: int): uv-write-sca<s::S>
  malloc(n.int32, ?size-of=uv-write-s/size-of)

pub fun uv-write-sc-array-calloc(n: int): uv-write-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-write-s/size-of)

alias uv-write-cb = c-pointer<intptr_t>
alias uv-write-cbfn = ((req : c-pointer<uv-write-s-c>, status : int) -> ())
alias uv-write-t = uv-write-s-c
pub struct uv-udp-send-s
pub type uv-udp-send-s-c
pub alias uv-udp-send-sp = c-pointer<uv-udp-send-s-c>
pub alias uv-udp-send-sc<s::S> = owned-c<uv-udp-send-s-c>
pub alias uv-udp-send-scb<s::S> = borrowed-c<s,uv-udp-send-s-c>
pub alias uv-udp-send-sca<s::S> = owned-c<c-array<uv-udp-send-s-c>>

pub extern uv-udp-send-s/size-of(c: c-null<uv-udp-send-s-c>): int32
  c inline "sizeof(struct uv_udp_send_s)"

pub fun uv-udp-send-sc(): uv-udp-send-sc<s::S>
  malloc(?size-of=uv-udp-send-s/size-of)

pub fun uv-udp-send-sc-calloc(): uv-udp-send-sc<s::S>
  malloc-c(?size-of=uv-udp-send-s/size-of)

pub fun uv-udp-send-sc-array(n: int): uv-udp-send-sca<s::S>
  malloc(n.int32, ?size-of=uv-udp-send-s/size-of)

pub fun uv-udp-send-sc-array-calloc(n: int): uv-udp-send-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-udp-send-s/size-of)

alias uv-udp-send-cb = c-pointer<intptr_t>
alias uv-udp-send-cbfn = ((req : c-pointer<uv-udp-send-s-c>, status : int) -> ())
alias uv-udp-send-t = uv-udp-send-s-c
pub struct uv-fs-s
pub type uv-fs-s-c
pub alias uv-fs-sp = c-pointer<uv-fs-s-c>
pub alias uv-fs-sc<s::S> = owned-c<uv-fs-s-c>
pub alias uv-fs-scb<s::S> = borrowed-c<s,uv-fs-s-c>
pub alias uv-fs-sca<s::S> = owned-c<c-array<uv-fs-s-c>>

pub extern uv-fs-s/size-of(c: c-null<uv-fs-s-c>): int32
  c inline "sizeof(struct uv_fs_s)"

pub fun uv-fs-sc(): uv-fs-sc<s::S>
  malloc(?size-of=uv-fs-s/size-of)

pub fun uv-fs-sc-calloc(): uv-fs-sc<s::S>
  malloc-c(?size-of=uv-fs-s/size-of)

pub fun uv-fs-sc-array(n: int): uv-fs-sca<s::S>
  malloc(n.int32, ?size-of=uv-fs-s/size-of)

pub fun uv-fs-sc-array-calloc(n: int): uv-fs-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-fs-s/size-of)

pub type uv-fs-type-enum
  UV_FS_UNKNOWN
  UV_FS_CUSTOM
  UV_FS_OPEN
  UV_FS_CLOSE
  UV_FS_READ
  UV_FS_WRITE
  UV_FS_SENDFILE
  UV_FS_STAT
  UV_FS_LSTAT
  UV_FS_FSTAT
  UV_FS_FTRUNCATE
  UV_FS_UTIME
  UV_FS_FUTIME
  UV_FS_ACCESS
  UV_FS_CHMOD
  UV_FS_FCHMOD
  UV_FS_FSYNC
  UV_FS_FDATASYNC
  UV_FS_UNLINK
  UV_FS_RMDIR
  UV_FS_MKDIR
  UV_FS_MKDTEMP
  UV_FS_RENAME
  UV_FS_SCANDIR
  UV_FS_LINK
  UV_FS_SYMLINK
  UV_FS_READLINK
  UV_FS_CHOWN
  UV_FS_FCHOWN
  UV_FS_REALPATH
  UV_FS_COPYFILE
  UV_FS_LCHOWN
  UV_FS_OPENDIR
  UV_FS_READDIR
  UV_FS_CLOSEDIR
  UV_FS_STATFS
  UV_FS_MKSTEMP
  UV_FS_LUTIME

pub fun uv-fs-type-enum/int(i: uv-fs-type-enum): int32
  match i
    UV_FS_UNKNOWN -> -1.int32
    UV_FS_CUSTOM -> 0.int32
    UV_FS_OPEN -> 1.int32
    UV_FS_CLOSE -> 2.int32
    UV_FS_READ -> 3.int32
    UV_FS_WRITE -> 4.int32
    UV_FS_SENDFILE -> 5.int32
    UV_FS_STAT -> 6.int32
    UV_FS_LSTAT -> 7.int32
    UV_FS_FSTAT -> 8.int32
    UV_FS_FTRUNCATE -> 9.int32
    UV_FS_UTIME -> 10.int32
    UV_FS_FUTIME -> 11.int32
    UV_FS_ACCESS -> 12.int32
    UV_FS_CHMOD -> 13.int32
    UV_FS_FCHMOD -> 14.int32
    UV_FS_FSYNC -> 15.int32
    UV_FS_FDATASYNC -> 16.int32
    UV_FS_UNLINK -> 17.int32
    UV_FS_RMDIR -> 18.int32
    UV_FS_MKDIR -> 19.int32
    UV_FS_MKDTEMP -> 20.int32
    UV_FS_RENAME -> 21.int32
    UV_FS_SCANDIR -> 22.int32
    UV_FS_LINK -> 23.int32
    UV_FS_SYMLINK -> 24.int32
    UV_FS_READLINK -> 25.int32
    UV_FS_CHOWN -> 26.int32
    UV_FS_FCHOWN -> 27.int32
    UV_FS_REALPATH -> 28.int32
    UV_FS_COPYFILE -> 29.int32
    UV_FS_LCHOWN -> 30.int32
    UV_FS_OPENDIR -> 31.int32
    UV_FS_READDIR -> 32.int32
    UV_FS_CLOSEDIR -> 33.int32
    UV_FS_STATFS -> 34.int32
    UV_FS_MKSTEMP -> 35.int32
    UV_FS_LUTIME -> 36.int32

pub fun int/uv-fs-type-enum(i: int32): exn uv-fs-type-enum
  match i.int
    -1 -> UV_FS_UNKNOWN
    0 -> UV_FS_CUSTOM
    1 -> UV_FS_OPEN
    2 -> UV_FS_CLOSE
    3 -> UV_FS_READ
    4 -> UV_FS_WRITE
    5 -> UV_FS_SENDFILE
    6 -> UV_FS_STAT
    7 -> UV_FS_LSTAT
    8 -> UV_FS_FSTAT
    9 -> UV_FS_FTRUNCATE
    10 -> UV_FS_UTIME
    11 -> UV_FS_FUTIME
    12 -> UV_FS_ACCESS
    13 -> UV_FS_CHMOD
    14 -> UV_FS_FCHMOD
    15 -> UV_FS_FSYNC
    16 -> UV_FS_FDATASYNC
    17 -> UV_FS_UNLINK
    18 -> UV_FS_RMDIR
    19 -> UV_FS_MKDIR
    20 -> UV_FS_MKDTEMP
    21 -> UV_FS_RENAME
    22 -> UV_FS_SCANDIR
    23 -> UV_FS_LINK
    24 -> UV_FS_SYMLINK
    25 -> UV_FS_READLINK
    26 -> UV_FS_CHOWN
    27 -> UV_FS_FCHOWN
    28 -> UV_FS_REALPATH
    29 -> UV_FS_COPYFILE
    30 -> UV_FS_LCHOWN
    31 -> UV_FS_OPENDIR
    32 -> UV_FS_READDIR
    33 -> UV_FS_CLOSEDIR
    34 -> UV_FS_STATFS
    35 -> UV_FS_MKSTEMP
    36 -> UV_FS_LUTIME

alias uv-fs-cb = c-pointer<intptr_t>
alias uv-fs-cbfn = ((req : c-pointer<uv-fs-s-c>) -> ())
alias uv-fs-t = uv-fs-s-c
pub struct uv-stat-t
  st-dev: int
  st-mode: int
  st-nlink: int
  st-uid: int
  st-gid: int
  st-rdev: int
  st-ino: int
  st-size: int
  st-blksize: int
  st-blocks: int
  st-flags: int
  st-gen: int
  st-atim: uv-timespec-t-c
  st-mtim: uv-timespec-t-c
  st-ctim: uv-timespec-t-c
  st-birthtim: uv-timespec-t-c

pub type uv-stat-t-c
pub alias uv-stat-tp = c-pointer<uv-stat-t-c>
pub alias uv-stat-tc = owned-c<uv-stat-t-c>
pub alias uv-stat-tcb<s::S> = borrowed-c<s,uv-stat-t-c>
pub alias uv-stat-tca = owned-c<c-array<uv-stat-t-c>>

pub extern uv-stat-t/size-of(c: c-null<uv-stat-t-c>): int32
  c inline "sizeof(uv_stat_t)"

pub fun uv-stat-tc(): uv-stat-tc
  malloc(?size-of=uv-stat-t/size-of)

pub fun uv-stat-tc-calloc(): uv-stat-tc
  malloc-c(?size-of=uv-stat-t/size-of)

pub fun uv-stat-tc-array(n: int): uv-stat-tca
  malloc(n.int32, ?size-of=uv-stat-t/size-of)

pub fun uv-stat-tc-array-calloc(n: int): uv-stat-tca
  malloc-c(n.int32, ?size-of=uv-stat-t/size-of)

pub value struct uv-timespec-t
  tv-sec: int
  tv-nsec: int

pub type uv-timespec-t-c
pub alias uv-timespec-tp = c-pointer<uv-timespec-t-c>
pub alias uv-timespec-tc = owned-c<uv-timespec-t-c>
pub alias uv-timespec-tcb<s::S> = borrowed-c<s,uv-timespec-t-c>
pub alias uv-timespec-tca = owned-c<c-array<uv-timespec-t-c>>

pub extern uv-timespec-t/size-of(c: c-null<uv-timespec-t-c>): int32
  c inline "sizeof(uv_timespec_t)"

pub fun uv-timespec-tc(): uv-timespec-tc
  malloc(?size-of=uv-timespec-t/size-of)

pub fun uv-timespec-tc-calloc(): uv-timespec-tc
  malloc-c(?size-of=uv-timespec-t/size-of)

pub fun uv-timespec-tc-array(n: int): uv-timespec-tca
  malloc(n.int32, ?size-of=uv-timespec-t/size-of)

pub fun uv-timespec-tc-array-calloc(n: int): uv-timespec-tca
  malloc-c(n.int32, ?size-of=uv-timespec-t/size-of)

alias uv-file = int
alias mode-t = int
alias mode-t1 = int
alias off-t = int
alias off-t1 = int
alias uv-uid-t = int
alias uid-t = int
alias uid-t1 = int
alias uv-gid-t = int
alias gid-t = int
alias gid-t1 = int
pub struct uv-work-s
pub type uv-work-s-c
pub alias uv-work-sp = c-pointer<uv-work-s-c>
pub alias uv-work-sc<s::S> = owned-c<uv-work-s-c>
pub alias uv-work-scb<s::S> = borrowed-c<s,uv-work-s-c>
pub alias uv-work-sca<s::S> = owned-c<c-array<uv-work-s-c>>

pub extern uv-work-s/size-of(c: c-null<uv-work-s-c>): int32
  c inline "sizeof(struct uv_work_s)"

pub fun uv-work-sc(): uv-work-sc<s::S>
  malloc(?size-of=uv-work-s/size-of)

pub fun uv-work-sc-calloc(): uv-work-sc<s::S>
  malloc-c(?size-of=uv-work-s/size-of)

pub fun uv-work-sc-array(n: int): uv-work-sca<s::S>
  malloc(n.int32, ?size-of=uv-work-s/size-of)

pub fun uv-work-sc-array-calloc(n: int): uv-work-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-work-s/size-of)

alias uv-work-cb = c-pointer<intptr_t>
alias uv-work-cbfn = ((req : c-pointer<uv-work-s-c>) -> ())
alias uv-work-t = uv-work-s-c
alias uv-after-work-cb = c-pointer<intptr_t>
alias uv-after-work-cbfn = ((req : c-pointer<uv-work-s-c>, status : int) -> ())
pub struct uv-random-s
pub type uv-random-s-c
pub alias uv-random-sp = c-pointer<uv-random-s-c>
pub alias uv-random-sc<s::S> = owned-c<uv-random-s-c>
pub alias uv-random-scb<s::S> = borrowed-c<s,uv-random-s-c>
pub alias uv-random-sca<s::S> = owned-c<c-array<uv-random-s-c>>

pub extern uv-random-s/size-of(c: c-null<uv-random-s-c>): int32
  c inline "sizeof(struct uv_random_s)"

pub fun uv-random-sc(): uv-random-sc<s::S>
  malloc(?size-of=uv-random-s/size-of)

pub fun uv-random-sc-calloc(): uv-random-sc<s::S>
  malloc-c(?size-of=uv-random-s/size-of)

pub fun uv-random-sc-array(n: int): uv-random-sca<s::S>
  malloc(n.int32, ?size-of=uv-random-s/size-of)

pub fun uv-random-sc-array-calloc(n: int): uv-random-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-random-s/size-of)

alias uv-random-cb = c-pointer<intptr_t>
alias uv-random-cbfn = ((req : c-pointer<uv-random-s-c>, status : int, buf : c-pointer<()>, buflen : int) -> ())
alias uv-random-t = uv-random-s-c
pub value struct uv-env-item-s
  name: c-pointer<int>
  value: c-pointer<int>

pub type uv-env-item-s-c
pub alias uv-env-item-sp = c-pointer<uv-env-item-s-c>
pub alias uv-env-item-sc = owned-c<uv-env-item-s-c>
pub alias uv-env-item-scb<s::S> = borrowed-c<s,uv-env-item-s-c>
pub alias uv-env-item-sca = owned-c<c-array<uv-env-item-s-c>>

pub extern uv-env-item-s/size-of(c: c-null<uv-env-item-s-c>): int32
  c inline "sizeof(struct uv_env_item_s)"

pub fun uv-env-item-sc(): uv-env-item-sc
  malloc(?size-of=uv-env-item-s/size-of)

pub fun uv-env-item-sc-calloc(): uv-env-item-sc
  malloc-c(?size-of=uv-env-item-s/size-of)

pub fun uv-env-item-sc-array(n: int): uv-env-item-sca
  malloc(n.int32, ?size-of=uv-env-item-s/size-of)

pub fun uv-env-item-sc-array-calloc(n: int): uv-env-item-sca
  malloc-c(n.int32, ?size-of=uv-env-item-s/size-of)

pub value struct uv-cpu-info-s
  model: c-pointer<int>
  speed: int
  cpu-times: uv-cpu-times-s-c

pub type uv-cpu-info-s-c
pub alias uv-cpu-info-sp = c-pointer<uv-cpu-info-s-c>
pub alias uv-cpu-info-sc = owned-c<uv-cpu-info-s-c>
pub alias uv-cpu-info-scb<s::S> = borrowed-c<s,uv-cpu-info-s-c>
pub alias uv-cpu-info-sca = owned-c<c-array<uv-cpu-info-s-c>>

pub extern uv-cpu-info-s/size-of(c: c-null<uv-cpu-info-s-c>): int32
  c inline "sizeof(struct uv_cpu_info_s)"

pub fun uv-cpu-info-sc(): uv-cpu-info-sc
  malloc(?size-of=uv-cpu-info-s/size-of)

pub fun uv-cpu-info-sc-calloc(): uv-cpu-info-sc
  malloc-c(?size-of=uv-cpu-info-s/size-of)

pub fun uv-cpu-info-sc-array(n: int): uv-cpu-info-sca
  malloc(n.int32, ?size-of=uv-cpu-info-s/size-of)

pub fun uv-cpu-info-sc-array-calloc(n: int): uv-cpu-info-sca
  malloc-c(n.int32, ?size-of=uv-cpu-info-s/size-of)

pub struct uv-cpu-times-s
  user: int
  nice: int
  sys: int
  idle: int
  irq: int

pub type uv-cpu-times-s-c
pub alias uv-cpu-times-sp = c-pointer<uv-cpu-times-s-c>
pub alias uv-cpu-times-sc = owned-c<uv-cpu-times-s-c>
pub alias uv-cpu-times-scb<s::S> = borrowed-c<s,uv-cpu-times-s-c>
pub alias uv-cpu-times-sca = owned-c<c-array<uv-cpu-times-s-c>>

pub extern uv-cpu-times-s/size-of(c: c-null<uv-cpu-times-s-c>): int32
  c inline "sizeof(struct uv_cpu_times_s)"

pub fun uv-cpu-times-sc(): uv-cpu-times-sc
  malloc(?size-of=uv-cpu-times-s/size-of)

pub fun uv-cpu-times-sc-calloc(): uv-cpu-times-sc
  malloc-c(?size-of=uv-cpu-times-s/size-of)

pub fun uv-cpu-times-sc-array(n: int): uv-cpu-times-sca
  malloc(n.int32, ?size-of=uv-cpu-times-s/size-of)

pub fun uv-cpu-times-sc-array-calloc(n: int): uv-cpu-times-sca
  malloc-c(n.int32, ?size-of=uv-cpu-times-s/size-of)

pub struct uv-interface-address-s
pub type uv-interface-address-s-c
pub alias uv-interface-address-sp = c-pointer<uv-interface-address-s-c>
pub alias uv-interface-address-sc<s::S> = owned-c<uv-interface-address-s-c>
pub alias uv-interface-address-scb<s::S> = borrowed-c<s,uv-interface-address-s-c>
pub alias uv-interface-address-sca<s::S> = owned-c<c-array<uv-interface-address-s-c>>

pub extern uv-interface-address-s/size-of(c: c-null<uv-interface-address-s-c>): int32
  c inline "sizeof(struct uv_interface_address_s)"

pub fun uv-interface-address-sc(): uv-interface-address-sc<s::S>
  malloc(?size-of=uv-interface-address-s/size-of)

pub fun uv-interface-address-sc-calloc(): uv-interface-address-sc<s::S>
  malloc-c(?size-of=uv-interface-address-s/size-of)

pub fun uv-interface-address-sc-array(n: int): uv-interface-address-sca<s::S>
  malloc(n.int32, ?size-of=uv-interface-address-s/size-of)

pub fun uv-interface-address-sc-array-calloc(n: int): uv-interface-address-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-interface-address-s/size-of)

pub struct unnamed-union19
pub type unnamed-union19-c
pub alias unnamed-union19p = c-pointer<unnamed-union19-c>
pub alias unnamed-union19c = owned-c<unnamed-union19-c>
pub alias unnamed-union19cb<s::S> = borrowed-c<s,unnamed-union19-c>
pub alias unnamed-union19ca = owned-c<c-array<unnamed-union19-c>>

pub struct sockaddr-in
pub type sockaddr-in-c
pub alias sockaddr-inp = c-pointer<sockaddr-in-c>
pub alias sockaddr-inc<s::S> = owned-c<sockaddr-in-c>
pub alias sockaddr-incb<s::S> = borrowed-c<s,sockaddr-in-c>
pub alias sockaddr-inca<s::S> = owned-c<c-array<sockaddr-in-c>>

pub extern sockaddr-in/size-of(c: c-null<sockaddr-in-c>): int32
  c inline "sizeof(struct sockaddr_in)"

pub fun sockaddr-inc(): sockaddr-inc<s::S>
  malloc(?size-of=sockaddr-in/size-of)

pub fun sockaddr-inc-calloc(): sockaddr-inc<s::S>
  malloc-c(?size-of=sockaddr-in/size-of)

pub fun sockaddr-inc-array(n: int): sockaddr-inca<s::S>
  malloc(n.int32, ?size-of=sockaddr-in/size-of)

pub fun sockaddr-inc-array-calloc(n: int): sockaddr-inca<s::S>
  malloc-c(n.int32, ?size-of=sockaddr-in/size-of)

alias in-port-t = int
pub value struct in-addr
  s-addr: int

pub type in-addr-c
pub alias in-addrp = c-pointer<in-addr-c>
pub alias in-addrc = owned-c<in-addr-c>
pub alias in-addrcb<s::S> = borrowed-c<s,in-addr-c>
pub alias in-addrca = owned-c<c-array<in-addr-c>>

pub extern in-addr/size-of(c: c-null<in-addr-c>): int32
  c inline "sizeof(struct in_addr)"

pub fun in-addrc(): in-addrc
  malloc(?size-of=in-addr/size-of)

pub fun in-addrc-calloc(): in-addrc
  malloc-c(?size-of=in-addr/size-of)

pub fun in-addrc-array(n: int): in-addrca
  malloc(n.int32, ?size-of=in-addr/size-of)

pub fun in-addrc-array-calloc(n: int): in-addrca
  malloc-c(n.int32, ?size-of=in-addr/size-of)

alias in-addr-t = int
pub struct sockaddr-in6
  sin6-family: int
  sin6-port: int
  sin6-flowinfo: int
  sin6-addr: in6-addr-c
  sin6-scope-id: int

pub type sockaddr-in6-c
pub alias sockaddr-in6p = c-pointer<sockaddr-in6-c>
pub alias sockaddr-in6c = owned-c<sockaddr-in6-c>
pub alias sockaddr-in6cb<s::S> = borrowed-c<s,sockaddr-in6-c>
pub alias sockaddr-in6ca = owned-c<c-array<sockaddr-in6-c>>

pub extern sockaddr-in6/size-of(c: c-null<sockaddr-in6-c>): int32
  c inline "sizeof(struct sockaddr_in6)"

pub fun sockaddr-in6c(): sockaddr-in6c
  malloc(?size-of=sockaddr-in6/size-of)

pub fun sockaddr-in6c-calloc(): sockaddr-in6c
  malloc-c(?size-of=sockaddr-in6/size-of)

pub fun sockaddr-in6c-array(n: int): sockaddr-in6ca
  malloc(n.int32, ?size-of=sockaddr-in6/size-of)

pub fun sockaddr-in6c-array-calloc(n: int): sockaddr-in6ca
  malloc-c(n.int32, ?size-of=sockaddr-in6/size-of)

pub value struct in6-addr
  in6-u: unnamed-union20-c

pub type in6-addr-c
pub alias in6-addrp = c-pointer<in6-addr-c>
pub alias in6-addrc = owned-c<in6-addr-c>
pub alias in6-addrcb<s::S> = borrowed-c<s,in6-addr-c>
pub alias in6-addrca = owned-c<c-array<in6-addr-c>>

pub extern in6-addr/size-of(c: c-null<in6-addr-c>): int32
  c inline "sizeof(struct in6_addr)"

pub fun in6-addrc(): in6-addrc
  malloc(?size-of=in6-addr/size-of)

pub fun in6-addrc-calloc(): in6-addrc
  malloc-c(?size-of=in6-addr/size-of)

pub fun in6-addrc-array(n: int): in6-addrca
  malloc(n.int32, ?size-of=in6-addr/size-of)

pub fun in6-addrc-array-calloc(n: int): in6-addrca
  malloc-c(n.int32, ?size-of=in6-addr/size-of)

pub struct unnamed-union20
pub type unnamed-union20-c
pub alias unnamed-union20p = c-pointer<unnamed-union20-c>
pub alias unnamed-union20c<s::S> = owned-c<unnamed-union20-c>
pub alias unnamed-union20cb<s::S> = borrowed-c<s,unnamed-union20-c>
pub alias unnamed-union20ca<s::S> = owned-c<c-array<unnamed-union20-c>>

pub struct unnamed-union21
pub type unnamed-union21-c
pub alias unnamed-union21p = c-pointer<unnamed-union21-c>
pub alias unnamed-union21c = owned-c<unnamed-union21-c>
pub alias unnamed-union21cb<s::S> = borrowed-c<s,unnamed-union21-c>
pub alias unnamed-union21ca = owned-c<c-array<unnamed-union21-c>>

pub struct uv-passwd-s
  username: c-pointer<int>
  uid: int
  gid: int
  shell: c-pointer<int>
  homedir: c-pointer<int>

pub type uv-passwd-s-c
pub alias uv-passwd-sp = c-pointer<uv-passwd-s-c>
pub alias uv-passwd-sc = owned-c<uv-passwd-s-c>
pub alias uv-passwd-scb<s::S> = borrowed-c<s,uv-passwd-s-c>
pub alias uv-passwd-sca = owned-c<c-array<uv-passwd-s-c>>

pub extern uv-passwd-s/size-of(c: c-null<uv-passwd-s-c>): int32
  c inline "sizeof(struct uv_passwd_s)"

pub fun uv-passwd-sc(): uv-passwd-sc
  malloc(?size-of=uv-passwd-s/size-of)

pub fun uv-passwd-sc-calloc(): uv-passwd-sc
  malloc-c(?size-of=uv-passwd-s/size-of)

pub fun uv-passwd-sc-array(n: int): uv-passwd-sca
  malloc(n.int32, ?size-of=uv-passwd-s/size-of)

pub fun uv-passwd-sc-array-calloc(n: int): uv-passwd-sca
  malloc-c(n.int32, ?size-of=uv-passwd-s/size-of)

pub value struct uv-group-s
  groupname: c-pointer<int>
  gid: int
  members: c-pointer<c-pointer<int>>

pub type uv-group-s-c
pub alias uv-group-sp = c-pointer<uv-group-s-c>
pub alias uv-group-sc = owned-c<uv-group-s-c>
pub alias uv-group-scb<s::S> = borrowed-c<s,uv-group-s-c>
pub alias uv-group-sca = owned-c<c-array<uv-group-s-c>>

pub extern uv-group-s/size-of(c: c-null<uv-group-s-c>): int32
  c inline "sizeof(struct uv_group_s)"

pub fun uv-group-sc(): uv-group-sc
  malloc(?size-of=uv-group-s/size-of)

pub fun uv-group-sc-calloc(): uv-group-sc
  malloc-c(?size-of=uv-group-s/size-of)

pub fun uv-group-sc-array(n: int): uv-group-sca
  malloc(n.int32, ?size-of=uv-group-s/size-of)

pub fun uv-group-sc-array-calloc(n: int): uv-group-sca
  malloc-c(n.int32, ?size-of=uv-group-s/size-of)

pub struct uv-utsname-s
pub type uv-utsname-s-c
pub alias uv-utsname-sp = c-pointer<uv-utsname-s-c>
pub alias uv-utsname-sc<s::S> = owned-c<uv-utsname-s-c>
pub alias uv-utsname-scb<s::S> = borrowed-c<s,uv-utsname-s-c>
pub alias uv-utsname-sca<s::S> = owned-c<c-array<uv-utsname-s-c>>

pub extern uv-utsname-s/size-of(c: c-null<uv-utsname-s-c>): int32
  c inline "sizeof(struct uv_utsname_s)"

pub fun uv-utsname-sc(): uv-utsname-sc<s::S>
  malloc(?size-of=uv-utsname-s/size-of)

pub fun uv-utsname-sc-calloc(): uv-utsname-sc<s::S>
  malloc-c(?size-of=uv-utsname-s/size-of)

pub fun uv-utsname-sc-array(n: int): uv-utsname-sca<s::S>
  malloc(n.int32, ?size-of=uv-utsname-s/size-of)

pub fun uv-utsname-sc-array-calloc(n: int): uv-utsname-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-utsname-s/size-of)

pub struct uv-statfs-s
pub type uv-statfs-s-c
pub alias uv-statfs-sp = c-pointer<uv-statfs-s-c>
pub alias uv-statfs-sc<s::S> = owned-c<uv-statfs-s-c>
pub alias uv-statfs-scb<s::S> = borrowed-c<s,uv-statfs-s-c>
pub alias uv-statfs-sca<s::S> = owned-c<c-array<uv-statfs-s-c>>

pub extern uv-statfs-s/size-of(c: c-null<uv-statfs-s-c>): int32
  c inline "sizeof(struct uv_statfs_s)"

pub fun uv-statfs-sc(): uv-statfs-sc<s::S>
  malloc(?size-of=uv-statfs-s/size-of)

pub fun uv-statfs-sc-calloc(): uv-statfs-sc<s::S>
  malloc-c(?size-of=uv-statfs-s/size-of)

pub fun uv-statfs-sc-array(n: int): uv-statfs-sca<s::S>
  malloc(n.int32, ?size-of=uv-statfs-s/size-of)

pub fun uv-statfs-sc-array-calloc(n: int): uv-statfs-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-statfs-s/size-of)

pub struct uv-metrics-s
pub type uv-metrics-s-c
pub alias uv-metrics-sp = c-pointer<uv-metrics-s-c>
pub alias uv-metrics-sc<s::S> = owned-c<uv-metrics-s-c>
pub alias uv-metrics-scb<s::S> = borrowed-c<s,uv-metrics-s-c>
pub alias uv-metrics-sca<s::S> = owned-c<c-array<uv-metrics-s-c>>

pub extern uv-metrics-s/size-of(c: c-null<uv-metrics-s-c>): int32
  c inline "sizeof(struct uv_metrics_s)"

pub fun uv-metrics-sc(): uv-metrics-sc<s::S>
  malloc(?size-of=uv-metrics-s/size-of)

pub fun uv-metrics-sc-calloc(): uv-metrics-sc<s::S>
  malloc-c(?size-of=uv-metrics-s/size-of)

pub fun uv-metrics-sc-array(n: int): uv-metrics-sca<s::S>
  malloc(n.int32, ?size-of=uv-metrics-s/size-of)

pub fun uv-metrics-sc-array-calloc(n: int): uv-metrics-sca<s::S>
  malloc-c(n.int32, ?size-of=uv-metrics-s/size-of)

pub type uv-loop-option-enum
  UV_LOOP_BLOCK_SIGNAL
  UV_METRICS_IDLE_TIME

pub fun uv-loop-option-enum/int(i: uv-loop-option-enum): int32
  match i
    UV_LOOP_BLOCK_SIGNAL -> 0.int32
    UV_METRICS_IDLE_TIME -> 1.int32

pub fun int/uv-loop-option-enum(i: int32): exn uv-loop-option-enum
  match i.int
    0 -> UV_LOOP_BLOCK_SIGNAL
    1 -> UV_METRICS_IDLE_TIME

pub type uv-run-mode-enum
  UV_RUN_DEFAULT
  UV_RUN_ONCE
  UV_RUN_NOWAIT

pub fun uv-run-mode-enum/int(i: uv-run-mode-enum): int32
  match i
    UV_RUN_DEFAULT -> 0.int32
    UV_RUN_ONCE -> 1.int32
    UV_RUN_NOWAIT -> 2.int32

pub fun int/uv-run-mode-enum(i: int32): exn uv-run-mode-enum
  match i.int
    0 -> UV_RUN_DEFAULT
    1 -> UV_RUN_ONCE
    2 -> UV_RUN_NOWAIT

alias uv-malloc-func = c-pointer<intptr_t>
alias uv-malloc-funcfn = ((size : int) -> c-pointer<()>)
alias uv-realloc-func = c-pointer<intptr_t>
alias uv-realloc-funcfn = ((ptr : c-pointer<()>, size : int) -> c-pointer<()>)
alias uv-calloc-func = c-pointer<intptr_t>
alias uv-calloc-funcfn = ((count : int, size : int) -> c-pointer<()>)
alias uv-free-func = c-pointer<intptr_t>
alias uv-free-funcfn = ((ptr : c-pointer<()>) -> ())
pub type uv-clock-id-enum
  UV_CLOCK_MONOTONIC
  UV_CLOCK_REALTIME

pub fun uv-clock-id-enum/int(i: uv-clock-id-enum): int32
  match i
    UV_CLOCK_MONOTONIC -> 0.int32
    UV_CLOCK_REALTIME -> 1.int32

pub fun int/uv-clock-id-enum(i: int32): exn uv-clock-id-enum
  match i.int
    0 -> UV_CLOCK_MONOTONIC
    1 -> UV_CLOCK_REALTIME

pub value struct uv-timespec64-t
  tv-sec: int
  tv-nsec: int

pub type uv-timespec64-t-c
pub alias uv-timespec64-tp = c-pointer<uv-timespec64-t-c>
pub alias uv-timespec64-tc = owned-c<uv-timespec64-t-c>
pub alias uv-timespec64-tcb<s::S> = borrowed-c<s,uv-timespec64-t-c>
pub alias uv-timespec64-tca = owned-c<c-array<uv-timespec64-t-c>>

pub extern uv-timespec64-t/size-of(c: c-null<uv-timespec64-t-c>): int32
  c inline "sizeof(uv_timespec64_t)"

pub fun uv-timespec64-tc(): uv-timespec64-tc
  malloc(?size-of=uv-timespec64-t/size-of)

pub fun uv-timespec64-tc-calloc(): uv-timespec64-tc
  malloc-c(?size-of=uv-timespec64-t/size-of)

pub fun uv-timespec64-tc-array(n: int): uv-timespec64-tca
  malloc(n.int32, ?size-of=uv-timespec64-t/size-of)

pub fun uv-timespec64-tc-array-calloc(n: int): uv-timespec64-tca
  malloc-c(n.int32, ?size-of=uv-timespec64-t/size-of)

pub value struct uv-timeval-t
  tv-sec: int
  tv-usec: int

pub type uv-timeval-t-c
pub alias uv-timeval-tp = c-pointer<uv-timeval-t-c>
pub alias uv-timeval-tc = owned-c<uv-timeval-t-c>
pub alias uv-timeval-tcb<s::S> = borrowed-c<s,uv-timeval-t-c>
pub alias uv-timeval-tca = owned-c<c-array<uv-timeval-t-c>>

pub extern uv-timeval-t/size-of(c: c-null<uv-timeval-t-c>): int32
  c inline "sizeof(uv_timeval_t)"

pub fun uv-timeval-tc(): uv-timeval-tc
  malloc(?size-of=uv-timeval-t/size-of)

pub fun uv-timeval-tc-calloc(): uv-timeval-tc
  malloc-c(?size-of=uv-timeval-t/size-of)

pub fun uv-timeval-tc-array(n: int): uv-timeval-tca
  malloc(n.int32, ?size-of=uv-timeval-t/size-of)

pub fun uv-timeval-tc-array-calloc(n: int): uv-timeval-tca
  malloc-c(n.int32, ?size-of=uv-timeval-t/size-of)

pub value struct uv-timeval64-t
  tv-sec: int
  tv-usec: int

pub type uv-timeval64-t-c
pub alias uv-timeval64-tp = c-pointer<uv-timeval64-t-c>
pub alias uv-timeval64-tc = owned-c<uv-timeval64-t-c>
pub alias uv-timeval64-tcb<s::S> = borrowed-c<s,uv-timeval64-t-c>
pub alias uv-timeval64-tca = owned-c<c-array<uv-timeval64-t-c>>

pub extern uv-timeval64-t/size-of(c: c-null<uv-timeval64-t-c>): int32
  c inline "sizeof(uv_timeval64_t)"

pub fun uv-timeval64-tc(): uv-timeval64-tc
  malloc(?size-of=uv-timeval64-t/size-of)

pub fun uv-timeval64-tc-calloc(): uv-timeval64-tc
  malloc-c(?size-of=uv-timeval64-t/size-of)

pub fun uv-timeval64-tc-array(n: int): uv-timeval64-tca
  malloc(n.int32, ?size-of=uv-timeval64-t/size-of)

pub fun uv-timeval64-tc-array-calloc(n: int): uv-timeval64-tca
  malloc-c(n.int32, ?size-of=uv-timeval64-t/size-of)

pub type uv-membership-enum
  UV_LEAVE_GROUP
  UV_JOIN_GROUP

pub fun uv-membership-enum/int(i: uv-membership-enum): int32
  match i
    UV_LEAVE_GROUP -> 0.int32
    UV_JOIN_GROUP -> 1.int32

pub fun int/uv-membership-enum(i: int32): exn uv-membership-enum
  match i.int
    0 -> UV_LEAVE_GROUP
    1 -> UV_JOIN_GROUP

alias uv-req-t = uv-req-s-c
alias uv-walk-cb = c-pointer<intptr_t>
alias uv-walk-cbfn = ((handle1 : c-pointer<uv-handle-s-c>, arg : c-pointer<()>) -> ())
alias file = io-file-c
pub struct io-file
pub type io-file-c
pub alias io-filep = c-pointer<io-file-c>
pub alias io-filec = owned-c<io-file-c>
pub alias io-filecb<s::S> = borrowed-c<s,io-file-c>
pub alias io-fileca = owned-c<c-array<io-file-c>>

alias uv-os-fd-t = int
alias uv-os-sock-t = int
alias uv-tcp-t = uv-tcp-s-c
alias koka-uv-tcp-t = uv-tcp-s
pub type uv-tcp-flags-enum
  UV_TCP_IPV6ONLY

pub fun uv-tcp-flags-enum/int(i: uv-tcp-flags-enum): int32
  match i
    UV_TCP_IPV6ONLY -> 1.int32

pub fun int/uv-tcp-flags-enum(i: int32): exn uv-tcp-flags-enum
  match i.int
    1 -> UV_TCP_IPV6ONLY

pub type uv-udp-flags-enum
  UV_UDP_IPV6ONLY
  UV_UDP_PARTIAL
  UV_UDP_REUSEADDR
  UV_UDP_MMSG_CHUNK
  UV_UDP_MMSG_FREE
  UV_UDP_LINUX_RECVERR
  UV_UDP_RECVMMSG

pub fun uv-udp-flags-enum/int(i: uv-udp-flags-enum): int32
  match i
    UV_UDP_IPV6ONLY -> 1.int32
    UV_UDP_PARTIAL -> 2.int32
    UV_UDP_REUSEADDR -> 4.int32
    UV_UDP_MMSG_CHUNK -> 8.int32
    UV_UDP_MMSG_FREE -> 16.int32
    UV_UDP_LINUX_RECVERR -> 32.int32
    UV_UDP_RECVMMSG -> 256.int32

pub fun int/uv-udp-flags-enum(i: int32): exn uv-udp-flags-enum
  match i.int
    1 -> UV_UDP_IPV6ONLY
    2 -> UV_UDP_PARTIAL
    4 -> UV_UDP_REUSEADDR
    8 -> UV_UDP_MMSG_CHUNK
    16 -> UV_UDP_MMSG_FREE
    32 -> UV_UDP_LINUX_RECVERR
    256 -> UV_UDP_RECVMMSG

pub type uv-tty-mode-t-enum
  UV_TTY_MODE_NORMAL
  UV_TTY_MODE_RAW
  UV_TTY_MODE_IO

pub fun uv-tty-mode-t-enum/int(i: uv-tty-mode-t-enum): int32
  match i
    UV_TTY_MODE_NORMAL -> 0.int32
    UV_TTY_MODE_RAW -> 1.int32
    UV_TTY_MODE_IO -> 2.int32

pub fun int/uv-tty-mode-t-enum(i: int32): exn uv-tty-mode-t-enum
  match i.int
    0 -> UV_TTY_MODE_NORMAL
    1 -> UV_TTY_MODE_RAW
    2 -> UV_TTY_MODE_IO

pub type uv-tty-vtermstate-t-enum
  UV_TTY_SUPPORTED
  UV_TTY_UNSUPPORTED

pub fun uv-tty-vtermstate-t-enum/int(i: uv-tty-vtermstate-t-enum): int32
  match i
    UV_TTY_SUPPORTED -> 0.int32
    UV_TTY_UNSUPPORTED -> 1.int32

pub fun int/uv-tty-vtermstate-t-enum(i: int32): exn uv-tty-vtermstate-t-enum
  match i.int
    0 -> UV_TTY_SUPPORTED
    1 -> UV_TTY_UNSUPPORTED

alias uv-tty-t = uv-tty-s-c
alias koka-uv-tty-t = uv-tty-s
alias uv-pipe-t = uv-pipe-s-c
alias koka-uv-pipe-t = uv-pipe-s
pub type uv-poll-event-enum
  UV_READABLE
  UV_WRITABLE
  UV_DISCONNECT
  UV_PRIORITIZED

pub fun uv-poll-event-enum/int(i: uv-poll-event-enum): int32
  match i
    UV_READABLE -> 1.int32
    UV_WRITABLE -> 2.int32
    UV_DISCONNECT -> 4.int32
    UV_PRIORITIZED -> 8.int32

pub fun int/uv-poll-event-enum(i: int32): exn uv-poll-event-enum
  match i.int
    1 -> UV_READABLE
    2 -> UV_WRITABLE
    4 -> UV_DISCONNECT
    8 -> UV_PRIORITIZED

pub type uv-stdio-flags-enum
  UV_IGNORE
  UV_CREATE_PIPE
  UV_INHERIT_FD
  UV_INHERIT_STREAM
  UV_READABLE_PIPE
  UV_WRITABLE_PIPE
  UV_NONBLOCK_PIPE
  UV_OVERLAPPED_PIPE

pub fun uv-stdio-flags-enum/int(i: uv-stdio-flags-enum): int32
  match i
    UV_IGNORE -> 0.int32
    UV_CREATE_PIPE -> 1.int32
    UV_INHERIT_FD -> 2.int32
    UV_INHERIT_STREAM -> 4.int32
    UV_READABLE_PIPE -> 16.int32
    UV_WRITABLE_PIPE -> 32.int32
    UV_NONBLOCK_PIPE -> 64.int32
    UV_OVERLAPPED_PIPE -> 64.int32

pub fun int/uv-stdio-flags-enum(i: int32): exn uv-stdio-flags-enum
  match i.int
    0 -> UV_IGNORE
    1 -> UV_CREATE_PIPE
    2 -> UV_INHERIT_FD
    4 -> UV_INHERIT_STREAM
    16 -> UV_READABLE_PIPE
    32 -> UV_WRITABLE_PIPE
    64 -> UV_NONBLOCK_PIPE
    64 -> UV_OVERLAPPED_PIPE

pub value struct uv-stdio-container-s
  flags: int
  data: unnamed-union22-c

pub type uv-stdio-container-s-c
pub alias uv-stdio-container-sp = c-pointer<uv-stdio-container-s-c>
pub alias uv-stdio-container-sc = owned-c<uv-stdio-container-s-c>
pub alias uv-stdio-container-scb<s::S> = borrowed-c<s,uv-stdio-container-s-c>
pub alias uv-stdio-container-sca = owned-c<c-array<uv-stdio-container-s-c>>

pub extern uv-stdio-container-s/size-of(c: c-null<uv-stdio-container-s-c>): int32
  c inline "sizeof(struct uv_stdio_container_s)"

pub fun uv-stdio-container-sc(): uv-stdio-container-sc
  malloc(?size-of=uv-stdio-container-s/size-of)

pub fun uv-stdio-container-sc-calloc(): uv-stdio-container-sc
  malloc-c(?size-of=uv-stdio-container-s/size-of)

pub fun uv-stdio-container-sc-array(n: int): uv-stdio-container-sca
  malloc(n.int32, ?size-of=uv-stdio-container-s/size-of)

pub fun uv-stdio-container-sc-array-calloc(n: int): uv-stdio-container-sca
  malloc-c(n.int32, ?size-of=uv-stdio-container-s/size-of)

pub struct unnamed-union22
pub type unnamed-union22-c
pub alias unnamed-union22p = c-pointer<unnamed-union22-c>
pub alias unnamed-union22c = owned-c<unnamed-union22-c>
pub alias unnamed-union22cb<s::S> = borrowed-c<s,unnamed-union22-c>
pub alias unnamed-union22ca = owned-c<c-array<unnamed-union22-c>>

pub struct uv-process-options-s
  exit-cb: uv-exit-cb
  file: c-pointer<int>
  args: c-pointer<c-pointer<int>>
  env: c-pointer<c-pointer<int>>
  cwd: c-pointer<int>
  flags: int
  stdio-count: int
  stdio: c-pointer<uv-stdio-container-s-c>
  uid: int
  gid: int

pub type uv-process-options-s-c
pub alias uv-process-options-sp = c-pointer<uv-process-options-s-c>
pub alias uv-process-options-sc = owned-c<uv-process-options-s-c>
pub alias uv-process-options-scb<s::S> = borrowed-c<s,uv-process-options-s-c>
pub alias uv-process-options-sca = owned-c<c-array<uv-process-options-s-c>>

pub extern uv-process-options-s/size-of(c: c-null<uv-process-options-s-c>): int32
  c inline "sizeof(struct uv_process_options_s)"

pub fun uv-process-options-sc(): uv-process-options-sc
  malloc(?size-of=uv-process-options-s/size-of)

pub fun uv-process-options-sc-calloc(): uv-process-options-sc
  malloc-c(?size-of=uv-process-options-s/size-of)

pub fun uv-process-options-sc-array(n: int): uv-process-options-sca
  malloc(n.int32, ?size-of=uv-process-options-s/size-of)

pub fun uv-process-options-sc-array-calloc(n: int): uv-process-options-sca
  malloc-c(n.int32, ?size-of=uv-process-options-s/size-of)

alias uv-stdio-container-t = uv-stdio-container-s-c
alias koka-uv-stdio-container-t = uv-stdio-container-s
pub type uv-process-flags-enum
  UV_PROCESS_SETUID
  UV_PROCESS_SETGID
  UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS
  UV_PROCESS_DETACHED
  UV_PROCESS_WINDOWS_HIDE
  UV_PROCESS_WINDOWS_HIDE_CONSOLE
  UV_PROCESS_WINDOWS_HIDE_GUI
  UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME

pub fun uv-process-flags-enum/int(i: uv-process-flags-enum): int32
  match i
    UV_PROCESS_SETUID -> 1.int32
    UV_PROCESS_SETGID -> 2.int32
    UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS -> 4.int32
    UV_PROCESS_DETACHED -> 8.int32
    UV_PROCESS_WINDOWS_HIDE -> 16.int32
    UV_PROCESS_WINDOWS_HIDE_CONSOLE -> 32.int32
    UV_PROCESS_WINDOWS_HIDE_GUI -> 64.int32
    UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME -> 128.int32

pub fun int/uv-process-flags-enum(i: int32): exn uv-process-flags-enum
  match i.int
    1 -> UV_PROCESS_SETUID
    2 -> UV_PROCESS_SETGID
    4 -> UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS
    8 -> UV_PROCESS_DETACHED
    16 -> UV_PROCESS_WINDOWS_HIDE
    32 -> UV_PROCESS_WINDOWS_HIDE_CONSOLE
    64 -> UV_PROCESS_WINDOWS_HIDE_GUI
    128 -> UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME

alias uv-process-options-t = uv-process-options-s-c
alias koka-uv-process-options-t = uv-process-options-s
alias uv-pid-t = int
alias pid-t = int
alias pid-t1 = int
pub struct uv-rusage-t
  ru-utime: uv-timeval-t-c
  ru-stime: uv-timeval-t-c
  ru-maxrss: int
  ru-ixrss: int
  ru-idrss: int
  ru-isrss: int
  ru-minflt: int
  ru-majflt: int
  ru-nswap: int
  ru-inblock: int
  ru-oublock: int
  ru-msgsnd: int
  ru-msgrcv: int
  ru-nsignals: int
  ru-nvcsw: int
  ru-nivcsw: int

pub type uv-rusage-t-c
pub alias uv-rusage-tp = c-pointer<uv-rusage-t-c>
pub alias uv-rusage-tc = owned-c<uv-rusage-t-c>
pub alias uv-rusage-tcb<s::S> = borrowed-c<s,uv-rusage-t-c>
pub alias uv-rusage-tca = owned-c<c-array<uv-rusage-t-c>>

pub extern uv-rusage-t/size-of(c: c-null<uv-rusage-t-c>): int32
  c inline "sizeof(uv_rusage_t)"

pub fun uv-rusage-tc(): uv-rusage-tc
  malloc(?size-of=uv-rusage-t/size-of)

pub fun uv-rusage-tc-calloc(): uv-rusage-tc
  malloc-c(?size-of=uv-rusage-t/size-of)

pub fun uv-rusage-tc-array(n: int): uv-rusage-tca
  malloc(n.int32, ?size-of=uv-rusage-t/size-of)

pub fun uv-rusage-tc-array-calloc(n: int): uv-rusage-tca
  malloc-c(n.int32, ?size-of=uv-rusage-t/size-of)

alias uv-passwd-t = uv-passwd-s-c
alias koka-uv-passwd-t = uv-passwd-s
alias uv-group-t = uv-group-s-c
alias koka-uv-group-t = uv-group-s
alias uv-cpu-info-t = uv-cpu-info-s-c
alias koka-uv-cpu-info-t = uv-cpu-info-s
alias uv-interface-address-t = uv-interface-address-s-c
alias uv-env-item-t = uv-env-item-s-c
alias koka-uv-env-item-t = uv-env-item-s
alias uv-utsname-t = uv-utsname-s-c
alias uv-metrics-t = uv-metrics-s-c
alias uv-dir-t = uv-dir-s-c
pub type uv-fs-event-enum
  UV_RENAME
  UV_CHANGE

pub fun uv-fs-event-enum/int(i: uv-fs-event-enum): int32
  match i
    UV_RENAME -> 1.int32
    UV_CHANGE -> 2.int32

pub fun int/uv-fs-event-enum(i: int32): exn uv-fs-event-enum
  match i.int
    1 -> UV_RENAME
    2 -> UV_CHANGE

alias uv-fs-poll-t = uv-fs-poll-s-c
alias koka-uv-fs-poll-t = uv-fs-poll-s
alias uv-fs-poll-cb = c-pointer<intptr_t>
alias uv-fs-poll-cbfn = ((handle1 : c-pointer<uv-fs-poll-s-c>, status : int, prev : c-pointer<uv-stat-t-c>, curr : c-pointer<uv-stat-t-c>) -> ())
pub type uv-fs-event-flags-enum
  UV_FS_EVENT_WATCH_ENTRY
  UV_FS_EVENT_STAT
  UV_FS_EVENT_RECURSIVE

pub fun uv-fs-event-flags-enum/int(i: uv-fs-event-flags-enum): int32
  match i
    UV_FS_EVENT_WATCH_ENTRY -> 1.int32
    UV_FS_EVENT_STAT -> 2.int32
    UV_FS_EVENT_RECURSIVE -> 4.int32

pub fun int/uv-fs-event-flags-enum(i: int32): exn uv-fs-event-flags-enum
  match i.int
    1 -> UV_FS_EVENT_WATCH_ENTRY
    2 -> UV_FS_EVENT_STAT
    4 -> UV_FS_EVENT_RECURSIVE

alias uv-sem-t = sem-t-c
pub struct sem-t
pub type sem-t-c
pub alias sem-tp = c-pointer<sem-t-c>
pub alias sem-tc<s::S> = owned-c<sem-t-c>
pub alias sem-tcb<s::S> = borrowed-c<s,sem-t-c>
pub alias sem-tca<s::S> = owned-c<c-array<sem-t-c>>

alias uv-cond-t = pthread-cond-t-c
pub struct pthread-cond-t
pub type pthread-cond-t-c
pub alias pthread-cond-tp = c-pointer<pthread-cond-t-c>
pub alias pthread-cond-tc<s::S> = owned-c<pthread-cond-t-c>
pub alias pthread-cond-tcb<s::S> = borrowed-c<s,pthread-cond-t-c>
pub alias pthread-cond-tca<s::S> = owned-c<c-array<pthread-cond-t-c>>

pub struct pthread-cond-s
pub type pthread-cond-s-c
pub alias pthread-cond-sp = c-pointer<pthread-cond-s-c>
pub alias pthread-cond-sc<s::S> = owned-c<pthread-cond-s-c>
pub alias pthread-cond-scb<s::S> = borrowed-c<s,pthread-cond-s-c>
pub alias pthread-cond-sca<s::S> = owned-c<c-array<pthread-cond-s-c>>

pub extern pthread-cond-s/size-of(c: c-null<pthread-cond-s-c>): int32
  c inline "sizeof(struct __pthread_cond_s)"

pub fun pthread-cond-sc(): pthread-cond-sc<s::S>
  malloc(?size-of=pthread-cond-s/size-of)

pub fun pthread-cond-sc-calloc(): pthread-cond-sc<s::S>
  malloc-c(?size-of=pthread-cond-s/size-of)

pub fun pthread-cond-sc-array(n: int): pthread-cond-sca<s::S>
  malloc(n.int32, ?size-of=pthread-cond-s/size-of)

pub fun pthread-cond-sc-array-calloc(n: int): pthread-cond-sca<s::S>
  malloc-c(n.int32, ?size-of=pthread-cond-s/size-of)

pub struct atomic-wide-counter
pub type atomic-wide-counter-c
pub alias atomic-wide-counterp = c-pointer<atomic-wide-counter-c>
pub alias atomic-wide-counterc = owned-c<atomic-wide-counter-c>
pub alias atomic-wide-countercb<s::S> = borrowed-c<s,atomic-wide-counter-c>
pub alias atomic-wide-counterca = owned-c<c-array<atomic-wide-counter-c>>

pub value struct unnamed-struct3
  low: int
  high: int

pub type unnamed-struct3-c
pub alias unnamed-struct3p = c-pointer<unnamed-struct3-c>
pub alias unnamed-struct3c = owned-c<unnamed-struct3-c>
pub alias unnamed-struct3cb<s::S> = borrowed-c<s,unnamed-struct3-c>
pub alias unnamed-struct3ca = owned-c<c-array<unnamed-struct3-c>>

alias uv-barrier-t = pthread-barrier-t-c
pub struct pthread-barrier-t
pub type pthread-barrier-t-c
pub alias pthread-barrier-tp = c-pointer<pthread-barrier-t-c>
pub alias pthread-barrier-tc<s::S> = owned-c<pthread-barrier-t-c>
pub alias pthread-barrier-tcb<s::S> = borrowed-c<s,pthread-barrier-t-c>
pub alias pthread-barrier-tca<s::S> = owned-c<c-array<pthread-barrier-t-c>>

alias uv-once-t = int
alias pthread-once-t = int
alias uv-key-t = int
alias pthread-key-t = int
alias uv-thread-t = int
alias pthread-t = int
alias uv-thread-cb = c-pointer<intptr_t>
alias uv-thread-cbfn = ((arg : c-pointer<()>) -> ())
pub type uv-thread-create-flags-enum
  UV_THREAD_NO_FLAGS
  UV_THREAD_HAS_STACK_SIZE

pub fun uv-thread-create-flags-enum/int(i: uv-thread-create-flags-enum): int32
  match i
    UV_THREAD_NO_FLAGS -> 0.int32
    UV_THREAD_HAS_STACK_SIZE -> 1.int32

pub fun int/uv-thread-create-flags-enum(i: int32): exn uv-thread-create-flags-enum
  match i.int
    0 -> UV_THREAD_NO_FLAGS
    1 -> UV_THREAD_HAS_STACK_SIZE

pub value struct uv-thread-options-s
  flags: int
  stack-size: int

pub type uv-thread-options-s-c
pub alias uv-thread-options-sp = c-pointer<uv-thread-options-s-c>
pub alias uv-thread-options-sc = owned-c<uv-thread-options-s-c>
pub alias uv-thread-options-scb<s::S> = borrowed-c<s,uv-thread-options-s-c>
pub alias uv-thread-options-sca = owned-c<c-array<uv-thread-options-s-c>>

pub extern uv-thread-options-s/size-of(c: c-null<uv-thread-options-s-c>): int32
  c inline "sizeof(struct uv_thread_options_s)"

pub fun uv-thread-options-sc(): uv-thread-options-sc
  malloc(?size-of=uv-thread-options-s/size-of)

pub fun uv-thread-options-sc-calloc(): uv-thread-options-sc
  malloc-c(?size-of=uv-thread-options-s/size-of)

pub fun uv-thread-options-sc-array(n: int): uv-thread-options-sca
  malloc(n.int32, ?size-of=uv-thread-options-s/size-of)

pub fun uv-thread-options-sc-array-calloc(n: int): uv-thread-options-sca
  malloc-c(n.int32, ?size-of=uv-thread-options-s/size-of)

alias uv-thread-options-t = uv-thread-options-s-c
alias koka-uv-thread-options-t = uv-thread-options-s
pub struct uv-any-handle
pub type uv-any-handle-c
pub alias uv-any-handlep = c-pointer<uv-any-handle-c>
pub alias uv-any-handlec = owned-c<uv-any-handle-c>
pub alias uv-any-handlecb<s::S> = borrowed-c<s,uv-any-handle-c>
pub alias uv-any-handleca = owned-c<c-array<uv-any-handle-c>>

pub struct uv-any-req
pub type uv-any-req-c
pub alias uv-any-reqp = c-pointer<uv-any-req-c>
pub alias uv-any-reqc = owned-c<uv-any-req-c>
pub alias uv-any-reqcb<s::S> = borrowed-c<s,uv-any-req-c>
pub alias uv-any-reqca = owned-c<c-array<uv-any-req-c>>

pub val kuv-pipe-no-truncate: int = 1

pub val kuv-thread-priority-highest: int = 2

pub val kuv-thread-priority-above-normal: int = 1

pub val kuv-thread-priority-normal: int = 0

pub val kuv-thread-priority-below-normal: int = -1

pub val kuv-thread-priority-lowest: int = -2

