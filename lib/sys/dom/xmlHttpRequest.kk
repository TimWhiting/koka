pub module sys/dom/xmlHttpRequest

// Interface XMLHttpRequest (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeXmlHttpRequest  : forall<a> (a) -> maybe<xmlHttpRequest>
{ inline "(#1.toString()==='[object XMLHttpRequest]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toXmlHttpRequest : forall<a> (a) -> exn xmlHttpRequest
{ inline "(#1.toString()==='[object XMLHttpRequest]'?#1:std_core.error('toXmlHttpRequest: cast failed'))" }


// XMLHttpRequest implements XMLHttpRequest (supplemental)
inline extern onreadystatechange : (this: xmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onreadystatechange" }
inline extern onreadystatechange : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
inline extern onreadystatechange : forall<e> (this: xmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
inline extern readyState : (this: xmlHttpRequest) -> dom xmlHttpRequestReadyState
{ inline "#1.readyState" }
inline extern open : (this: xmlHttpRequest, method: string, url: string) -> dom ()
{ inline "#1.open(#2, #3)" }

inline extern open : (this: xmlHttpRequest, method: string, url: string, async: bool) -> dom ()
{ inline "#1.open(#2, #3, #4)" }

inline extern open : (this: xmlHttpRequest, method: string, url: string, async: bool, user: string) -> dom ()
{ inline "#1.open(#2, #3, #4, #5)" }

inline extern open : (this: xmlHttpRequest, method: string, url: string, async: bool, user: string, password: string) -> dom ()
{ inline "#1.open(#2, #3, #4, #5, #6)" }

inline extern setRequestHeader : (this: xmlHttpRequest, header: string, value: string) -> dom ()
{ inline "#1.setRequestHeader(#2, #3)" }

inline extern timeout : (this: xmlHttpRequest) -> dom uint32
{ inline "#1.timeout" }
inline extern timeout : (this: xmlHttpRequest, assigned: uint32) -> dom ()
{ inline "(#1.timeout = #2)" }
inline extern withCredentials : (this: xmlHttpRequest) -> dom bool
{ inline "#1.withCredentials" }
inline extern withCredentials : (this: xmlHttpRequest, assigned: bool) -> dom ()
{ inline "(#1.withCredentials = #2)" }
inline extern upload : (this: xmlHttpRequest) -> dom xmlHttpRequestUpload
{ inline "#1.upload" }
inline extern send : (this: xmlHttpRequest) -> dom ()
{ inline "#1.send()" }

inline extern send : (this: xmlHttpRequest, data: arrayBuffer) -> dom ()
{ inline "#1.send(#2)" }

inline extern send : (this: xmlHttpRequest, data: blob) -> dom ()
{ inline "#1.send(#2)" }

inline extern send : (this: xmlHttpRequest, data: document) -> dom ()
{ inline "#1.send(#2)" }

inline extern send : (this: xmlHttpRequest, data: formData) -> dom ()
{ inline "#1.send(#2)" }

inline extern send : (this: xmlHttpRequest, data: string) -> dom ()
{ inline "#1.send(#2)" }

inline extern abort : (this: xmlHttpRequest) -> dom ()
{ inline "#1.abort()" }

inline extern status : (this: xmlHttpRequest) -> dom xmlHttpRequestReadyState
{ inline "#1.status" }
inline extern statusText : (this: xmlHttpRequest) -> dom string
{ inline "#1.statusText" }
inline extern getResponseHeader : (this: xmlHttpRequest, header: string) -> dom string
{ inline "#1.getResponseHeader(#2)" }

inline extern getAllResponseHeaders : (this: xmlHttpRequest) -> dom string
{ inline "#1.getAllResponseHeaders()" }

inline extern overrideMimeType : (this: xmlHttpRequest, mime: string) -> dom ()
{ inline "#1.overrideMimeType(#2)" }

inline extern responseType : (this: xmlHttpRequest) -> dom string
{ inline "#1.responseType" }
inline extern responseType : (this: xmlHttpRequest, assigned: string) -> dom ()
{ inline "(#1.responseType = #2)" }
inline extern response : (this: xmlHttpRequest) -> dom any /* anyGetter */
{ inline "#1.response" }
inline extern responseText : (this: xmlHttpRequest) -> dom string
{ inline "#1.responseText" }
inline extern responseXml : (this: xmlHttpRequest) -> dom document
{ inline "#1.responseXML" }
// XMLHttpRequest extends XMLHttpRequestEventTarget
inline extern xmlHttpRequestEventTarget : (xmlHttpRequest) -> xmlHttpRequestEventTarget // upcasting to extended type
{ inline "#1" }
// XMLHttpRequest implements in extension XMLHttpRequestEventTarget (overloading)
inline extern onloadstart : (this: xmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
inline extern onloadstart : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
inline extern onloadstart : forall<e> (this: xmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
inline extern onprogress : (this: xmlHttpRequest) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
inline extern onprogress : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onprogress : forall<e> (this: xmlHttpRequest, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onabort : (this: xmlHttpRequest) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
inline extern onabort : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
inline extern onabort : forall<e> (this: xmlHttpRequest, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
inline extern onerror : (this: xmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onerror" }
inline extern onerror : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onerror : forall<e> (this: xmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onload : (this: xmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onload" }
inline extern onload : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
inline extern onload : forall<e> (this: xmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
inline extern ontimeout : (this: xmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.ontimeout" }
inline extern ontimeout : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
inline extern ontimeout : forall<e> (this: xmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
inline extern onloadend : (this: xmlHttpRequest) -> dom (progressEvent -> dom ())
{ inline "#1.onloadend" }
inline extern onloadend : forall<e> (this: xmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
inline extern onloadend : forall<e> (this: xmlHttpRequest, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
// XMLHttpRequest extends EventTarget
inline extern eventTarget : (xmlHttpRequest) -> eventTarget // upcasting to extended type
{ inline "#1" }
// XMLHttpRequest implements in extension EventTarget (overloading)
inline extern addEventListener : (this: xmlHttpRequest, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: xmlHttpRequest, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: xmlHttpRequest, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: xmlHttpRequest, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: xmlHttpRequest, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

