pub module sys/dom/processingInstruction

// Interface ProcessingInstruction (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeProcessingInstruction  : forall<a> (a) -> maybe<processingInstruction>
{ inline "(#1.toString()==='[object ProcessingInstruction]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toProcessingInstruction : forall<a> (a) -> exn processingInstruction
{ inline "(#1.toString()==='[object ProcessingInstruction]'?#1:std_core.error('toProcessingInstruction: cast failed'))" }


// ProcessingInstruction implements ProcessingInstruction (supplemental)
inline extern target : (this: processingInstruction) -> dom string
{ inline "#1.target" }
inline extern data : (this: processingInstruction) -> dom string
{ inline "#1.data" }
inline extern data : (this: processingInstruction, assigned: string) -> dom ()
{ inline "(#1.data = #2)" }
// ProcessingInstruction implements LinkStyle (overloading)
inline extern sheet : (this: processingInstruction) -> dom styleSheet
{ inline "#1.sheet" }
// ProcessingInstruction extends Node
inline extern node : (processingInstruction) -> node // upcasting to extended type
{ inline "#1" }
// ProcessingInstruction implements in extension Node (overloading)
inline extern nodeType : (this: processingInstruction) -> dom nodeType
{ inline "#1.nodeType" }
inline extern nodeName : (this: processingInstruction) -> dom string
{ inline "#1.nodeName" }
inline extern baseUri : (this: processingInstruction) -> dom string
{ inline "#1.baseURI" }
inline extern ownerDocument : (this: processingInstruction) -> dom document
{ inline "#1.ownerDocument" }
inline extern parentNode : (this: processingInstruction) -> dom node
{ inline "#1.parentNode" }
inline extern parentElement : (this: processingInstruction) -> dom element
{ inline "#1.parentElement" }
inline extern hasChildNodes : (this: processingInstruction) -> dom bool
{ inline "#1.hasChildNodes()" }

inline extern childNodes : (this: processingInstruction) -> dom nodeList
{ inline "#1.childNodes" }
inline extern firstChild : (this: processingInstruction) -> dom node
{ inline "#1.firstChild" }
inline extern lastChild : (this: processingInstruction) -> dom node
{ inline "#1.lastChild" }
inline extern previousSibling : (this: processingInstruction) -> dom node
{ inline "#1.previousSibling" }
inline extern nextSibling : (this: processingInstruction) -> dom node
{ inline "#1.nextSibling" }
inline extern compareDocumentPosition : (this: processingInstruction, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

inline extern nodeValue : (this: processingInstruction) -> dom string
{ inline "#1.nodeValue" }
inline extern nodeValue : (this: processingInstruction, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
inline extern textContent : (this: processingInstruction) -> dom string
{ inline "#1.textContent" }
inline extern textContent : (this: processingInstruction, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
inline extern insertBefore : (this: processingInstruction, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

inline extern replaceChild : (this: processingInstruction, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

inline extern removeChild : (this: processingInstruction, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

inline extern appendChild : (this: processingInstruction, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

inline extern cloneNode : (this: processingInstruction, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

inline extern isSameNode : (this: processingInstruction, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

inline extern isEqualNode : (this: processingInstruction, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

inline extern lookupPrefix : (this: processingInstruction, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

inline extern lookupNamespaceUri : (this: processingInstruction, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

inline extern isDefaultNamespace : (this: processingInstruction, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// ProcessingInstruction extends EventTarget
inline extern eventTarget : (processingInstruction) -> eventTarget // upcasting to extended type
{ inline "#1" }
// ProcessingInstruction implements in extension EventTarget (overloading)
inline extern addEventListener : (this: processingInstruction, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: processingInstruction, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: processingInstruction, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: processingInstruction, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: processingInstruction, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

