pub module sys/dom/xmlHttpRequestUpload

// Interface XMLHttpRequestUpload (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeXmlHttpRequestUpload  : forall<a> (a) -> maybe<xmlHttpRequestUpload>
{ inline "(#1.toString()==='[object XMLHttpRequestUpload]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toXmlHttpRequestUpload : forall<a> (a) -> exn xmlHttpRequestUpload
{ inline "(#1.toString()==='[object XMLHttpRequestUpload]'?#1:std_core.error('toXmlHttpRequestUpload: cast failed'))" }


// XMLHttpRequestUpload implements XMLHttpRequestUpload (supplemental)
// XMLHttpRequestUpload extends XMLHttpRequestEventTarget
inline extern xmlHttpRequestEventTarget : (xmlHttpRequestUpload) -> xmlHttpRequestEventTarget // upcasting to extended type
{ inline "#1" }
// XMLHttpRequestUpload implements in extension XMLHttpRequestEventTarget (overloading)
inline extern onloadstart : (this: xmlHttpRequestUpload) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
inline extern onloadstart : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
inline extern onloadstart : forall<e> (this: xmlHttpRequestUpload, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
inline extern onprogress : (this: xmlHttpRequestUpload) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
inline extern onprogress : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onprogress : forall<e> (this: xmlHttpRequestUpload, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onabort : (this: xmlHttpRequestUpload) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
inline extern onabort : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
inline extern onabort : forall<e> (this: xmlHttpRequestUpload, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
inline extern onerror : (this: xmlHttpRequestUpload) -> dom (event -> dom ())
{ inline "#1.onerror" }
inline extern onerror : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onerror : forall<e> (this: xmlHttpRequestUpload, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onload : (this: xmlHttpRequestUpload) -> dom (event -> dom ())
{ inline "#1.onload" }
inline extern onload : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
inline extern onload : forall<e> (this: xmlHttpRequestUpload, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
inline extern ontimeout : (this: xmlHttpRequestUpload) -> dom (event -> dom ())
{ inline "#1.ontimeout" }
inline extern ontimeout : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
inline extern ontimeout : forall<e> (this: xmlHttpRequestUpload, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
inline extern onloadend : (this: xmlHttpRequestUpload) -> dom (progressEvent -> dom ())
{ inline "#1.onloadend" }
inline extern onloadend : forall<e> (this: xmlHttpRequestUpload, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
inline extern onloadend : forall<e> (this: xmlHttpRequestUpload, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
// XMLHttpRequestUpload extends EventTarget
inline extern eventTarget : (xmlHttpRequestUpload) -> eventTarget // upcasting to extended type
{ inline "#1" }
// XMLHttpRequestUpload implements in extension EventTarget (overloading)
inline extern addEventListener : (this: xmlHttpRequestUpload, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: xmlHttpRequestUpload, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: xmlHttpRequestUpload, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: xmlHttpRequestUpload, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: xmlHttpRequestUpload, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

