pub module sys/dom/html/function

// Interface Function (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeFunction  : forall<a> (a) -> maybe<function>
{ inline "(#1.toString()==='[object Function]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toFunction : forall<a> (a) -> exn function
{ inline "(#1.toString()==='[object Function]'?#1:std_core.error('toFunction: cast failed'))" }


// Function implements Function (supplemental)
inline extern call : (this: function) -> dom any /* anyResult */
{ inline "#1.call()" }

inline extern call : forall<a> (this: function, arguments: a /* anyArg */) -> dom any /* anyResult */
{ inline "#1.call(#2)" }

