pub module sys/dom/html/dragEvent

// Interface DragEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeDragEvent  : forall<a> (a) -> maybe<dragEvent>
{ inline "(#1.toString()==='[object DragEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toDragEvent : forall<a> (a) -> exn dragEvent
{ inline "(#1.toString()==='[object DragEvent]'?#1:std_core.error('toDragEvent: cast failed'))" }


// DragEvent implements DragEvent (supplemental)
inline extern dataTransfer : (this: dragEvent) -> dom dataTransfer
{ inline "#1.dataTransfer" }
inline extern initDragEvent : forall<a> (this: dragEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, dummyArg: a /* anyArg */, detailArg: int32, screenXArg: int32, screenYArg: int32, clientXArg: int32, clientYArg: int32, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: uint16, relatedTargetArg: eventTarget, dataTransferArg: dataTransfer) -> dom ()
{ inline "#1.initDragEvent(#2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16, #17)" }

// DragEvent extends MouseEvent
inline extern mouseEvent : (dragEvent) -> mouseEvent // upcasting to extended type
{ inline "#1" }
// DragEvent implements in extension MouseEvent (overloading)
inline extern screenX : (this: dragEvent) -> dom int32
{ inline "#1.screenX" }
inline extern screenY : (this: dragEvent) -> dom int32
{ inline "#1.screenY" }
inline extern clientX : (this: dragEvent) -> dom int32
{ inline "#1.clientX" }
inline extern clientY : (this: dragEvent) -> dom int32
{ inline "#1.clientY" }
inline extern ctrlKey : (this: dragEvent) -> dom bool
{ inline "#1.ctrlKey" }
inline extern shiftKey : (this: dragEvent) -> dom bool
{ inline "#1.shiftKey" }
inline extern altKey : (this: dragEvent) -> dom bool
{ inline "#1.altKey" }
inline extern metaKey : (this: dragEvent) -> dom bool
{ inline "#1.metaKey" }
inline extern button : (this: dragEvent) -> dom applicationCacheStatus
{ inline "#1.button" }
inline extern buttons : (this: dragEvent) -> dom applicationCacheStatus
{ inline "#1.buttons" }
inline extern relatedTarget : (this: dragEvent) -> dom eventTarget
{ inline "#1.relatedTarget" }
inline extern initMouseEvent : (this: dragEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32, screenXArg: int32, screenYArg: int32, clientXArg: int32, clientYArg: int32, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: uint16, relatedTargetArg: eventTarget) -> dom ()
{ inline "#1.initMouseEvent(#2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16)" }

inline extern getModifierState : (this: dragEvent, keyArg: string) -> dom bool
{ inline "#1.getModifierState(#2)" }

// DragEvent implements in extension MouseEvent (overloading)
inline extern pageX : (this: dragEvent) -> dom int32
{ inline "#1.pageX" }
inline extern pageY : (this: dragEvent) -> dom int32
{ inline "#1.pageY" }
inline extern x : (this: dragEvent) -> dom int32
{ inline "#1.x" }
inline extern y : (this: dragEvent) -> dom int32
{ inline "#1.y" }
inline extern offsetX : (this: dragEvent) -> dom int32
{ inline "#1.offsetX" }
inline extern offsetY : (this: dragEvent) -> dom int32
{ inline "#1.offsetY" }
// DragEvent extends UIEvent
inline extern uiEvent : (dragEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// DragEvent implements in extension UIEvent (overloading)
inline extern view : (this: dragEvent) -> dom abstractView
{ inline "#1.view" }
inline extern detail : (this: dragEvent) -> dom int32
{ inline "#1.detail" }
inline extern initUiEvent : (this: dragEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// DragEvent extends Event
inline extern event : (dragEvent) -> event // upcasting to extended type
{ inline "#1" }
// DragEvent implements in extension Event (overloading)
inline extern type_ : (this: dragEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: dragEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: dragEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: dragEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: dragEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: dragEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: dragEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: dragEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: dragEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: dragEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: dragEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: dragEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: dragEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

