pub module sys/dom/html/mediaStream

// Interface MediaStream (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeMediaStream  : forall<a> (a) -> maybe<mediaStream>
{ inline "(#1.toString()==='[object MediaStream]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toMediaStream : forall<a> (a) -> exn mediaStream
{ inline "(#1.toString()==='[object MediaStream]'?#1:std_core.error('toMediaStream: cast failed'))" }


// MediaStream implements MediaStream (supplemental)
inline extern label : (this: mediaStream) -> dom string
{ inline "#1.label" }
inline extern tracks : (this: mediaStream) -> dom streamTrackList
{ inline "#1.tracks" }
inline extern record : (this: mediaStream) -> dom mediaStreamRecorder
{ inline "#1.record()" }

inline extern readyState : (this: mediaStream) -> dom mediaStreamReadyState
{ inline "#1.readyState" }
inline extern onended : (this: mediaStream) -> dom (event -> dom ())
{ inline "#1.onended" }
inline extern onended : forall<e> (this: mediaStream, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
inline extern onended : forall<e> (this: mediaStream, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
// MediaStream implements EventTarget (overloading)
inline extern addEventListener : (this: mediaStream, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: mediaStream, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: mediaStream, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: mediaStream, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: mediaStream, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

