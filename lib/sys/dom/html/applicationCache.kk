pub module sys/dom/html/applicationCache

// Interface ApplicationCache (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeApplicationCache  : forall<a> (a) -> maybe<applicationCache>
{ inline "(#1.toString()==='[object ApplicationCache]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toApplicationCache : forall<a> (a) -> exn applicationCache
{ inline "(#1.toString()==='[object ApplicationCache]'?#1:std_core.error('toApplicationCache: cast failed'))" }


// ApplicationCache implements ApplicationCache (supplemental)
inline extern status : (this: applicationCache) -> dom applicationCacheStatus
{ inline "#1.status" }
inline extern update : (this: applicationCache) -> dom ()
{ inline "#1.update()" }

inline extern swapCache : (this: applicationCache) -> dom ()
{ inline "#1.swapCache()" }

inline extern onchecking : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onchecking" }
inline extern onchecking : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchecking = #2)" }
inline extern onchecking : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchecking = #2)" }
inline extern onerror : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onerror" }
inline extern onerror : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onerror : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
inline extern onnoupdate : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onnoupdate" }
inline extern onnoupdate : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onnoupdate = #2)" }
inline extern onnoupdate : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onnoupdate = #2)" }
inline extern ondownloading : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.ondownloading" }
inline extern ondownloading : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondownloading = #2)" }
inline extern ondownloading : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondownloading = #2)" }
inline extern onprogress : (this: applicationCache) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
inline extern onprogress : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onprogress : forall<e> (this: applicationCache, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
inline extern onupdateready : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onupdateready" }
inline extern onupdateready : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onupdateready = #2)" }
inline extern onupdateready : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onupdateready = #2)" }
inline extern oncached : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.oncached" }
inline extern oncached : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncached = #2)" }
inline extern oncached : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncached = #2)" }
inline extern onobsolete : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onobsolete" }
inline extern onobsolete : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onobsolete = #2)" }
inline extern onobsolete : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onobsolete = #2)" }
// ApplicationCache implements EventTarget (overloading)
inline extern addEventListener : (this: applicationCache, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: applicationCache, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: applicationCache, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: applicationCache, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: applicationCache, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

