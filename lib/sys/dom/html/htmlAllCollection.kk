pub module sys/dom/html/htmlAllCollection

// Interface HTMLAllCollection (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeHtmlAllCollection  : forall<a> (a) -> maybe<htmlAllCollection>
{ inline "(#1.toString()==='[object HTMLAllCollection]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toHtmlAllCollection : forall<a> (a) -> exn htmlAllCollection
{ inline "(#1.toString()==='[object HTMLAllCollection]'?#1:std_core.error('toHtmlAllCollection: cast failed'))" }


// HTMLAllCollection implements HTMLAllCollection (supplemental)
inline extern namedItem : (this: htmlAllCollection, name: string) -> dom any /* former ::object */
{ inline "#1.namedItem(#2)" }

inline extern tags : (this: htmlAllCollection, tagName: string) -> dom htmlAllCollection
{ inline "#1.tags(#2)" }

// HTMLAllCollection extends HTMLCollection
inline extern htmlCollection : (htmlAllCollection) -> htmlCollection // upcasting to extended type
{ inline "#1" }
// HTMLAllCollection implements in extension HTMLCollection (overloading)
inline extern length : (this: htmlAllCollection) -> dom uint32
{ inline "#1.length" }
inline extern item : (this: htmlAllCollection, index: uint32) -> dom element
{ inline "#1.item(#2)" }

inline extern namedItem : (this: htmlAllCollection, name: string) -> dom any /* former ::object */
{ inline "#1.namedItem(#2)" }

