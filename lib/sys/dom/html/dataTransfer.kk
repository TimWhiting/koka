pub module sys/dom/html/dataTransfer

// Interface DataTransfer (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeDataTransfer  : forall<a> (a) -> maybe<dataTransfer>
{ inline "(#1.toString()==='[object DataTransfer]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toDataTransfer : forall<a> (a) -> exn dataTransfer
{ inline "(#1.toString()==='[object DataTransfer]'?#1:std_core.error('toDataTransfer: cast failed'))" }


// DataTransfer implements DataTransfer (supplemental)
inline extern dropEffect : (this: dataTransfer) -> dom string
{ inline "#1.dropEffect" }
inline extern dropEffect : (this: dataTransfer, assigned: string) -> dom ()
{ inline "(#1.dropEffect = #2)" }
inline extern effectAllowed : (this: dataTransfer) -> dom string
{ inline "#1.effectAllowed" }
inline extern effectAllowed : (this: dataTransfer, assigned: string) -> dom ()
{ inline "(#1.effectAllowed = #2)" }
inline extern items : (this: dataTransfer) -> dom dataTransferItemList
{ inline "#1.items" }
inline extern setDragImage : (this: dataTransfer, image: element, x: int32, y: int32) -> dom ()
{ inline "#1.setDragImage(#2, #3, #4)" }

inline extern addElement : (this: dataTransfer, element: element) -> dom ()
{ inline "#1.addElement(#2)" }

inline extern types : (this: dataTransfer) -> dom domStringList
{ inline "#1.types" }
inline extern getData : (this: dataTransfer, format: string) -> dom string
{ inline "#1.getData(#2)" }

inline extern setData : (this: dataTransfer, format: string, data: string) -> dom ()
{ inline "#1.setData(#2, #3)" }

inline extern clearData : (this: dataTransfer) -> dom ()
{ inline "#1.clearData()" }

inline extern clearData : (this: dataTransfer, format: string) -> dom ()
{ inline "#1.clearData(#2)" }

inline extern files : (this: dataTransfer) -> dom fileList
{ inline "#1.files" }
