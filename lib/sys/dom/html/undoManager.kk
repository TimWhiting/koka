pub module sys/dom/html/undoManager

// Interface UndoManager (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeUndoManager  : forall<a> (a) -> maybe<undoManager>
{ inline "(#1.toString()==='[object UndoManager]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toUndoManager : forall<a> (a) -> exn undoManager
{ inline "(#1.toString()==='[object UndoManager]'?#1:std_core.error('toUndoManager: cast failed'))" }


// UndoManager implements UndoManager (supplemental)
inline extern length : (this: undoManager) -> dom uint32
{ inline "#1.length" }
inline extern item : (this: undoManager, index: uint32) -> dom any /* anyResult */
{ inline "#1.item(#2)" }

inline extern position : (this: undoManager) -> dom uint32
{ inline "#1.position" }
inline extern add : forall<a> (this: undoManager, data: a /* anyArg */, title: string) -> dom uint32
{ inline "#1.add(#2, #3)" }

inline extern remove : (this: undoManager, index: uint32) -> dom ()
{ inline "#1.remove(#2)" }

inline extern clearUndo : (this: undoManager) -> dom ()
{ inline "#1.clearUndo()" }

inline extern clearRedo : (this: undoManager) -> dom ()
{ inline "#1.clearRedo()" }

