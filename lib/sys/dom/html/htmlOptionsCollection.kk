pub module sys/dom/html/htmlOptionsCollection

// Interface HTMLOptionsCollection (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeHtmlOptionsCollection  : forall<a> (a) -> maybe<htmlOptionsCollection>
{ inline "(#1.toString()==='[object HTMLOptionsCollection]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toHtmlOptionsCollection : forall<a> (a) -> exn htmlOptionsCollection
{ inline "(#1.toString()==='[object HTMLOptionsCollection]'?#1:std_core.error('toHtmlOptionsCollection: cast failed'))" }


// HTMLOptionsCollection implements HTMLOptionsCollection (supplemental)
inline extern length : (this: htmlOptionsCollection) -> dom uint32
{ inline "#1.length" }
inline extern length : (this: htmlOptionsCollection, assigned: uint32) -> dom ()
{ inline "(#1.length = #2)" }
inline extern namedItem : (this: htmlOptionsCollection, name: string) -> dom any /* former ::object */
{ inline "#1.namedItem(#2)" }

inline extern add : (this: htmlOptionsCollection, element: htmlElement) -> dom ()
{ inline "#1.add(#2)" }

inline extern add : (this: htmlOptionsCollection, element: htmlElement, before: htmlElement) -> dom ()
{ inline "#1.add(#2, #3)" }

inline extern add : (this: htmlOptionsCollection, element: htmlElement, before: int32) -> dom ()
{ inline "#1.add(#2, #3)" }

inline extern remove : (this: htmlOptionsCollection, index: int32) -> dom ()
{ inline "#1.remove(#2)" }

inline extern selectedIndex : (this: htmlOptionsCollection) -> dom int32
{ inline "#1.selectedIndex" }
inline extern selectedIndex : (this: htmlOptionsCollection, assigned: int32) -> dom ()
{ inline "(#1.selectedIndex = #2)" }
// HTMLOptionsCollection extends HTMLCollection
inline extern htmlCollection : (htmlOptionsCollection) -> htmlCollection // upcasting to extended type
{ inline "#1" }
// HTMLOptionsCollection implements in extension HTMLCollection (overloading)
inline extern length : (this: htmlOptionsCollection) -> dom uint32
{ inline "#1.length" }
inline extern item : (this: htmlOptionsCollection, index: uint32) -> dom element
{ inline "#1.item(#2)" }

inline extern namedItem : (this: htmlOptionsCollection, name: string) -> dom any /* former ::object */
{ inline "#1.namedItem(#2)" }

