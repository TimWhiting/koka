pub module sys/dom/html/textTrackCue

// Interface TextTrackCue (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeTextTrackCue  : forall<a> (a) -> maybe<textTrackCue>
{ inline "(#1.toString()==='[object TextTrackCue]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toTextTrackCue : forall<a> (a) -> exn textTrackCue
{ inline "(#1.toString()==='[object TextTrackCue]'?#1:std_core.error('toTextTrackCue: cast failed'))" }


// TextTrackCue implements TextTrackCue (supplemental)
inline extern track : (this: textTrackCue) -> dom textTrack
{ inline "#1.track" }
inline extern id : (this: textTrackCue) -> dom string
{ inline "#1.id" }
inline extern startTime : (this: textTrackCue) -> dom float64
{ inline "#1.startTime" }
inline extern endTime : (this: textTrackCue) -> dom float64
{ inline "#1.endTime" }
inline extern pauseOnExit : (this: textTrackCue) -> dom bool
{ inline "#1.pauseOnExit" }
inline extern direction : (this: textTrackCue) -> dom string
{ inline "#1.direction" }
inline extern snapToLines : (this: textTrackCue) -> dom bool
{ inline "#1.snapToLines" }
inline extern linePosition : (this: textTrackCue) -> dom int32
{ inline "#1.linePosition" }
inline extern textPosition : (this: textTrackCue) -> dom int32
{ inline "#1.textPosition" }
inline extern size : (this: textTrackCue) -> dom int32
{ inline "#1.size" }
inline extern alignment : (this: textTrackCue) -> dom string
{ inline "#1.alignment" }
inline extern getCueAsSource : (this: textTrackCue) -> dom string
{ inline "#1.getCueAsSource()" }

inline extern getCueAsHtml : (this: textTrackCue) -> dom documentFragment
{ inline "#1.getCueAsHTML()" }

inline extern onenter : (this: textTrackCue) -> dom (event -> dom ())
{ inline "#1.onenter" }
inline extern onenter : forall<e> (this: textTrackCue, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onenter = #2)" }
inline extern onenter : forall<e> (this: textTrackCue, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onenter = #2)" }
inline extern onexit : (this: textTrackCue) -> dom (event -> dom ())
{ inline "#1.onexit" }
inline extern onexit : forall<e> (this: textTrackCue, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onexit = #2)" }
inline extern onexit : forall<e> (this: textTrackCue, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onexit = #2)" }
// TextTrackCue implements EventTarget (overloading)
inline extern addEventListener : (this: textTrackCue, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: textTrackCue, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: textTrackCue, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: textTrackCue, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: textTrackCue, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

