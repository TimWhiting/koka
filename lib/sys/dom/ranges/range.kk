pub module sys/dom/ranges/range

// Interface Range (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeRange  : forall<a> (a) -> maybe<range>
{ inline "(#1.toString()==='[object Range]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toRange : forall<a> (a) -> exn range
{ inline "(#1.toString()==='[object Range]'?#1:std_core.error('toRange: cast failed'))" }


// Range implements Range (supplemental)
inline extern startContainer : (this: range) -> dom node
{ inline "#1.startContainer" }
inline extern startOffset : (this: range) -> dom int32
{ inline "#1.startOffset" }
inline extern endContainer : (this: range) -> dom node
{ inline "#1.endContainer" }
inline extern endOffset : (this: range) -> dom int32
{ inline "#1.endOffset" }
inline extern collapsed : (this: range) -> dom bool
{ inline "#1.collapsed" }
inline extern commonAncestorContainer : (this: range) -> dom node
{ inline "#1.commonAncestorContainer" }
inline extern setStart : (this: range, refNode: node, offset: int32) -> dom ()
{ inline "#1.setStart(#2, #3)" }

inline extern setEnd : (this: range, refNode: node, offset: int32) -> dom ()
{ inline "#1.setEnd(#2, #3)" }

inline extern setStartBefore : (this: range, refNode: node) -> dom ()
{ inline "#1.setStartBefore(#2)" }

inline extern setStartAfter : (this: range, refNode: node) -> dom ()
{ inline "#1.setStartAfter(#2)" }

inline extern setEndBefore : (this: range, refNode: node) -> dom ()
{ inline "#1.setEndBefore(#2)" }

inline extern setEndAfter : (this: range, refNode: node) -> dom ()
{ inline "#1.setEndAfter(#2)" }

inline extern collapse : (this: range, toStart: bool) -> dom ()
{ inline "#1.collapse(#2)" }

inline extern selectNode : (this: range, refNode: node) -> dom ()
{ inline "#1.selectNode(#2)" }

inline extern selectNodeContents : (this: range, refNode: node) -> dom ()
{ inline "#1.selectNodeContents(#2)" }

inline extern compareBoundaryPoints : (this: range, how: uint16, sourceRange: range) -> dom int16
{ inline "#1.compareBoundaryPoints(#2, #3)" }

inline extern deleteContents : (this: range) -> dom ()
{ inline "#1.deleteContents()" }

inline extern extractContents : (this: range) -> dom documentFragment
{ inline "#1.extractContents()" }

inline extern cloneContents : (this: range) -> dom documentFragment
{ inline "#1.cloneContents()" }

inline extern insertNode : (this: range, newNode: node) -> dom ()
{ inline "#1.insertNode(#2)" }

inline extern surroundContents : (this: range, newParent: node) -> dom ()
{ inline "#1.surroundContents(#2)" }

inline extern cloneRange : (this: range) -> dom range
{ inline "#1.cloneRange()" }

inline extern toString : (this: range) -> dom string
{ inline "#1.toString()" }

inline extern detach : (this: range) -> dom ()
{ inline "#1.detach()" }

// Range implements Range (supplemental)
inline extern getClientRects : (this: range) -> dom clientRectList
{ inline "#1.getClientRects()" }

inline extern getBoundingClientRect : (this: range) -> dom clientRect
{ inline "#1.getBoundingClientRect()" }

