pub module sys/dom/typedarray/float64Array

// Interface Float64Array (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeFloat64Array  : forall<a> (a) -> maybe<float64Array>
{ inline "(#1.toString()==='[object Float64Array]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toFloat64Array : forall<a> (a) -> exn float64Array
{ inline "(#1.toString()==='[object Float64Array]'?#1:std_core.error('toFloat64Array: cast failed'))" }


// Float64Array implements Float64Array (supplemental)
inline extern length : (this: float64Array) -> dom uint32
{ inline "#1.length" }
inline extern get : (this: float64Array, index: int32) -> dom float64
{ inline "#1[#2]" }

/* hidden version of set */
/* hidden version of set */
/* hidden version of set */
inline extern subarray : (this: float64Array, start: int32, end: int32) -> dom float64Array
{ inline "#1.subarray(#2, #3)" }

// Float64Array extends ArrayBufferView
inline extern arrayBufferView : (float64Array) -> arrayBufferView // upcasting to extended type
{ inline "#1" }
// Float64Array implements in extension ArrayBufferView (overloading)
inline extern buffer : (this: float64Array) -> dom arrayBuffer
{ inline "#1.buffer" }
inline extern byteOffset : (this: float64Array) -> dom uint32
{ inline "#1.byteOffset" }
inline extern byteLength : (this: float64Array) -> dom uint32
{ inline "#1.byteLength" }
