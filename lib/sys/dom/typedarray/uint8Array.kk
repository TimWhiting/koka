pub module sys/dom/typedarray/uint8Array

// Interface Uint8Array (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeUint8Array  : forall<a> (a) -> maybe<uint8Array>
{ inline "(#1.toString()==='[object Uint8Array]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toUint8Array : forall<a> (a) -> exn uint8Array
{ inline "(#1.toString()==='[object Uint8Array]'?#1:std_core.error('toUint8Array: cast failed'))" }


// Uint8Array implements Uint8Array (supplemental)
inline extern length : (this: uint8Array) -> dom uint32
{ inline "#1.length" }
inline extern get : (this: uint8Array, index: uint32) -> dom uint8
{ inline "#1[#2]" }

inline extern set : (this: uint8Array, index: uint32, value: uint8) -> dom ()
{ inline "(#1[#2] = #3)" }

/* hidden version of set */
/* hidden version of set */
inline extern subarray : (this: uint8Array, start: int32, end: int32) -> dom uint8Array
{ inline "#1.subarray(#2, #3)" }

// Uint8Array extends ArrayBufferView
inline extern arrayBufferView : (uint8Array) -> arrayBufferView // upcasting to extended type
{ inline "#1" }
// Uint8Array implements in extension ArrayBufferView (overloading)
inline extern buffer : (this: uint8Array) -> dom arrayBuffer
{ inline "#1.buffer" }
inline extern byteOffset : (this: uint8Array) -> dom uint32
{ inline "#1.byteOffset" }
inline extern byteLength : (this: uint8Array) -> dom uint32
{ inline "#1.byteLength" }
