pub module sys/dom/typedarray/uint16Array

// Interface Uint16Array (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeUint16Array  : forall<a> (a) -> maybe<uint16Array>
{ inline "(#1.toString()==='[object Uint16Array]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toUint16Array : forall<a> (a) -> exn uint16Array
{ inline "(#1.toString()==='[object Uint16Array]'?#1:std_core.error('toUint16Array: cast failed'))" }


// Uint16Array implements Uint16Array (supplemental)
inline extern length : (this: uint16Array) -> dom uint32
{ inline "#1.length" }
inline extern get : (this: uint16Array, index: uint32) -> dom uint16
{ inline "#1[#2]" }

inline extern set : (this: uint16Array, index: uint32, value: uint16) -> dom ()
{ inline "(#1[#2] = #3)" }

/* hidden version of set */
/* hidden version of set */
inline extern subarray : (this: uint16Array, start: int32, end: int32) -> dom uint16Array
{ inline "#1.subarray(#2, #3)" }

// Uint16Array extends ArrayBufferView
inline extern arrayBufferView : (uint16Array) -> arrayBufferView // upcasting to extended type
{ inline "#1" }
// Uint16Array implements in extension ArrayBufferView (overloading)
inline extern buffer : (this: uint16Array) -> dom arrayBuffer
{ inline "#1.buffer" }
inline extern byteOffset : (this: uint16Array) -> dom uint32
{ inline "#1.byteOffset" }
inline extern byteLength : (this: uint16Array) -> dom uint32
{ inline "#1.byteLength" }
