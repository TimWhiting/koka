pub module sys/dom/file/file

// Interface File (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeFile  : forall<a> (a) -> maybe<file>
{ inline "(#1.toString()==='[object File]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toFile : forall<a> (a) -> exn file
{ inline "(#1.toString()==='[object File]'?#1:std_core.error('toFile: cast failed'))" }


// File implements File (supplemental)
inline extern name : (this: file) -> dom string
{ inline "#1.name" }
inline extern lastModifiedDate : (this: file) -> dom timestamp
{ inline "#1.lastModifiedDate" }
// File extends Blob
inline extern blob : (file) -> blob // upcasting to extended type
{ inline "#1" }
// File implements in extension Blob (overloading)
inline extern size : (this: file) -> dom unsigned long long
{ inline "#1.size" }
inline extern type_ : (this: file) -> dom string
{ inline "#1.type" }
inline extern slice : (this: file, start: unsigned long long, length: unsigned long long) -> dom blob
{ inline "#1.slice(#2, #3)" }

inline extern slice : (this: file, start: unsigned long long, length: unsigned long long, contentType: string) -> dom blob
{ inline "#1.slice(#2, #3, #4)" }

