pub module sys/dom/events/focusEvent

// Interface FocusEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeFocusEvent  : forall<a> (a) -> maybe<focusEvent>
{ inline "(#1.toString()==='[object FocusEvent]'?std_core.Just(#1):std_core.Nothing)" }
inline extern toFocusEvent : forall<a> (a) -> exn focusEvent
{ inline "(#1.toString()==='[object FocusEvent]'?#1:std_core.error('toFocusEvent: cast failed'))" }


// FocusEvent implements FocusEvent (supplemental)
inline extern relatedTarget : (this: focusEvent) -> dom eventTarget
{ inline "#1.relatedTarget" }
inline extern initFocusEvent : (this: focusEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32, relatedTargetArg: eventTarget) -> dom ()
{ inline "#1.initFocusEvent(#2, #3, #4, #5, #6, #7)" }

// FocusEvent extends UIEvent
inline extern uiEvent : (focusEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// FocusEvent implements in extension UIEvent (overloading)
inline extern view : (this: focusEvent) -> dom abstractView
{ inline "#1.view" }
inline extern detail : (this: focusEvent) -> dom int32
{ inline "#1.detail" }
inline extern initUiEvent : (this: focusEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// FocusEvent extends Event
inline extern event : (focusEvent) -> event // upcasting to extended type
{ inline "#1" }
// FocusEvent implements in extension Event (overloading)
inline extern type_ : (this: focusEvent) -> dom string
{ inline "#1.type" }
inline extern target : (this: focusEvent) -> dom eventTarget
{ inline "#1.target" }
inline extern currentTarget : (this: focusEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
inline extern eventPhase : (this: focusEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
inline extern stopPropagation : (this: focusEvent) -> dom ()
{ inline "#1.stopPropagation()" }

inline extern stopImmediatePropagation : (this: focusEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

inline extern bubbles : (this: focusEvent) -> dom bool
{ inline "#1.bubbles" }
inline extern cancelable : (this: focusEvent) -> dom bool
{ inline "#1.cancelable" }
inline extern preventDefault : (this: focusEvent) -> dom ()
{ inline "#1.preventDefault()" }

inline extern defaultPrevented : (this: focusEvent) -> dom bool
{ inline "#1.defaultPrevented" }
inline extern isTrusted : (this: focusEvent) -> dom bool
{ inline "#1.isTrusted" }
inline extern timeStamp : (this: focusEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
inline extern initEvent : (this: focusEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

