pub module sys/dom/document

// Interface Document (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
extern maybeDocument : forall<a> (a) -> maybe<document>
{ inline "(#1.toString()==='[object Document]'?std_core.Just(#1):std_core.Nothing)" }
extern toDocument : forall<a> (a) -> exn document
{ inline "(#1.toString()==='[object Document]'?#1:std_core.error('toDocument: cast failed'))" }


// Document implements Document (supplemental)
extern implementation : (this: document) -> dom domImplementation
{ inline "#1.implementation" }
extern documentUri : (this: document) -> dom string
{ inline "#1.documentURI" }
extern documentUri : (this: document, assigned: string) -> dom ()
{ inline "(#1.documentURI = #2)" }
extern compatMode : (this: document) -> dom string
{ inline "#1.compatMode" }
extern charset : (this: document) -> dom string
{ inline "#1.charset" }
extern charset : (this: document, assigned: string) -> dom ()
{ inline "(#1.charset = #2)" }
extern characterSet : (this: document) -> dom string
{ inline "#1.characterSet" }
extern defaultCharset : (this: document) -> dom string
{ inline "#1.defaultCharset" }
extern contentType : (this: document) -> dom string
{ inline "#1.contentType" }
extern doctype : (this: document) -> dom documentType
{ inline "#1.doctype" }
extern documentElement : (this: document) -> dom element
{ inline "#1.documentElement" }
extern getElementsByTagName : (this: document, qualifiedName: string) -> dom nodeList
{ inline "#1.getElementsByTagName(#2)" }

extern getElementsByTagNameNs : (this: document, namespace: string, localName: string) -> dom nodeList
{ inline "#1.getElementsByTagNameNS(#2, #3)" }

extern getElementsByClassName : (this: document, classNames: string) -> dom nodeList
{ inline "#1.getElementsByClassName(#2)" }

extern getElementById : (this: document, elementId: string) -> dom element
{ inline "#1.getElementById(#2)" }

extern createElement : (this: document, localName: string) -> dom element
{ inline "#1.createElement(#2)" }

extern createElementNs : (this: document, namespace: string, qualifiedName: string) -> dom element
{ inline "#1.createElementNS(#2, #3)" }

extern createDocumentFragment : (this: document) -> dom documentFragment
{ inline "#1.createDocumentFragment()" }

extern createTextNode : (this: document, data: string) -> dom text
{ inline "#1.createTextNode(#2)" }

extern createComment : (this: document, data: string) -> dom comment
{ inline "#1.createComment(#2)" }

extern createProcessingInstruction : (this: document, target: string, data: string) -> dom processingInstruction
{ inline "#1.createProcessingInstruction(#2, #3)" }

extern importNode : (this: document, node: node, deep: bool) -> dom node
{ inline "#1.importNode(#2, #3)" }

extern adoptNode : (this: document, node: node) -> dom node
{ inline "#1.adoptNode(#2)" }

extern createEvent : (this: document, eventInterfaceName: string) -> dom event
{ inline "#1.createEvent(#2)" }

// Document implements Document-1 (supplemental)
extern styleSheets : (this: document) -> dom styleSheetList
{ inline "#1.styleSheets" }
extern selectedStyleSheetSet : (this: document) -> dom string
{ inline "#1.selectedStyleSheetSet" }
extern selectedStyleSheetSet : (this: document, assigned: string) -> dom ()
{ inline "(#1.selectedStyleSheetSet = #2)" }
extern lastStyleSheetSet : (this: document) -> dom string
{ inline "#1.lastStyleSheetSet" }
extern preferredStyleSheetSet : (this: document) -> dom string
{ inline "#1.preferredStyleSheetSet" }
extern styleSheetSets : (this: document) -> dom domStringList
{ inline "#1.styleSheetSets" }
extern enableStyleSheetsForSet : (this: document, name: string) -> dom ()
{ inline "#1.enableStyleSheetsForSet(#2)" }

// Document implements Document (supplemental)
extern elementFromPoint : (this: document, x: float32, y: float32) -> dom element
{ inline "#1.elementFromPoint(#2, #3)" }

extern caretPositionFromPoint : (this: document, x: float32, y: float32) -> dom caretPosition
{ inline "#1.caretPositionFromPoint(#2, #3)" }

// Document implements NodeSelector (supplemental)
extern querySelector : (this: document, selectors: string) -> dom element
{ inline "#1.querySelector(#2)" }

extern querySelectorAll : (this: document, selectors: string) -> dom nodeList
{ inline "#1.querySelectorAll(#2)" }

// Document implements DocumentCSS (overloading)
extern getOverrideStyle : (this: document, elt: element, pseudoElt: string) -> dom cssStyleDeclaration
{ inline "#1.getOverrideStyle(#2, #3)" }

// Document implements HTMLDocument (overloading)
extern location : (this: document) -> dom location
{ inline "#1.location" }
extern location : (this: document, assigned: location) -> dom ()
{ inline "(#1.location = #2)" }
extern url : (this: document) -> dom string
{ inline "#1.URL" }
extern domain : (this: document) -> dom string
{ inline "#1.domain" }
extern domain : (this: document, assigned: string) -> dom ()
{ inline "(#1.domain = #2)" }
extern referrer : (this: document) -> dom string
{ inline "#1.referrer" }
extern cookie : (this: document) -> dom string
{ inline "#1.cookie" }
extern cookie : (this: document, assigned: string) -> dom ()
{ inline "(#1.cookie = #2)" }
extern lastModified : (this: document) -> dom string
{ inline "#1.lastModified" }
extern readyState : (this: document) -> dom string
{ inline "#1.readyState" }
extern getElement : (this: document, name: string) -> dom any /* anyResult */
{ inline "#1.getElement(#2)" }

extern title : (this: document) -> dom string
{ inline "#1.title" }
extern title : (this: document, assigned: string) -> dom ()
{ inline "(#1.title = #2)" }
extern dir : (this: document) -> dom string
{ inline "#1.dir" }
extern dir : (this: document, assigned: string) -> dom ()
{ inline "(#1.dir = #2)" }
extern body : (this: document) -> dom htmlElement
{ inline "#1.body" }
extern body : (this: document, assigned: htmlElement) -> dom ()
{ inline "(#1.body = #2)" }
extern head : (this: document) -> dom htmlHeadElement
{ inline "#1.head" }
extern images : (this: document) -> dom htmlCollection
{ inline "#1.images" }
extern embeds : (this: document) -> dom htmlCollection
{ inline "#1.embeds" }
extern plugins : (this: document) -> dom htmlCollection
{ inline "#1.plugins" }
extern links : (this: document) -> dom htmlCollection
{ inline "#1.links" }
extern forms : (this: document) -> dom htmlCollection
{ inline "#1.forms" }
extern scripts : (this: document) -> dom htmlCollection
{ inline "#1.scripts" }
extern getElementsByName : (this: document, elementName: string) -> dom nodeList
{ inline "#1.getElementsByName(#2)" }

extern cssElementMap : (this: document) -> dom domElementMap
{ inline "#1.cssElementMap" }
extern innerHtml : (this: document) -> dom string
{ inline "#1.innerHTML" }
extern innerHtml : (this: document, assigned: string) -> dom ()
{ inline "(#1.innerHTML = #2)" }
extern open : (this: document) -> dom htmlDocument
{ inline "#1.open()" }

extern open : (this: document, type_: string) -> dom htmlDocument
{ inline "#1.open(#2)" }

extern open : (this: document, type_: string, replace: string) -> dom htmlDocument
{ inline "#1.open(#2, #3)" }

extern open : (this: document, url: string, name: string, features: string) -> dom windowProxy
{ inline "#1.open(#2, #3, #4)" }

extern open : (this: document, url: string, name: string, features: string, replace: bool) -> dom windowProxy
{ inline "#1.open(#2, #3, #4, #5)" }

extern close : (this: document) -> dom ()
{ inline "#1.close()" }

extern write : (this: document) -> dom ()
{ inline "#1.write()" }

extern write : (this: document, text: string) -> dom ()
{ inline "#1.write(#2)" }

extern writeln : (this: document) -> dom ()
{ inline "#1.writeln()" }

extern writeln : (this: document, text: string) -> dom ()
{ inline "#1.writeln(#2)" }

extern defaultView : (this: document) -> dom windowProxy
{ inline "#1.defaultView" }
extern activeElement : (this: document) -> dom element
{ inline "#1.activeElement" }
extern hasFocus : (this: document) -> dom bool
{ inline "#1.hasFocus()" }

extern designMode : (this: document) -> dom string
{ inline "#1.designMode" }
extern designMode : (this: document, assigned: string) -> dom ()
{ inline "(#1.designMode = #2)" }
extern execCommand : (this: document, commandId: string) -> dom bool
{ inline "#1.execCommand(#2)" }

extern execCommand : (this: document, commandId: string, showUi: bool) -> dom bool
{ inline "#1.execCommand(#2, #3)" }

extern execCommand : (this: document, commandId: string, showUi: bool, value: string) -> dom bool
{ inline "#1.execCommand(#2, #3, #4)" }

extern queryCommandEnabled : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandEnabled(#2)" }

extern queryCommandIndeterm : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandIndeterm(#2)" }

extern queryCommandState : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandState(#2)" }

extern queryCommandSupported : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandSupported(#2)" }

extern queryCommandValue : (this: document, commandId: string) -> dom string
{ inline "#1.queryCommandValue(#2)" }

extern commands : (this: document) -> dom htmlCollection
{ inline "#1.commands" }
extern onabort : (this: document) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
extern onabort : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
extern onabort : forall<e> (this: document, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
extern onblur : (this: document) -> dom (focusEvent -> dom ())
{ inline "#1.onblur" }
extern onblur : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onblur = #2)" }
extern onblur : forall<e> (this: document, assigned: (focusEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onblur = #2)" }
extern oncanplay : (this: document) -> dom (event -> dom ())
{ inline "#1.oncanplay" }
extern oncanplay : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplay = #2)" }
extern oncanplay : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplay = #2)" }
extern oncanplaythrough : (this: document) -> dom (event -> dom ())
{ inline "#1.oncanplaythrough" }
extern oncanplaythrough : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplaythrough = #2)" }
extern oncanplaythrough : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplaythrough = #2)" }
extern onchange : (this: document) -> dom (event -> dom ())
{ inline "#1.onchange" }
extern onchange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchange = #2)" }
extern onchange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchange = #2)" }
extern onclick : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onclick" }
extern onclick : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onclick = #2)" }
extern onclick : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onclick = #2)" }
extern oncontextmenu : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.oncontextmenu" }
extern oncontextmenu : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncontextmenu = #2)" }
extern oncontextmenu : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncontextmenu = #2)" }
extern oncuechange : (this: document) -> dom (event -> dom ())
{ inline "#1.oncuechange" }
extern oncuechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
extern oncuechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
extern ondblclick : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.ondblclick" }
extern ondblclick : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondblclick = #2)" }
extern ondblclick : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondblclick = #2)" }
extern ondrag : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondrag" }
extern ondrag : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrag = #2)" }
extern ondrag : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrag = #2)" }
extern ondragend : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragend" }
extern ondragend : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragend = #2)" }
extern ondragend : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragend = #2)" }
extern ondragenter : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragenter" }
extern ondragenter : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragenter = #2)" }
extern ondragenter : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragenter = #2)" }
extern ondragleave : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragleave" }
extern ondragleave : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragleave = #2)" }
extern ondragleave : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragleave = #2)" }
extern ondragover : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragover" }
extern ondragover : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragover = #2)" }
extern ondragover : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragover = #2)" }
extern ondragstart : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragstart" }
extern ondragstart : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragstart = #2)" }
extern ondragstart : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragstart = #2)" }
extern ondrop : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondrop" }
extern ondrop : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrop = #2)" }
extern ondrop : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrop = #2)" }
extern ondurationchange : (this: document) -> dom (event -> dom ())
{ inline "#1.ondurationchange" }
extern ondurationchange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondurationchange = #2)" }
extern ondurationchange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondurationchange = #2)" }
extern onemptied : (this: document) -> dom (event -> dom ())
{ inline "#1.onemptied" }
extern onemptied : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onemptied = #2)" }
extern onemptied : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onemptied = #2)" }
extern onended : (this: document) -> dom (event -> dom ())
{ inline "#1.onended" }
extern onended : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
extern onended : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
extern onerror : (this: document) -> dom (event -> dom ())
{ inline "#1.onerror" }
extern onerror : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
extern onerror : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
extern onfocus : (this: document) -> dom (focusEvent -> dom ())
{ inline "#1.onfocus" }
extern onfocus : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onfocus = #2)" }
extern onfocus : forall<e> (this: document, assigned: (focusEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onfocus = #2)" }
extern oninput : (this: document) -> dom (event -> dom ())
{ inline "#1.oninput" }
extern oninput : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninput = #2)" }
extern oninput : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninput = #2)" }
extern oninvalid : (this: document) -> dom (event -> dom ())
{ inline "#1.oninvalid" }
extern oninvalid : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninvalid = #2)" }
extern oninvalid : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninvalid = #2)" }
extern onkeydown : (this: document) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeydown" }
extern onkeydown : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeydown = #2)" }
extern onkeydown : forall<e> (this: document, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeydown = #2)" }
extern onkeypress : (this: document) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeypress" }
extern onkeypress : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeypress = #2)" }
extern onkeypress : forall<e> (this: document, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeypress = #2)" }
extern onkeyup : (this: document) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeyup" }
extern onkeyup : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeyup = #2)" }
extern onkeyup : forall<e> (this: document, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeyup = #2)" }
extern onload : (this: document) -> dom (event -> dom ())
{ inline "#1.onload" }
extern onload : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
extern onload : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
extern onloadeddata : (this: document) -> dom (event -> dom ())
{ inline "#1.onloadeddata" }
extern onloadeddata : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadeddata = #2)" }
extern onloadeddata : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadeddata = #2)" }
extern onloadedmetadata : (this: document) -> dom (event -> dom ())
{ inline "#1.onloadedmetadata" }
extern onloadedmetadata : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadedmetadata = #2)" }
extern onloadedmetadata : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadedmetadata = #2)" }
extern onloadstart : (this: document) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
extern onloadstart : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
extern onloadstart : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
extern onmousedown : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmousedown" }
extern onmousedown : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousedown = #2)" }
extern onmousedown : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousedown = #2)" }
extern onmousemove : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmousemove" }
extern onmousemove : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousemove = #2)" }
extern onmousemove : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousemove = #2)" }
extern onmouseout : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseout" }
extern onmouseout : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseout = #2)" }
extern onmouseout : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseout = #2)" }
extern onmouseover : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseover" }
extern onmouseover : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseover = #2)" }
extern onmouseover : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseover = #2)" }
extern onmouseup : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseup" }
extern onmouseup : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseup = #2)" }
extern onmouseup : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseup = #2)" }
extern onmousewheel : (this: document) -> dom (wheelEvent -> dom ())
{ inline "#1.onmousewheel" }
extern onmousewheel : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousewheel = #2)" }
extern onmousewheel : forall<e> (this: document, assigned: (wheelEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousewheel = #2)" }
extern onpause : (this: document) -> dom (event -> dom ())
{ inline "#1.onpause" }
extern onpause : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onpause = #2)" }
extern onpause : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onpause = #2)" }
extern onplay : (this: document) -> dom (event -> dom ())
{ inline "#1.onplay" }
extern onplay : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplay = #2)" }
extern onplay : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplay = #2)" }
extern onplaying : (this: document) -> dom (event -> dom ())
{ inline "#1.onplaying" }
extern onplaying : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplaying = #2)" }
extern onplaying : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplaying = #2)" }
extern onprogress : (this: document) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
extern onprogress : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
extern onprogress : forall<e> (this: document, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
extern onratechange : (this: document) -> dom (event -> dom ())
{ inline "#1.onratechange" }
extern onratechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onratechange = #2)" }
extern onratechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onratechange = #2)" }
extern onreadystatechange : (this: document) -> dom (event -> dom ())
{ inline "#1.onreadystatechange" }
extern onreadystatechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
extern onreadystatechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
extern onreset : (this: document) -> dom (event -> dom ())
{ inline "#1.onreset" }
extern onreset : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreset = #2)" }
extern onreset : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreset = #2)" }
extern onscroll : (this: document) -> dom (uiEvent -> dom ())
{ inline "#1.onscroll" }
extern onscroll : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onscroll = #2)" }
extern onscroll : forall<e> (this: document, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onscroll = #2)" }
extern onseeked : (this: document) -> dom (event -> dom ())
{ inline "#1.onseeked" }
extern onseeked : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeked = #2)" }
extern onseeked : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeked = #2)" }
extern onseeking : (this: document) -> dom (event -> dom ())
{ inline "#1.onseeking" }
extern onseeking : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeking = #2)" }
extern onseeking : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeking = #2)" }
extern onselect : (this: document) -> dom (uiEvent -> dom ())
{ inline "#1.onselect" }
extern onselect : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onselect = #2)" }
extern onselect : forall<e> (this: document, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onselect = #2)" }
extern onshow : (this: document) -> dom (event -> dom ())
{ inline "#1.onshow" }
extern onshow : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onshow = #2)" }
extern onshow : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onshow = #2)" }
extern onstalled : (this: document) -> dom (event -> dom ())
{ inline "#1.onstalled" }
extern onstalled : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onstalled = #2)" }
extern onstalled : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onstalled = #2)" }
extern onsubmit : (this: document) -> dom (event -> dom ())
{ inline "#1.onsubmit" }
extern onsubmit : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsubmit = #2)" }
extern onsubmit : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsubmit = #2)" }
extern onsuspend : (this: document) -> dom (event -> dom ())
{ inline "#1.onsuspend" }
extern onsuspend : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsuspend = #2)" }
extern onsuspend : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsuspend = #2)" }
extern ontimeupdate : (this: document) -> dom (event -> dom ())
{ inline "#1.ontimeupdate" }
extern ontimeupdate : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeupdate = #2)" }
extern ontimeupdate : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeupdate = #2)" }
extern onvolumechange : (this: document) -> dom (event -> dom ())
{ inline "#1.onvolumechange" }
extern onvolumechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onvolumechange = #2)" }
extern onvolumechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onvolumechange = #2)" }
extern onwaiting : (this: document) -> dom (event -> dom ())
{ inline "#1.onwaiting" }
extern onwaiting : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onwaiting = #2)" }
extern onwaiting : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onwaiting = #2)" }
// Document implements HTMLDocument-34 (overloading)
extern fgColor : (this: document) -> dom string
{ inline "#1.fgColor" }
extern fgColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.fgColor = #2)" }
extern bgColor : (this: document) -> dom string
{ inline "#1.bgColor" }
extern bgColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.bgColor = #2)" }
extern linkColor : (this: document) -> dom string
{ inline "#1.linkColor" }
extern linkColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.linkColor = #2)" }
extern vlinkColor : (this: document) -> dom string
{ inline "#1.vlinkColor" }
extern vlinkColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.vlinkColor = #2)" }
extern alinkColor : (this: document) -> dom string
{ inline "#1.alinkColor" }
extern alinkColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.alinkColor = #2)" }
extern anchors : (this: document) -> dom htmlCollection
{ inline "#1.anchors" }
extern applets : (this: document) -> dom htmlCollection
{ inline "#1.applets" }
extern clear : (this: document) -> dom ()
{ inline "#1.clear()" }

extern all : (this: document) -> dom htmlAllCollection
{ inline "#1.all" }
// Document implements DocumentRange (overloading)
extern createRange : (this: document) -> dom range
{ inline "#1.createRange()" }

// Document implements DocumentTraversal (overloading)
extern createNodeIterator : (this: document, root: node, whatToShow: uint32, filter: nodeFilter, entityReferenceExpansion: bool) -> dom nodeIterator
{ inline "#1.createNodeIterator(#2, #3, #4, #5)" }

extern createTreeWalker : (this: document, root: node, whatToShow: uint32, filter: nodeFilter, entityReferenceExpansion: bool) -> dom treeWalker
{ inline "#1.createTreeWalker(#2, #3, #4, #5)" }

// Document extends Node
extern node : (document) -> node // upcasting to extended type
{ inline "#1" }
// Document implements in extension Node (overloading)
extern nodeType : (this: document) -> dom nodeType
{ inline "#1.nodeType" }
extern nodeName : (this: document) -> dom string
{ inline "#1.nodeName" }
extern baseUri : (this: document) -> dom string
{ inline "#1.baseURI" }
extern ownerDocument : (this: document) -> dom document
{ inline "#1.ownerDocument" }
extern parentNode : (this: document) -> dom node
{ inline "#1.parentNode" }
extern parentElement : (this: document) -> dom element
{ inline "#1.parentElement" }
extern hasChildNodes : (this: document) -> dom bool
{ inline "#1.hasChildNodes()" }

extern childNodes : (this: document) -> dom nodeList
{ inline "#1.childNodes" }
extern firstChild : (this: document) -> dom node
{ inline "#1.firstChild" }
extern lastChild : (this: document) -> dom node
{ inline "#1.lastChild" }
extern previousSibling : (this: document) -> dom node
{ inline "#1.previousSibling" }
extern nextSibling : (this: document) -> dom node
{ inline "#1.nextSibling" }
extern compareDocumentPosition : (this: document, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

extern nodeValue : (this: document) -> dom string
{ inline "#1.nodeValue" }
extern nodeValue : (this: document, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
extern textContent : (this: document) -> dom string
{ inline "#1.textContent" }
extern textContent : (this: document, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
extern insertBefore : (this: document, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

extern replaceChild : (this: document, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

extern removeChild : (this: document, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

extern appendChild : (this: document, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

extern cloneNode : (this: document, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

extern isSameNode : (this: document, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

extern isEqualNode : (this: document, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

extern lookupPrefix : (this: document, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

extern lookupNamespaceUri : (this: document, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

extern isDefaultNamespace : (this: document, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// Document extends EventTarget
extern eventTarget : (document) -> eventTarget // upcasting to extended type
{ inline "#1" }
// Document implements in extension EventTarget (overloading)
extern addEventListener : (this: document, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

extern addEventListener : (this: document, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

extern removeEventListener : (this: document, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

extern removeEventListener : (this: document, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

extern dispatchEvent : (this: document, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

