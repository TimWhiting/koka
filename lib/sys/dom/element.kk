pub module sys/dom/element

// Interface Element (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
inline extern maybeElement : forall<a> (a) -> maybe<element>
{ inline "(#1.nodeType===Node.ELEMENT_NODE?std_core.Just(#1):std_core.Nothing)" }
inline extern toElement : forall<a> (a) -> exn element
{ inline "(#1.nodeType===Node.ELEMENT_NODE?#1:std_core.error('toElement: cast failed'))" }


// Element implements Element (supplemental)
inline extern namespaceUri : (this: element) -> dom string
{ inline "#1.namespaceURI" }
inline extern prefix_ : (this: element) -> dom string
{ inline "#1.prefix" }
inline extern localName : (this: element) -> dom string
{ inline "#1.localName" }
inline extern tagName : (this: element) -> dom string
{ inline "#1.tagName" }
inline extern attributes : (this: element) -> dom list<attr>
{ inline "std_core.alert('attributes: not implemented')" }

inline extern getAttribute : (this: element, qualifiedName: string) -> dom string
{ inline "#1.getAttribute(#2)" }

inline extern getAttributeNs : (this: element, namespace: string, localName: string) -> dom string
{ inline "#1.getAttributeNS(#2, #3)" }

inline extern setAttribute : (this: element, qualifiedName: string, value: string) -> dom ()
{ inline "#1.setAttribute(#2, #3)" }

inline extern setAttributeNs : (this: element, namespace: string, qualifiedName: string, value: string) -> dom ()
{ inline "#1.setAttributeNS(#2, #3, #4)" }

inline extern removeAttribute : (this: element, qualifiedName: string) -> dom ()
{ inline "#1.removeAttribute(#2)" }

inline extern removeAttributeNs : (this: element, namespace: string, localName: string) -> dom ()
{ inline "#1.removeAttributeNS(#2, #3)" }

inline extern hasAttribute : (this: element, qualifiedName: string) -> dom bool
{ inline "#1.hasAttribute(#2)" }

inline extern hasAttributeNs : (this: element, namespace: string, localName: string) -> dom bool
{ inline "#1.hasAttributeNS(#2, #3)" }

inline extern getElementsByTagName : (this: element, qualifiedName: string) -> dom nodeList
{ inline "#1.getElementsByTagName(#2)" }

inline extern getElementsByTagNameNs : (this: element, namespace: string, localName: string) -> dom nodeList
{ inline "#1.getElementsByTagNameNS(#2, #3)" }

inline extern getElementsByClassName : (this: element, classNames: string) -> dom nodeList
{ inline "#1.getElementsByClassName(#2)" }

inline extern children : (this: element) -> dom htmlCollection
{ inline "#1.children" }
inline extern firstElementChild : (this: element) -> dom element
{ inline "#1.firstElementChild" }
inline extern lastElementChild : (this: element) -> dom element
{ inline "#1.lastElementChild" }
inline extern previousElementSibling : (this: element) -> dom element
{ inline "#1.previousElementSibling" }
inline extern nextElementSibling : (this: element) -> dom element
{ inline "#1.nextElementSibling" }
inline extern childElementCount : (this: element) -> dom uint32
{ inline "#1.childElementCount" }
// Element implements Element (supplemental)
inline extern getClientRects : (this: element) -> dom clientRectList
{ inline "#1.getClientRects()" }

inline extern getBoundingClientRect : (this: element) -> dom clientRect
{ inline "#1.getBoundingClientRect()" }

inline extern scrollIntoView : (this: element) -> dom ()
{ inline "#1.scrollIntoView()" }

inline extern scrollIntoView : (this: element, top: bool) -> dom ()
{ inline "#1.scrollIntoView(#2)" }

inline extern scrollTop : (this: element) -> dom int32
{ inline "#1.scrollTop" }
inline extern scrollTop : (this: element, assigned: int32) -> dom ()
{ inline "(#1.scrollTop = #2)" }
inline extern scrollLeft : (this: element) -> dom int32
{ inline "#1.scrollLeft" }
inline extern scrollLeft : (this: element, assigned: int32) -> dom ()
{ inline "(#1.scrollLeft = #2)" }
inline extern scrollWidth : (this: element) -> dom int32
{ inline "#1.scrollWidth" }
inline extern scrollHeight : (this: element) -> dom int32
{ inline "#1.scrollHeight" }
inline extern clientTop : (this: element) -> dom int32
{ inline "#1.clientTop" }
inline extern clientLeft : (this: element) -> dom int32
{ inline "#1.clientLeft" }
inline extern clientWidth : (this: element) -> dom int32
{ inline "#1.clientWidth" }
inline extern clientHeight : (this: element) -> dom int32
{ inline "#1.clientHeight" }
// Element implements NodeSelector (supplemental)
inline extern querySelector : (this: element, selectors: string) -> dom element
{ inline "#1.querySelector(#2)" }

inline extern querySelectorAll : (this: element, selectors: string) -> dom nodeList
{ inline "#1.querySelectorAll(#2)" }

// Element extends Node
inline extern node : (element) -> node // upcasting to extended type
{ inline "#1" }
// Element implements in extension Node (overloading)
inline extern nodeType : (this: element) -> dom nodeType
{ inline "#1.nodeType" }
inline extern nodeName : (this: element) -> dom string
{ inline "#1.nodeName" }
inline extern baseUri : (this: element) -> dom string
{ inline "#1.baseURI" }
inline extern ownerDocument : (this: element) -> dom document
{ inline "#1.ownerDocument" }
inline extern parentNode : (this: element) -> dom node
{ inline "#1.parentNode" }
inline extern parentElement : (this: element) -> dom element
{ inline "#1.parentElement" }
inline extern hasChildNodes : (this: element) -> dom bool
{ inline "#1.hasChildNodes()" }

inline extern childNodes : (this: element) -> dom nodeList
{ inline "#1.childNodes" }
inline extern firstChild : (this: element) -> dom node
{ inline "#1.firstChild" }
inline extern lastChild : (this: element) -> dom node
{ inline "#1.lastChild" }
inline extern previousSibling : (this: element) -> dom node
{ inline "#1.previousSibling" }
inline extern nextSibling : (this: element) -> dom node
{ inline "#1.nextSibling" }
inline extern compareDocumentPosition : (this: element, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

inline extern nodeValue : (this: element) -> dom string
{ inline "#1.nodeValue" }
inline extern nodeValue : (this: element, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
inline extern textContent : (this: element) -> dom string
{ inline "#1.textContent" }
inline extern textContent : (this: element, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
inline extern insertBefore : (this: element, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

inline extern replaceChild : (this: element, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

inline extern removeChild : (this: element, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

inline extern appendChild : (this: element, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

inline extern cloneNode : (this: element, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

inline extern isSameNode : (this: element, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

inline extern isEqualNode : (this: element, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

inline extern lookupPrefix : (this: element, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

inline extern lookupNamespaceUri : (this: element, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

inline extern isDefaultNamespace : (this: element, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// Element extends EventTarget
inline extern eventTarget : (element) -> eventTarget // upcasting to extended type
{ inline "#1" }
// Element implements in extension EventTarget (overloading)
inline extern addEventListener : (this: element, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

inline extern addEventListener : (this: element, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

inline extern removeEventListener : (this: element, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

inline extern removeEventListener : (this: element, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

inline extern dispatchEvent : (this: element, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

